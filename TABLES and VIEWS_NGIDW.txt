- TABLES :

create or replace schema COMMON;

create or replace TABLE DIM_STORE_MASTER (
	STORE_ID NUMBER(38,0),
	STORE_NUMBER NUMBER(38,0),
	NGI_STORE_NUMBER VARCHAR(5) NOT NULL,
	OPERATING_COMPANY_ID NUMBER(38,0) NOT NULL,
	MATCH_STORE_NAME VARCHAR(75),
	CURRENT_FLAG BOOLEAN NOT NULL DEFAULT TRUE,
	EFFECTIVE_START_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CAST('01/01/1900' AS TIMESTAMP_NTZ(9)),
	EFFECTIVE_END_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CAST('01/01/3000' AS TIMESTAMP_NTZ(9)),
	ACTIVE_FLAG BOOLEAN NOT NULL DEFAULT TRUE,
	EXTRACT_DATE TIMESTAMP_NTZ(9),
	SOURCE_TABLE_NAME VARCHAR(100),
	CREATE_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	MAINT_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	CREATE_UID VARCHAR(128),
	MAINT_UID VARCHAR(128),
	DELETE_FLAG BOOLEAN NOT NULL DEFAULT FALSE,
	DELETE_DATE TIMESTAMP_NTZ(9),
	DELETE_UID VARCHAR(128)
);
create or replace TABLE DIM_STORE_STACK (
	STORE_ID NUMBER(38,0),
	SALES_STORE_NUMBER NUMBER(38,0),
	NGI_STORE_NUMBER VARCHAR(5) NOT NULL,
	OPERATING_COMPANY_ID NUMBER(38,0) NOT NULL,
	SALES_STORE_NAME VARCHAR(50),
	SALES_STORE_LABEL VARCHAR(55),
	SALES_STORE_DESC VARCHAR(275),
	STORE_MANAGER_LAST_NAME VARCHAR(255),
	STORE_MANAGER_FIRST_NAME VARCHAR(255),
	ADDRESS1 VARCHAR(50),
	CITY VARCHAR(50),
	ZIP VARCHAR(10),
	COUNTY VARCHAR(50),
	TAX_REGION_ID NUMBER(38,0),
	TAX_REGION_NUMBER NUMBER(38,0),
	TAX_REGION_LABEL VARCHAR(100),
	FMM_FLAG BOOLEAN,
	HOURLY_SALES_FLAG BOOLEAN,
	CASH_SALES_FLAG BOOLEAN,
	CAODSD_FLAG BOOLEAN,
	RX_FLAG BOOLEAN,
	NAVISTOR_FLAG BOOLEAN,
	NCC_FLAG BOOLEAN,
	REQUISITIONS_FLAG BOOLEAN,
	HOUSE_CALLS_ONLY_FLAG BOOLEAN,
	STORE_ACTIVE_FLAG BOOLEAN,
	STORE_DELETE_FLAG BOOLEAN,
	FUEL_ADVANTEDGE_FLAG BOOLEAN,
	FUEL_START_DAY_KEY NUMBER(38,0),
	FUEL_END_DAY_KEY NUMBER(38,0),
	PI_STORE_FLAG BOOLEAN,
	PI_START_DATE DATE,
	PI_START_FISCAL_DAY_ID NUMBER(38,0) NOT NULL,
	STORE_REPORTING_STATUS VARCHAR(25),
	STORE_OPERATION_TYPE VARCHAR(100),
	STORE_STATUS_EFFECTIVE_START_DATE TIMESTAMP_NTZ(9),
	STORE_STATUS_EFFECTIVE_START_FISCAL_DAY_ID NUMBER(38,0),
	STORE_STATUS_EFFECTIVE_END_DATE TIMESTAMP_NTZ(9),
	STORE_STATUS_EFFECTIVE_END_FISCAL_DAY_ID NUMBER(38,0),
	LAST_YEAR_COMP_STORE_ID NUMBER(38,0),
	LAST_YEAR_COMP_STORE_NUM NUMBER(38,0),
	LAST_YEAR_COMP_START_DATE TIMESTAMP_NTZ(9),
	LAST_YEAR_COMP_START_FISCAL_DAY_ID NUMBER(38,0),
	LAST_YEAR_COMP_END_DATE TIMESTAMP_NTZ(9),
	LAST_YEAR_COMP_END_FISCAL_DAY_ID NUMBER(38,0),
	GEO_AREA_CODE VARCHAR(10),
	GEO_AREA_LABEL VARCHAR(55),
	GEO_AREA_DESC VARCHAR(275),
	GEO_AREA_ACTIVE_FLAG BOOLEAN,
	GEO_AREA_DELETE_FLAG BOOLEAN,
	STORE_REPORTING_AREA_LABEL VARCHAR(55),
	STORE_REPORTING_AREA_DESC VARCHAR(255),
	STORE_REPORTING_AREA_SORT_ORDER NUMBER(38,0),
	STORE_REPORTING_AREA_ACTIVE_FLAG BOOLEAN,
	STORE_REPORTING_AREA_DELETE_FLAG BOOLEAN,
	STATE_CODE VARCHAR(2),
	STATE_LABEL VARCHAR(55),
	STATE_DESC VARCHAR(275),
	STATE_ACTIVE_FLAG BOOLEAN,
	STATE_DELETE_FLAG BOOLEAN,
	ZONE_NUMBER NUMBER(38,0),
	ZONE_LABEL VARCHAR(55),
	ZONE_DESC VARCHAR(275),
	ZONE_DIRECTOR_LAST_NAME VARCHAR(255),
	ZONE_DIRECTOR_FIRST_NAME VARCHAR(255),
	ZONE_ACTIVE_FLAG BOOLEAN,
	ZONE_DELETE_FLAG BOOLEAN,
	CHAIN_CODE VARCHAR(1),
	CHAIN_LABEL VARCHAR(55),
	CHAIN_DESC VARCHAR(275),
	CHAIN_ACTIVE_FLAG BOOLEAN,
	CHAIN_DELETE_FLAG BOOLEAN,
	REGION_NUMBER NUMBER(38,0),
	REGION_LABEL VARCHAR(55),
	REGION_DESC VARCHAR(275),
	REGION_VP_LAST_NAME VARCHAR(255),
	REGION_VP_FIRST_NAME VARCHAR(255),
	REGION_ACTIVE_FLAG BOOLEAN,
	REGION_DELETE_FLAG BOOLEAN,
	SPECIALIST_REGION_ID NUMBER(38,0),
	SPECIALIST_REGION_CODE VARCHAR(10),
	SPECIALIST_REGION_LABEL VARCHAR(100),
	SPECIALIST_REGION_DESC VARCHAR(255),
	CORPORATION_NUMBER NUMBER(38,0),
	CORPORATION_LABEL VARCHAR(55),
	CORPORATION_DESC VARCHAR(275),
	CORPORATION_ACTIVE_FLAG BOOLEAN,
	CORPORATION_DELETE_FLAG BOOLEAN,
	STACK_CREATE_DATE TIMESTAMP_NTZ(9),
	STACK_CREATE_UID VARCHAR(128)
);
create or replace TABLE LKP_CHAIN (
	CHAIN_ID NUMBER(38,0),
	CHAIN_CODE VARCHAR(1),
	CHAIN_LABEL VARCHAR(50),
	CHAIN_DESC VARCHAR(255),
	ACTIVE_FLAG BOOLEAN NOT NULL DEFAULT TRUE,
	EXTRACT_DATE TIMESTAMP_NTZ(9),
	SOURCE_TABLE_NAME VARCHAR(100),
	CREATE_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	MAINT_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	CREATE_UID VARCHAR(128),
	MAINT_UID VARCHAR(128),
	DELETE_FLAG BOOLEAN NOT NULL DEFAULT FALSE,
	DELETE_DATE TIMESTAMP_NTZ(9),
	DELETE_UID VARCHAR(128)
);
create or replace TABLE LKP_GEO_AREA (
	GEO_AREA_ID NUMBER(38,0),
	GEO_AREA_CODE VARCHAR(10),
	GEO_AREA_LABEL VARCHAR(50),
	GEO_AREA_DESC VARCHAR(255),
	ACTIVE_FLAG BOOLEAN NOT NULL DEFAULT TRUE,
	EXTRACT_DATE TIMESTAMP_NTZ(9),
	SOURCE_TABLE_NAME VARCHAR(100),
	CREATE_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	MAINT_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	CREATE_UID VARCHAR(128),
	MAINT_UID VARCHAR(128),
	DELETE_FLAG BOOLEAN NOT NULL DEFAULT FALSE,
	DELETE_DATE TIMESTAMP_NTZ(9),
	DELETE_UID VARCHAR(128)
);
create or replace TABLE LKP_OPERATING_COMPANY (
	OPERATING_COMPANY_ID NUMBER(38,0),
	OPERATING_COMPANY_CODE VARCHAR(1),
	OPERATING_COMPANY_LABEL VARCHAR(50),
	OPERATING_COMPANY_DESC VARCHAR(255),
	ACTIVE_FLAG BOOLEAN NOT NULL DEFAULT TRUE,
	EXTRACT_DATE TIMESTAMP_NTZ(9),
	SOURCE_TABLE_NAME VARCHAR(100),
	CREATE_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	MAINT_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	CREATE_UID VARCHAR(128),
	MAINT_UID VARCHAR(128),
	DELETE_FLAG BOOLEAN NOT NULL DEFAULT FALSE,
	DELETE_DATE TIMESTAMP_NTZ(9),
	DELETE_UID VARCHAR(128)
);
create or replace TABLE LKP_REGION (
	REGION_ID NUMBER(38,0),
	REGION_NUMBER NUMBER(38,0),
	REGION_LABEL VARCHAR(50),
	REGION_DESC VARCHAR(255),
	REGION_MANAGER_LAST_NAME VARCHAR(128),
	REGION_MANAGER_FIRST_NAME VARCHAR(128),
	ACTIVE_FLAG BOOLEAN NOT NULL DEFAULT TRUE,
	CURRENT_FLAG BOOLEAN NOT NULL DEFAULT TRUE,
	EFFECTIVE_START_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	EFFECTIVE_END_DATE TIMESTAMP_NTZ(9),
	EXTRACT_DATE TIMESTAMP_NTZ(9),
	SOURCE_TABLE_NAME VARCHAR(100),
	CREATE_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	MAINT_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	CREATE_UID VARCHAR(128),
	MAINT_UID VARCHAR(128),
	DELETE_FLAG BOOLEAN NOT NULL DEFAULT FALSE,
	DELETE_DATE TIMESTAMP_NTZ(9),
	DELETE_UID VARCHAR(128)
);
create or replace TABLE LKP_SALES_STORE_ATTRIBUTE (
	STORE_ATTRIBUTE_ID NUMBER(38,0) NOT NULL,
	STORE_ID NUMBER(38,0) NOT NULL,
	STORE_NUMBER NUMBER(38,0) NOT NULL,
	NGI_STORE_NUMBER VARCHAR(5) NOT NULL,
	OPERATING_COMPANY_ID NUMBER(38,0) NOT NULL,
	STORE_REPORTING_STATUS VARCHAR(25) NOT NULL,
	STORE_OPERATION_TYPE VARCHAR(100) NOT NULL,
	MANAGER_LAST_NAME VARCHAR(128),
	MANAGER_FIRST_NAME VARCHAR(128),
	CHAIN_ID NUMBER(38,0) NOT NULL,
	CHAIN_CODE VARCHAR(128),
	CHAIN_LABEL VARCHAR(128),
	TAX_REGION_ID NUMBER(38,0),
	TAX_REGION_NUMBER NUMBER(38,0),
	TAX_REGION_LABEL VARCHAR(100),
	SPECIALIST_REGION_ID NUMBER(38,0),
	SPECIALIST_REGION_CODE VARCHAR(10),
	PROCESSOR_340B VARCHAR(10),
	STORELINE_FLAG BOOLEAN DEFAULT FALSE,
	PROMOTION_FILE_ENV VARCHAR(10),
	LAST_YEAR_COMP_STORE_ID NUMBER(38,0),
	LAST_YEAR_COMP_STORE_NUM NUMBER(38,0),
	CURRENT_FLAG BOOLEAN NOT NULL,
	EFFECTIVE_START_DATE TIMESTAMP_NTZ(9) NOT NULL,
	EFFECTIVE_START_FISCAL_DAY_ID NUMBER(38,0) NOT NULL,
	EFFECTIVE_END_DATE TIMESTAMP_NTZ(9) NOT NULL,
	EFFECTIVE_END_FISCAL_DAY_ID NUMBER(38,0) NOT NULL,
	LY_COMP_START_DATE TIMESTAMP_NTZ(9) NOT NULL,
	LY_COMP_START_FISCAL_DAY_ID NUMBER(38,0) NOT NULL,
	LY_COMP_END_DATE TIMESTAMP_NTZ(9) NOT NULL,
	LY_COMP_END_FISCAL_DAY_ID NUMBER(38,0) NOT NULL,
	CREATE_DATE TIMESTAMP_NTZ(9) NOT NULL,
	MAINT_DATE TIMESTAMP_NTZ(9) NOT NULL,
	CREATE_UID VARCHAR(128) NOT NULL,
	MAINT_UID VARCHAR(128) NOT NULL,
	DELETE_FLAG BOOLEAN NOT NULL,
	DELETE_DATE TIMESTAMP_NTZ(9),
	DELETE_UID VARCHAR(128),
	LATITUDE VARCHAR(25),
	LONGITUDE VARCHAR(25),
	IS_SMART_SCAN BOOLEAN
);
create or replace TABLE LKP_STATE (
	STATE_ID NUMBER(38,0),
	STATE_CODE VARCHAR(2),
	STATE_LABEL VARCHAR(50),
	STATE_DESC VARCHAR(255),
	CHAIN_ID NUMBER(38,0),
	CHAIN_CODE VARCHAR(1),
	ACTIVE_FLAG BOOLEAN NOT NULL DEFAULT TRUE,
	EXTRACT_DATE TIMESTAMP_NTZ(9),
	SOURCE_TABLE_NAME VARCHAR(100),
	CREATE_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	MAINT_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	CREATE_UID VARCHAR(128),
	MAINT_UID VARCHAR(128),
	DELETE_FLAG BOOLEAN NOT NULL DEFAULT FALSE,
	DELETE_DATE TIMESTAMP_NTZ(9),
	DELETE_UID VARCHAR(128)
);
create or replace TABLE LKP_STORE_TYPE (
	STORE_TYPE_ID NUMBER(38,0),
	STORE_TYPE_CODE VARCHAR(1),
	STORE_TYPE_LABEL VARCHAR(50),
	STORE_TYPE_DESC VARCHAR(255),
	ACTIVE_FLAG BOOLEAN NOT NULL DEFAULT TRUE,
	EXTRACT_DATE TIMESTAMP_NTZ(9),
	SOURCE_TABLE_NAME VARCHAR(100),
	CREATE_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	MAINT_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	CREATE_UID VARCHAR(128),
	MAINT_UID VARCHAR(128),
	DELETE_FLAG BOOLEAN NOT NULL DEFAULT FALSE,
	DELETE_DATE TIMESTAMP_NTZ(9),
	DELETE_UID VARCHAR(128)
);
create or replace TABLE LKP_ZONE (
	ZONE_ID NUMBER(38,0),
	ZONE_NUMBER NUMBER(38,0),
	ZONE_LABEL VARCHAR(50),
	ZONE_DESC VARCHAR(255),
	ZONE_MANAGER_LAST_NAME VARCHAR(128),
	ZONE_MANAGER_FIRST_NAME VARCHAR(128),
	REGION_ID NUMBER(38,0),
	REGION_NUMBER NUMBER(38,0),
	ACTIVE_FLAG BOOLEAN NOT NULL DEFAULT TRUE,
	CURRENT_FLAG BOOLEAN NOT NULL DEFAULT TRUE,
	EFFECTIVE_START_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	EFFECTIVE_END_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CAST('01/01/2013' AS TIMESTAMP_NTZ(9)),
	EXTRACT_DATE TIMESTAMP_NTZ(9),
	SOURCE_TABLE_NAME VARCHAR(100),
	CREATE_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	MAINT_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	CREATE_UID VARCHAR(128),
	MAINT_UID VARCHAR(128),
	DELETE_FLAG BOOLEAN NOT NULL DEFAULT FALSE,
	DELETE_DATE TIMESTAMP_NTZ(9),
	DELETE_UID VARCHAR(128)
);
create or replace TABLE SEC_OPERATING_COMPANY (
	OPERATING_COMPANY_ID NUMBER(38,0),
	DB_USER_ID VARCHAR(255),
	ACTIVE_FLAG BOOLEAN NOT NULL DEFAULT TRUE,
	EXTRACT_DATE TIMESTAMP_NTZ(9),
	SOURCE_TABLE_NAME VARCHAR(100),
	CREATE_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	MAINT_DATE TIMESTAMP_NTZ(9) NOT NULL DEFAULT CURRENT_DATE(),
	CREATE_UID VARCHAR(128),
	MAINT_UID VARCHAR(128),
	DELETE_FLAG BOOLEAN NOT NULL DEFAULT FALSE,
	DELETE_DATE TIMESTAMP_NTZ(9),
	DELETE_UID VARCHAR(128)
);


-------------------------------------------------------------------------------------------------------------------------------------------------------

- VIEWS :

create or replace schema REPORTING;

create or replace view DIM_STORE_CURRENT(
	STORE_ID,
	CURRENT_FLAG,
	ACTIVE_FLAG,
	DELETE_FLAG
) as

SELECT DIM_STORE_MASTER.STORE_ID, 
DIM_STORE_MASTER.CURRENT_FLAG, DIM_STORE_MASTER.ACTIVE_FLAG, DIM_STORE_MASTER.DELETE_FLAG From COMMON.DIM_STORE_MASTER
where CAST(LEFT(NGI_STORE_NUMBER,2) as number)  in 
  (select OPERATING_COMPANY_ID 
  FROM COMMON.SEC_OPERATING_COMPANY 
  where DB_USER_ID = current_user and ACTIVE_FLAG);
create or replace view DIM_STORE_STACK_CURRENT(
	STORE_ID,
	SALES_STORE_NUMBER,
	SALES_STORE_NAME,
	NGI_STORE_NUMBER,
	OPERATING_COMPANY_ID,
	SALES_STORE_LABEL,
	SALES_STORE_DESC,
	STORE_MANAGER_LAST_NAME,
	STORE_MANAGER_FIRST_NAME,
	ADDRESS1,
	CITY,
	ZIP,
	COUNTY,
	TAX_REGION_ID,
	TAX_REGION_NUMBER,
	TAX_REGION_LABEL,
	FMM_FLAG,
	HOURLY_SALES_FLAG,
	CASH_SALES_FLAG,
	CAODSD_FLAG,
	RX_FLAG,
	NAVISTOR_FLAG,
	NCC_FLAG,
	REQUISITIONS_FLAG,
	HOUSE_CALLS_ONLY_FLAG,
	STORE_ACTIVE_FLAG,
	STORE_DELETE_FLAG,
	FUEL_ADVANTEDGE_FLAG,
	FUEL_START_DAY_KEY,
	FUEL_END_DAY_KEY,
	PI_STORE_FLAG,
	PI_START_DATE,
	PI_START_FISCAL_DAY_ID,
	STORE_REPORTING_STATUS,
	STORE_OPERATION_TYPE,
	STORE_STATUS_EFFECTIVE_START_DATE,
	STORE_STATUS_EFFECTIVE_START_FISCAL_DAY_ID,
	STORE_STATUS_EFFECTIVE_END_DATE,
	STORE_STATUS_EFFECTIVE_END_FISCAL_DAY_ID,
	LAST_YEAR_COMP_STORE_ID,
	LAST_YEAR_COMP_STORE_NUM,
	LAST_YEAR_COMP_START_DATE,
	LAST_YEAR_COMP_START_FISCAL_DAY_ID,
	LAST_YEAR_COMP_END_DATE,
	LAST_YEAR_COMP_END_FISCAL_DAY_ID,
	GEO_AREA_CODE,
	GEO_AREA_LABEL,
	GEO_AREA_DESC,
	GEO_AREA_ACTIVE_FLAG,
	GEO_AREA_DELETE_FLAG,
	STORE_REPORTING_AREA_LABEL,
	STORE_REPORTING_AREA_DESC,
	STORE_REPORTING_AREA_SORT_ORDER,
	STORE_REPORTING_AREA_ACTIVE_FLAG,
	STORE_REPORTING_AREA_DELETE_FLAG,
	STATE_CODE,
	STATE_LABEL,
	STATE_DESC,
	STATE_ACTIVE_FLAG,
	STATE_DELETE_FLAG,
	ZONE_NUMBER,
	ZONE_LABEL,
	ZONE_DESC,
	ZONE_DIRECTOR_LAST_NAME,
	ZONE_DIRECTOR_FIRST_NAME,
	ZONE_ACTIVE_FLAG,
	ZONE_DELETE_FLAG,
	CHAIN_CODE,
	CHAIN_LABEL,
	CHAIN_DESC,
	CHAIN_ACTIVE_FLAG,
	CHAIN_DELETE_FLAG,
	REGION_NUMBER,
	REGION_LABEL,
	REGION_DESC,
	REGION_VP_LAST_NAME,
	REGION_VP_FIRST_NAME,
	REGION_ACTIVE_FLAG,
	REGION_DELETE_FLAG,
	SPECIALIST_REGION_ID,
	SPECIALIST_REGION_CODE,
	SPECIALIST_REGION_LABEL,
	SPECIALIST_REGION_DESC,
	CORPORATION_NUMBER,
	CORPORATION_LABEL,
	CORPORATION_DESC,
	CORPORATION_ACTIVE_FLAG,
	CORPORATION_DELETE_FLAG,
	STACK_CREATE_DATE,
	STACK_CREATE_UID,
	PROCESSOR_340B,
	STORELINE_FLAG,
	PROMOTION_FILE_ENV,
	LATITUDE,
	LONGITUDE,
	IS_SMART_SCAN
) as SELECT s.STORE_ID, s.SALES_STORE_NUMBER, s.SALES_STORE_NAME,s.NGI_STORE_NUMBER,s.OPERATING_COMPANY_ID, s.SALES_STORE_LABEL, s.SALES_STORE_DESC, s.STORE_MANAGER_LAST_NAME, s.STORE_MANAGER_FIRST_NAME, s.ADDRESS1, s.CITY, s.ZIP, s.COUNTY, s.TAX_REGION_ID, s.TAX_REGION_NUMBER, s.TAX_REGION_LABEL, s.FMM_FLAG, s.HOURLY_SALES_FLAG, s.CASH_SALES_FLAG, s.CAODSD_FLAG, s.RX_FLAG, s.NAVISTOR_FLAG, s.NCC_FLAG, s.REQUISITIONS_FLAG, s.HOUSE_CALLS_ONLY_FLAG, s.STORE_ACTIVE_FLAG, s.STORE_DELETE_FLAG, s.FUEL_ADVANTEDGE_FLAG, s.FUEL_START_DAY_KEY, s.FUEL_END_DAY_KEY, s.PI_STORE_FLAG, s.PI_START_DATE, s.PI_START_FISCAL_DAY_ID, s.STORE_REPORTING_STATUS, s.STORE_OPERATION_TYPE, s.STORE_STATUS_EFFECTIVE_START_DATE, s.STORE_STATUS_EFFECTIVE_START_FISCAL_DAY_ID, s.STORE_STATUS_EFFECTIVE_END_DATE, s.STORE_STATUS_EFFECTIVE_END_FISCAL_DAY_ID, s.LAST_YEAR_COMP_STORE_ID, s.LAST_YEAR_COMP_STORE_NUM, s.LAST_YEAR_COMP_START_DATE, s.LAST_YEAR_COMP_START_FISCAL_DAY_ID, s.LAST_YEAR_COMP_END_DATE, s.LAST_YEAR_COMP_END_FISCAL_DAY_ID, s.GEO_AREA_CODE, s.GEO_AREA_LABEL, s.GEO_AREA_DESC, s.GEO_AREA_ACTIVE_FLAG, s.GEO_AREA_DELETE_FLAG, s.STORE_REPORTING_AREA_LABEL, s.STORE_REPORTING_AREA_DESC, s.STORE_REPORTING_AREA_SORT_ORDER, s.STORE_REPORTING_AREA_ACTIVE_FLAG, s.STORE_REPORTING_AREA_DELETE_FLAG, s.STATE_CODE, s.STATE_LABEL, s.STATE_DESC, s.STATE_ACTIVE_FLAG, s.STATE_DELETE_FLAG, s.ZONE_NUMBER, s.ZONE_LABEL, s.ZONE_DESC, s.ZONE_DIRECTOR_LAST_NAME, s.ZONE_DIRECTOR_FIRST_NAME, s.ZONE_ACTIVE_FLAG, s.ZONE_DELETE_FLAG, s.CHAIN_CODE, s.CHAIN_LABEL, s.CHAIN_DESC, s.CHAIN_ACTIVE_FLAG, s.CHAIN_DELETE_FLAG, s.REGION_NUMBER, s.REGION_LABEL, s.REGION_DESC, s.REGION_VP_LAST_NAME, s.REGION_VP_FIRST_NAME, s.REGION_ACTIVE_FLAG, s.REGION_DELETE_FLAG, s.SPECIALIST_REGION_ID, s.SPECIALIST_REGION_CODE, s.SPECIALIST_REGION_LABEL, s.SPECIALIST_REGION_DESC, s.CORPORATION_NUMBER, s.CORPORATION_LABEL, s.CORPORATION_DESC, s.CORPORATION_ACTIVE_FLAG, s.CORPORATION_DELETE_FLAG, s.STACK_CREATE_DATE, s.STACK_CREATE_UID , sm.PROCESSOR_340B ,sm.STORELINE_FLAG,sm.PROMOTION_FILE_ENV,
sm.LATITUDE,sm.LONGITUDE,sm.IS_SMART_SCAN
From COMMON.DIM_STORE_STACK as s INNER join COMMON.DIM_STORE_MASTER ss
ON ss.NGI_STORE_NUMBER = s.NGI_STORE_NUMBER 
JOIN COMMON.LKP_SALES_STORE_ATTRIBUTE as sm   
ON sm.NGI_STORE_NUMBER = s.NGI_STORE_NUMBER 
WHERE (ss.OPERATING_COMPANY_ID IN 
  (select OPERATING_COMPANY_ID 
  FROM COMMON.SEC_OPERATING_COMPANY 
  where DB_USER_ID = current_user and ACTIVE_FLAG));
create or replace view FCT_340B_CLAIM_EXTRACT_CURRENT(
	CLAIM_EXTRACT_ID,
	CLAIM_EXTRACT_DATE,
	RX_340B_HEADER_ID,
	CLAIM_PROCESSED,
	CLAIM_EXTRACT_SENT,
	CLAIM_FILE_NAME,
	REPORTING_FISCAL_WEEK_ID,
	TRANSACTION_TYPE,
	TRANSACTION_ID,
	STORE_NUMBER,
	RX_NUMBER,
	REFILL_NUMBER,
	FILL_FISCAL_DAY_ID,
	FILL_DATE,
	RECONCILE_FISCAL_DAY_ID,
	RECONCILE_DATE,
	DATE_WRITTEN_FISCAL_DAY_ID,
	DATE_WRITTEN,
	DISPENSED_QUANTITY,
	NDC_NUMBER,
	IS_GENERIC,
	ACQUISITION_COST,
	HHHN_COST,
	SALES_AMOUNT,
	TRANSACTION_FEE,
	COPAY_AMOUNT,
	PD_PATIENT_KEY,
	PATIENT_LAST_NAME,
	PATIENT_FIRST_NAME,
	PATIENT_DOB,
	PADR_KEY,
	DEA_NUMBER,
	NPI_NUMBER,
	PPI_NUMBER,
	DEA_LAST_NAME,
	DEA_FIRST_NAME,
	STREET_ADDRESS,
	CITY,
	STATE_CODE,
	ZIP_CODE,
	PRIMARY_TP_PLAN_NUMBER,
	PRIMARY_TP_BIN_NUMBER,
	PRIMARY_TP_PCN_NUMBER,
	PRIMARY_TP_NAME,
	PRIMARY_TP_GROUP_NUMBER,
	PRIMARY_TP_PAYMENT_AMOUNT,
	IS_SECONDARY_PAYER,
	SECONDARY_TP_PLAN_NUMBER,
	SECONDARY_TP_BIN_NUMBER,
	SECONDARY_TP_PCN_NUMBER,
	SECONDARY_TP_PLAN_NAME,
	SECONDARY_TP_GROUP_NUMBER,
	SECONDARY_TP_PAYMENT_AMOUNT,
	ENTITY_340B_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as

SELECT FCT_340B_CLAIM_EXTRACT.CLAIM_EXTRACT_ID
	,FCT_340B_CLAIM_EXTRACT.CLAIM_EXTRACT_DATE
	,FCT_340B_CLAIM_EXTRACT.RX_340B_HEADER_ID
	,FCT_340B_CLAIM_EXTRACT.CLAIM_PROCESSED
	,FCT_340B_CLAIM_EXTRACT.CLAIM_EXTRACT_SENT
	,FCT_340B_CLAIM_EXTRACT.CLAIM_FILE_NAME
	,FCT_340B_CLAIM_EXTRACT.REPORTING_FISCAL_WEEK_ID
	,FCT_340B_CLAIM_EXTRACT.TRANSACTION_TYPE
	,FCT_340B_CLAIM_EXTRACT.TRANSACTION_ID
	,FCT_340B_CLAIM_EXTRACT.STORE_NUMBER
	,FCT_340B_CLAIM_EXTRACT.RX_NUMBER
	,FCT_340B_CLAIM_EXTRACT.REFILL_NUMBER
	,FCT_340B_CLAIM_EXTRACT.FILL_FISCAL_DAY_ID
	,FCT_340B_CLAIM_EXTRACT.FILL_DATE
	,FCT_340B_CLAIM_EXTRACT.RECONCILE_FISCAL_DAY_ID
	,FCT_340B_CLAIM_EXTRACT.RECONCILE_DATE
	,FCT_340B_CLAIM_EXTRACT.DATE_WRITTEN_FISCAL_DAY_ID
	,FCT_340B_CLAIM_EXTRACT.DATE_WRITTEN
	,FCT_340B_CLAIM_EXTRACT.DISPENSED_QUANTITY
	,FCT_340B_CLAIM_EXTRACT.NDC_NUMBER
	,FCT_340B_CLAIM_EXTRACT.IS_GENERIC
	,FCT_340B_CLAIM_EXTRACT.ACQUISITION_COST
	,FCT_340B_CLAIM_EXTRACT.HHHN_COST
	,FCT_340B_CLAIM_EXTRACT.SALES_AMOUNT
	,FCT_340B_CLAIM_EXTRACT.TRANSACTION_FEE
	,FCT_340B_CLAIM_EXTRACT.COPAY_AMOUNT
	,FCT_340B_CLAIM_EXTRACT.PD_PATIENT_KEY
	,FCT_340B_CLAIM_EXTRACT.PATIENT_LAST_NAME
	,FCT_340B_CLAIM_EXTRACT.PATIENT_FIRST_NAME
	,FCT_340B_CLAIM_EXTRACT.PATIENT_DOB
	,FCT_340B_CLAIM_EXTRACT.PADR_KEY
	,FCT_340B_CLAIM_EXTRACT.DEA_NUMBER
	,FCT_340B_CLAIM_EXTRACT.NPI_NUMBER
	,FCT_340B_CLAIM_EXTRACT.PPI_NUMBER
	,FCT_340B_CLAIM_EXTRACT.DEA_LAST_NAME
	,FCT_340B_CLAIM_EXTRACT.DEA_FIRST_NAME
	,FCT_340B_CLAIM_EXTRACT.STREET_ADDRESS
	,FCT_340B_CLAIM_EXTRACT.CITY
	,FCT_340B_CLAIM_EXTRACT.STATE_CODE
	,FCT_340B_CLAIM_EXTRACT.ZIP_CODE
	,FCT_340B_CLAIM_EXTRACT.PRIMARY_TP_PLAN_NUMBER
	,FCT_340B_CLAIM_EXTRACT.PRIMARY_TP_BIN_NUMBER
	,FCT_340B_CLAIM_EXTRACT.PRIMARY_TP_PCN_NUMBER
	,FCT_340B_CLAIM_EXTRACT.PRIMARY_TP_NAME
	,FCT_340B_CLAIM_EXTRACT.PRIMARY_TP_GROUP_NUMBER
	,FCT_340B_CLAIM_EXTRACT.PRIMARY_TP_PAYMENT_AMOUNT
	,FCT_340B_CLAIM_EXTRACT.IS_SECONDARY_PAYER
	,FCT_340B_CLAIM_EXTRACT.SECONDARY_TP_PLAN_NUMBER
	,FCT_340B_CLAIM_EXTRACT.SECONDARY_TP_BIN_NUMBER
	,FCT_340B_CLAIM_EXTRACT.SECONDARY_TP_PCN_NUMBER
	,FCT_340B_CLAIM_EXTRACT.SECONDARY_TP_PLAN_NAME
	,FCT_340B_CLAIM_EXTRACT.SECONDARY_TP_GROUP_NUMBER
	,FCT_340B_CLAIM_EXTRACT.SECONDARY_TP_PAYMENT_AMOUNT
	,FCT_340B_CLAIM_EXTRACT.ENTITY_340B_ID
	,FCT_340B_CLAIM_EXTRACT.EXTRACT_DATE
	,FCT_340B_CLAIM_EXTRACT.SOURCE_TABLE_NAME
	,FCT_340B_CLAIM_EXTRACT.CREATE_DATE
	,FCT_340B_CLAIM_EXTRACT.MAINT_DATE
	,FCT_340B_CLAIM_EXTRACT.CREATE_UID
	,FCT_340B_CLAIM_EXTRACT.MAINT_UID
	,FCT_340B_CLAIM_EXTRACT.DELETE_FLAG
	,FCT_340B_CLAIM_EXTRACT.DELETE_DATE
	,FCT_340B_CLAIM_EXTRACT.DELETE_UID
FROM EBIDW.RX.FCT_340B_CLAIM_EXTRACT
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_340B_CLAIM_EXTRACT.STORE_NUMBER
WHERE (FCT_340B_CLAIM_EXTRACT.DELETE_FLAG = 'f'::BOOLEAN) ;
create or replace view FCT_340B_DETAIL_CURRENT(
	RX_340B_DETAIL_ID,
	RX_340B_HEADER_ID,
	REPORTING_WEEK_END_FISCAL_DAY_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	RX_NUMBER,
	REFILL_NUMBER,
	RX_FILL_SEQUENCE_NUMBER,
	ADJUDICATION_GROUP_NUMBER,
	BILLING_ORDER,
	RESPONSIBLE_PARTY_ID,
	RESPONSIBLE_PARTY_KEY,
	REFILLS_ALLOWED,
	FILL_QUANTITY,
	WRITTEN_QUANTITY,
	DISPENSED_QUANTITY,
	DAYS_SUPPLY,
	FILL_COUNT,
	PARTIAL_FILL_INDICATOR,
	IS_BAR,
	BILLING_INDICATOR,
	IS_COB,
	IS_PRIMARY_PAYER,
	IS_LAST_COB_PAYER,
	ACTUAL_PAID_AMOUNT,
	UDSA_COST,
	FINANCIAL_TRANSACTION_NUMBER,
	BIN_NUMBER,
	PROCESSOR_CONTROL_NUMBER,
	FILL_STATUS_ID,
	FILL_STATUS_KEY,
	FILL_CATEGORY_ID,
	FILL_CATEGORY_KEY,
	BILLING_STATUS_ID,
	BILLING_STATUS_KEY,
	TP_PLAN_ID,
	TP_PLAN_KEY,
	TP_PROCESSOR_ID,
	TP_PROCESSOR_KEY,
	TPD_KEY,
	TP_GROUP_NUMBER,
	DAW_CODE_ID,
	DAW_CODE_KEY,
	TRIPLICATE_SERIAL_NUMBER,
	SIG,
	IS_340B,
	FS_NUMBER,
	PRESCRIBER_ID,
	RX_PRESCRIBER_ID,
	PADR_KEY,
	DISPENSED_PRODUCT_ID,
	DISPENSED_RX_PRODUCT_ID,
	DISPENSED_PRODUCT_KEY,
	DISPENSED_DRUG_ID,
	DISPENSED_RX_DRUG_ID,
	DISPENSED_DRUG_KEY,
	DISPENSED_FISCAL_DAY_ID,
	DISPENSED_FISCAL_DATE,
	WRITTEN_FISCAL_DAY_ID,
	WRITTEN_FISCAL_DATE,
	ADJUDICATION_FISCAL_DAY_ID,
	ADJUDICATION_FISCAL_DATE,
	CANCEL_FISCAL_DAY_ID,
	CANCEL_FISCAL_DATE,
	DATE_OF_SERVICE_FISCAL_DAY_ID,
	DATE_OF_SERVICE_FISCAL_DATE,
	ORDER_FISCAL_DAY_ID,
	ORDER_FISCAL_DATE,
	PRESCRIBED_FISCAL_DAY_ID,
	PRESCRIBED_FISCAL_DATE,
	READY_FISCAL_DAY_ID,
	READY_FISCAL_DATE,
	RTP_FISCAL_DAY_ID,
	RTP_FISCAL_DATE,
	SOLD_FISCAL_DAY_ID,
	SOLD_FISCAL_DATE,
	DISPENSE_SENT,
	DISPENSE_SENT_DATE,
	HHHN_PENDING_STATUS,
	HHHN_DECISION,
	HHHN_DECISION_DATE,
	DECISION_FISCAL_DAY_ID,
	ENTITY_340B_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as 
SELECT FCT_340B_DETAIL.RX_340B_DETAIL_ID
    ,FCT_340B_DETAIL.RX_340B_HEADER_ID
    ,CASE 
        WHEN (SSA.PROCESSOR_340B = 'HHHN')
            THEN CASE 
                    WHEN (TO_DATE(FCT_340B_DETAIL.HHHN_DECISION_DATE) < '2017-05-02'::DATE)
                        THEN C.FISCAL_WEEK_END_DAY_ID
                    ELSE CMINUS1.FISCAL_WEEK_END_DAY_ID
                    END
        WHEN (SSA.PROCESSOR_340B = 'WMY')
            THEN FCT_340B_DETAIL.REPORTING_WEEK_END_FISCAL_DAY_ID
        ELSE NULL
        END AS REPORTING_WEEK_END_FISCAL_DAY_ID
    ,FCT_340B_DETAIL.STORE_ID
    ,FCT_340B_DETAIL.SALES_STORE_ID
    ,FCT_340B_DETAIL.STORE_NUMBER
    ,FCT_340B_DETAIL.RX_NUMBER
    ,FCT_340B_DETAIL.REFILL_NUMBER
    ,FCT_340B_DETAIL.RX_FILL_SEQUENCE_NUMBER
    ,FCT_340B_DETAIL.ADJUDICATION_GROUP_NUMBER
    ,FCT_340B_DETAIL.BILLING_ORDER
    ,FCT_340B_DETAIL.RESPONSIBLE_PARTY_ID
    ,FCT_340B_DETAIL.RESPONSIBLE_PARTY_KEY
    ,FCT_340B_DETAIL.REFILLS_ALLOWED
    ,(FCT_340B_DETAIL.FILL_QUANTITY)::NUMBER(12, 4) AS FILL_QUANTITY
    ,FCT_340B_DETAIL.WRITTEN_QUANTITY
    ,(FCT_340B_DETAIL.DISPENSED_QUANTITY)::NUMBER(12, 4) AS DISPENSED_QUANTITY
    ,FCT_340B_DETAIL.DAYS_SUPPLY
    ,(TO_NUMBER(FCT_340B_DETAIL.FILL_COUNT))::NUMBER(11, 0) AS FILL_COUNT
    ,FCT_340B_DETAIL.PARTIAL_FILL_INDICATOR
    ,FCT_340B_DETAIL.IS_BAR
    ,FCT_340B_DETAIL.BILLING_INDICATOR
    ,FCT_340B_DETAIL.IS_COB
    ,FCT_340B_DETAIL.IS_PRIMARY_PAYER
    ,FCT_340B_DETAIL.IS_LAST_COB_PAYER
    ,(FCT_340B_DETAIL.ACTUAL_PAID_AMOUNT)::NUMBER(19, 6) AS ACTUAL_PAID_AMOUNT
    ,(FCT_340B_DETAIL.UDSA_COST)::NUMBER(19, 6) AS UDSA_COST
    ,FCT_340B_DETAIL.FINANCIAL_TRANSACTION_NUMBER
    ,FCT_340B_DETAIL.BIN_NUMBER
    ,FCT_340B_DETAIL.PROCESSOR_CONTROL_NUMBER
    ,FCT_340B_DETAIL.FILL_STATUS_ID
    ,FCT_340B_DETAIL.FILL_STATUS_KEY
    ,FCT_340B_DETAIL.FILL_CATEGORY_ID
    ,FCT_340B_DETAIL.FILL_CATEGORY_KEY
    ,FCT_340B_DETAIL.BILLING_STATUS_ID
    ,FCT_340B_DETAIL.BILLING_STATUS_KEY
    ,FCT_340B_DETAIL.TP_PLAN_ID
    ,FCT_340B_DETAIL.TP_PLAN_KEY
    ,FCT_340B_DETAIL.TP_PROCESSOR_ID
    ,FCT_340B_DETAIL.TP_PROCESSOR_KEY
    ,FCT_340B_DETAIL.TPD_KEY
    ,FCT_340B_DETAIL.TP_GROUP_NUMBER
    ,FCT_340B_DETAIL.DAW_CODE_ID
    ,FCT_340B_DETAIL.DAW_CODE_KEY
    ,FCT_340B_DETAIL.TRIPLICATE_SERIAL_NUMBER
    ,FCT_340B_DETAIL.SIG
    ,CASE 
        WHEN (SSA.PROCESSOR_340B = 'HHHN')
            THEN FCT_340B_DETAIL.IS_340B
        WHEN (SSA.PROCESSOR_340B = 'WMY')
            THEN CASE 
                    WHEN (FCT_340B_HEADER.REPORTING_WEEK_END_FISCAL_DAY_ID >= 20134230)
                        THEN FCT_340B_DETAIL.IS_340B
                    ELSE CASE 
                            WHEN (
                                    (FCT_340B_HEADER.IS_340B_ELIGIBLE = 't'::BOOLEAN)
                                    AND (FCT_340B_HEADER.IS_CANCELED = 'f'::BOOLEAN)
                                    )
                                THEN FCT_340B_HEADER.IS_340B_ELIGIBLE
                            ELSE 'f'::BOOLEAN
                            END
                    END
        ELSE NULL::BOOLEAN
        END AS IS_340B
    ,FCT_340B_DETAIL.FS_NUMBER
    ,FCT_340B_DETAIL.PRESCRIBER_ID
    ,FCT_340B_DETAIL.RX_PRESCRIBER_ID
    ,FCT_340B_DETAIL.PADR_KEY
    ,FCT_340B_DETAIL.DISPENSED_PRODUCT_ID
    ,FCT_340B_DETAIL.DISPENSED_RX_PRODUCT_ID
    ,FCT_340B_DETAIL.DISPENSED_PRODUCT_KEY
    ,FCT_340B_DETAIL.DISPENSED_DRUG_ID
    ,FCT_340B_DETAIL.DISPENSED_RX_DRUG_ID
    ,FCT_340B_DETAIL.DISPENSED_DRUG_KEY
    ,FCT_340B_DETAIL.DISPENSED_FISCAL_DAY_ID
    ,FCT_340B_DETAIL.DISPENSED_FISCAL_DATE
    ,FCT_340B_DETAIL.WRITTEN_FISCAL_DAY_ID
    ,FCT_340B_DETAIL.WRITTEN_FISCAL_DATE
    ,FCT_340B_DETAIL.ADJUDICATION_FISCAL_DAY_ID
    ,FCT_340B_DETAIL.ADJUDICATION_FISCAL_DATE
    ,FCT_340B_DETAIL.CANCEL_FISCAL_DAY_ID
    ,FCT_340B_DETAIL.CANCEL_FISCAL_DATE
    ,FCT_340B_DETAIL.DATE_OF_SERVICE_FISCAL_DAY_ID
    ,FCT_340B_DETAIL.DATE_OF_SERVICE_FISCAL_DATE
    ,FCT_340B_DETAIL.ORDER_FISCAL_DAY_ID
    ,FCT_340B_DETAIL.ORDER_FISCAL_DATE
    ,FCT_340B_DETAIL.PRESCRIBED_FISCAL_DAY_ID
    ,FCT_340B_DETAIL.PRESCRIBED_FISCAL_DATE
    ,FCT_340B_DETAIL.READY_FISCAL_DAY_ID
    ,FCT_340B_DETAIL.READY_FISCAL_DATE
    ,FCT_340B_DETAIL.RTP_FISCAL_DAY_ID
    ,FCT_340B_DETAIL.RTP_FISCAL_DATE
    ,FCT_340B_DETAIL.SOLD_FISCAL_DAY_ID
    ,FCT_340B_DETAIL.SOLD_FISCAL_DATE
    ,FCT_340B_DETAIL.DISPENSE_SENT
    ,FCT_340B_DETAIL.DISPENSE_SENT_DATE
    ,FCT_340B_DETAIL.HHHN_PENDING_STATUS
    ,FCT_340B_DETAIL.HHHN_DECISION
    ,CASE 
        WHEN (SSA.PROCESSOR_340B = 'HHHN')
            THEN CASE 
                    WHEN (TO_DATE(FCT_340B_DETAIL.HHHN_DECISION_DATE) < '2017-05-02'::DATE)
                        THEN FCT_340B_DETAIL.HHHN_DECISION_DATE
                    ELSE ((TO_DATE(FCT_340B_DETAIL.HHHN_DECISION_DATE) - 1))
                    END
        WHEN (SSA.PROCESSOR_340B = 'WMY')
            THEN FCT_340B_DETAIL.ADJUDICATION_FISCAL_DATE
        ELSE NULL
        END AS HHHN_DECISION_DATE
    ,CASE 
        WHEN (SSA.PROCESSOR_340B = 'HHHN')
            THEN CASE 
                    WHEN (TO_DATE(FCT_340B_DETAIL.HHHN_DECISION_DATE) < '2017-05-02'::DATE)
                        THEN C.FISCAL_DAY_ID
                    ELSE CMINUS1.FISCAL_DAY_ID
                    END
        WHEN (SSA.PROCESSOR_340B = 'WMY')
            THEN FCT_340B_DETAIL.ADJUDICATION_FISCAL_DAY_ID
        ELSE NULL
        END AS DECISION_FISCAL_DAY_ID
    ,FCT_340B_DETAIL.ENTITY_340B_ID
    ,FCT_340B_DETAIL.EXTRACT_DATE
    ,FCT_340B_DETAIL.SOURCE_TABLE_NAME
    ,FCT_340B_DETAIL.CREATE_DATE
    ,FCT_340B_DETAIL.MAINT_DATE
    ,FCT_340B_DETAIL.CREATE_UID
    ,FCT_340B_DETAIL.MAINT_UID
    ,FCT_340B_DETAIL.DELETE_FLAG
    ,FCT_340B_DETAIL.DELETE_DATE
    ,FCT_340B_DETAIL.DELETE_UID FROM (

        (
            (
                (
                    EBIDW.RX.FCT_340B_DETAIL INNER JOIN EBIDW.RX.FCT_340B_HEADER ON ((FCT_340B_DETAIL.RX_340B_HEADER_ID = FCT_340B_HEADER.RX_340B_HEADER_ID))
                    ) INNER JOIN REPORTING.DIM_STORE_STACK_CURRENT SSA ON (SSA.SALES_STORE_NUMBER = FCT_340B_DETAIL.STORE_NUMBER)
                ) INNER JOIN EBIDW.COMMON.DIM_CALENDAR_MASTER C ON (
                    (
                        (
                            TO_DATE(CASE 
                                    WHEN (SSA.PROCESSOR_340B = 'HHHN')
                                        THEN FCT_340B_DETAIL.HHHN_DECISION_DATE
                                    WHEN (SSA.PROCESSOR_340B = 'WMY')
                                        THEN FCT_340B_DETAIL.ADJUDICATION_FISCAL_DATE
                                    ELSE NULL
                                    END)
                            ) = C.CALENDAR_DATE
                        )
                    )
            ) INNER JOIN EBIDW.COMMON.DIM_CALENDAR_MASTER CMINUS1 ON (
                (
                    (
                        TO_DATE(CASE 
                                WHEN (SSA.PROCESSOR_340B = 'HHHN')
                                    THEN ((TO_DATE(FCT_340B_DETAIL.HHHN_DECISION_DATE) - 1))
                                WHEN (SSA.PROCESSOR_340B = 'WMY')
                                    THEN FCT_340B_DETAIL.ADJUDICATION_FISCAL_DATE
                                ELSE NULL
                                END)
                        ) = CMINUS1.CALENDAR_DATE
                    )
                )
        ) INNER JOIN EBIDW.COMMON.DIM_CALENDAR_MASTER REPORTING_WEEK_FISCAL_CALENDAR ON ((FCT_340B_DETAIL.REPORTING_WEEK_END_FISCAL_DAY_ID = REPORTING_WEEK_FISCAL_CALENDAR.FISCAL_DAY_ID))
   
WHERE (FCT_340B_DETAIL.DELETE_FLAG = 'f'::BOOLEAN)

UNION ALL

(
    SELECT FCT_340B_DETAIL.RX_340B_DETAIL_ID
        ,FCT_340B_DETAIL.RX_340B_HEADER_ID
        ,CASE 
            WHEN (TO_DATE(FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_DATE) < '2017-05-02'::DATE)
                THEN C.FISCAL_WEEK_END_DAY_ID
            ELSE CMINUS1.FISCAL_WEEK_END_DAY_ID
            END AS REPORTING_WEEK_END_FISCAL_DAY_ID
        ,FCT_340B_DETAIL.STORE_ID
        ,FCT_340B_DETAIL.SALES_STORE_ID
        ,FCT_340B_DETAIL.STORE_NUMBER
        ,FCT_340B_DETAIL.RX_NUMBER
        ,FCT_340B_DETAIL.REFILL_NUMBER
        ,FCT_340B_DETAIL.RX_FILL_SEQUENCE_NUMBER
        ,FCT_340B_DETAIL.ADJUDICATION_GROUP_NUMBER
        ,FCT_340B_DETAIL.BILLING_ORDER
        ,FCT_340B_DETAIL.RESPONSIBLE_PARTY_ID
        ,FCT_340B_DETAIL.RESPONSIBLE_PARTY_KEY
        ,FCT_340B_DETAIL.REFILLS_ALLOWED
        ,((FCT_340B_DETAIL.FILL_QUANTITY * -1))::NUMBER(12, 4) AS FILL_QUANTITY
        ,FCT_340B_DETAIL.WRITTEN_QUANTITY
        ,((FCT_340B_DETAIL.DISPENSED_QUANTITY * -1))::NUMBER(12, 4) AS DISPENSED_QUANTITY
        ,FCT_340B_DETAIL.DAYS_SUPPLY
        ,((TO_NUMBER(FCT_340B_DETAIL.FILL_COUNT) * -1))::NUMBER(11, 0) AS FILL_COUNT
        ,FCT_340B_DETAIL.PARTIAL_FILL_INDICATOR
        ,FCT_340B_DETAIL.IS_BAR
        ,FCT_340B_DETAIL.BILLING_INDICATOR
        ,FCT_340B_DETAIL.IS_COB
        ,FCT_340B_DETAIL.IS_PRIMARY_PAYER
        ,FCT_340B_DETAIL.IS_LAST_COB_PAYER
        ,((FCT_340B_DETAIL.ACTUAL_PAID_AMOUNT * -1))::NUMBER(19, 6) AS ACTUAL_PAID_AMOUNT
        ,((FCT_340B_DETAIL.UDSA_COST * -1))::NUMBER(19, 6) AS UDSA_COST
        ,FCT_340B_DETAIL.FINANCIAL_TRANSACTION_NUMBER
        ,FCT_340B_DETAIL.BIN_NUMBER
        ,FCT_340B_DETAIL.PROCESSOR_CONTROL_NUMBER
        ,FCT_340B_DETAIL.FILL_STATUS_ID
        ,FCT_340B_DETAIL.FILL_STATUS_KEY
        ,FCT_340B_DETAIL.FILL_CATEGORY_ID
        ,FCT_340B_DETAIL.FILL_CATEGORY_KEY
        ,FCT_340B_DETAIL.BILLING_STATUS_ID
        ,FCT_340B_DETAIL.BILLING_STATUS_KEY
        ,FCT_340B_DETAIL.TP_PLAN_ID
        ,FCT_340B_DETAIL.TP_PLAN_KEY
        ,FCT_340B_DETAIL.TP_PROCESSOR_ID
        ,FCT_340B_DETAIL.TP_PROCESSOR_KEY
        ,FCT_340B_DETAIL.TPD_KEY
        ,FCT_340B_DETAIL.TP_GROUP_NUMBER
        ,FCT_340B_DETAIL.DAW_CODE_ID
        ,FCT_340B_DETAIL.DAW_CODE_KEY
        ,FCT_340B_DETAIL.TRIPLICATE_SERIAL_NUMBER
        ,FCT_340B_DETAIL.SIG
        ,FCT_340B_DETAIL.IS_340B
        ,FCT_340B_DETAIL.FS_NUMBER
        ,FCT_340B_DETAIL.PRESCRIBER_ID
        ,FCT_340B_DETAIL.RX_PRESCRIBER_ID
        ,FCT_340B_DETAIL.PADR_KEY
        ,FCT_340B_DETAIL.DISPENSED_PRODUCT_ID
        ,FCT_340B_DETAIL.DISPENSED_RX_PRODUCT_ID
        ,FCT_340B_DETAIL.DISPENSED_PRODUCT_KEY
        ,FCT_340B_DETAIL.DISPENSED_DRUG_ID
        ,FCT_340B_DETAIL.DISPENSED_RX_DRUG_ID
        ,FCT_340B_DETAIL.DISPENSED_DRUG_KEY
        ,FCT_340B_DETAIL.DISPENSED_FISCAL_DAY_ID
        ,FCT_340B_DETAIL.DISPENSED_FISCAL_DATE
        ,FCT_340B_DETAIL.WRITTEN_FISCAL_DAY_ID
        ,FCT_340B_DETAIL.WRITTEN_FISCAL_DATE
        ,FCT_340B_DETAIL.ADJUDICATION_FISCAL_DAY_ID
        ,FCT_340B_DETAIL.ADJUDICATION_FISCAL_DATE
        ,FCT_340B_DETAIL.CANCEL_FISCAL_DAY_ID
        ,FCT_340B_DETAIL.CANCEL_FISCAL_DATE
        ,FCT_340B_DETAIL.DATE_OF_SERVICE_FISCAL_DAY_ID
        ,FCT_340B_DETAIL.DATE_OF_SERVICE_FISCAL_DATE
        ,FCT_340B_DETAIL.ORDER_FISCAL_DAY_ID
        ,FCT_340B_DETAIL.ORDER_FISCAL_DATE
        ,FCT_340B_DETAIL.PRESCRIBED_FISCAL_DAY_ID
        ,FCT_340B_DETAIL.PRESCRIBED_FISCAL_DATE
        ,FCT_340B_DETAIL.READY_FISCAL_DAY_ID
        ,FCT_340B_DETAIL.READY_FISCAL_DATE
        ,FCT_340B_DETAIL.RTP_FISCAL_DAY_ID
        ,FCT_340B_DETAIL.RTP_FISCAL_DATE
        ,FCT_340B_DETAIL.SOLD_FISCAL_DAY_ID
        ,FCT_340B_DETAIL.SOLD_FISCAL_DATE
        ,FCT_340B_DETAIL.DISPENSE_SENT
        ,FCT_340B_DETAIL.DISPENSE_SENT_DATE
        ,FCT_340B_DETAIL.HHHN_PENDING_STATUS
        ,(FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE)::VARCHAR(3) AS HHHN_DECISION
        ,CASE 
            WHEN (TO_DATE(FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_DATE) < '2017-05-02'::DATE)
                THEN FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_DATE
            ELSE ((TO_DATE(FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_DATE) - 1))
            END AS HHHN_DECISION_DATE
        ,CASE 
            WHEN (TO_DATE(FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_DATE) < '2017-05-02'::DATE)
                THEN C.FISCAL_DAY_ID
            ELSE CMINUS1.FISCAL_DAY_ID
            END AS DECISION_FISCAL_DAY_ID
      ,FCT_340B_DETAIL.ENTITY_340B_ID
        ,FCT_340B_DETAIL.EXTRACT_DATE
        ,FCT_340B_DETAIL.SOURCE_TABLE_NAME
        ,FCT_340B_DETAIL.CREATE_DATE
        ,FCT_340B_DETAIL.MAINT_DATE
        ,FCT_340B_DETAIL.CREATE_UID
        ,FCT_340B_DETAIL.MAINT_UID
        ,FCT_340B_DETAIL.DELETE_FLAG
        ,FCT_340B_DETAIL.DELETE_DATE
        ,FCT_340B_DETAIL.DELETE_UID
    FROM (
        
            (
                (
                    EBIDW.RX.FCT_340B_DETAIL INNER JOIN (
                        SELECT FCT_340B_HHHN_DECISION_TRANSACTIONS.RX_340B_HEADER_ID
                            ,FCT_340B_HHHN_DECISION_TRANSACTIONS.RX_340B_DETAIL_ID
                            ,FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE
                            ,FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_DATE
                        FROM EBIDW.RX.FCT_340B_HHHN_DECISION_TRANSACTIONS
                        GROUP BY FCT_340B_HHHN_DECISION_TRANSACTIONS.RX_340B_HEADER_ID
                            ,FCT_340B_HHHN_DECISION_TRANSACTIONS.RX_340B_DETAIL_ID
                            ,FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE
                            ,FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_DATE
                        ) FCT_340B_HHHN_DECISION_TRANSACTIONS ON (
                            (
                                (
                                    (FCT_340B_DETAIL.RX_340B_DETAIL_ID = FCT_340B_HHHN_DECISION_TRANSACTIONS.RX_340B_DETAIL_ID)
                                    AND (FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'R')
                                    )
                                AND (FCT_340B_DETAIL.HHHN_DECISION = 'A')
                                )
                            )
                    ) INNER JOIN REPORTING.DIM_STORE_STACK_CURRENT SSA ON (SSA.SALES_STORE_NUMBER = FCT_340B_DETAIL.STORE_NUMBER)
                ) INNER JOIN EBIDW.COMMON.DIM_CALENDAR_MASTER C ON (((TO_DATE(FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_DATE)) = C.CALENDAR_DATE))
            ) INNER JOIN EBIDW.COMMON.DIM_CALENDAR_MASTER CMINUS1 ON ((((TO_DATE(FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_DATE) - 1)) = CMINUS1.CALENDAR_DATE))
       
    WHERE (
            (FCT_340B_DETAIL.DELETE_FLAG = 'f'::BOOLEAN)
            AND (SSA.PROCESSOR_340B = 'HHHN')
            )

);
create or replace view FCT_340B_HEADER_CURRENT(
	RX_340B_HEADER_ID,
	REPORTING_WEEK_END_FISCAL_DAY_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	RX_NUMBER,
	REFILL_NUMBER,
	ADJUDICATION_FISCAL_DAY_ID,
	ADJUDICATION_DATE,
	ORDER_DATE_FISCAL_DAY_ID,
	ORDER_DATE,
	DATE_WRITTEN_FISCAL_DAY_ID,
	DATE_WRITTEN,
	IS_COB,
	IS_PARTIAL_FILL,
	IS_PF_COMPLETED,
	TP_RECORDS_EXPECTED,
	TP_RECORDS_RECEIVED,
	IS_TP_RECONCILED,
	TP_RECONCILED_FISCAL_DAY_ID,
	TP_RECONCILED_DATE,
	TOTAL_TP_BILLED_AMOUNT,
	TOTAL_TP_BILLED_AMOUNT_DECISION,
	POS_RECORDS_EXPECTED,
	POS_RECORDS_RECEIVED,
	IS_POS_RECONCILED,
	POS_RECONCILED_FISCAL_DAY_ID,
	POS_RECONCILED_DATE,
	COPAY_AMOUNT,
	COPAY_AMOUNT_DECISION,
	IS_CLAIM_RECONCILED,
	CLAIM_RECONCILED_FISCAL_DAY_ID,
	CLAIM_RECONCILED_DATE,
	DISPENSED_QUANTITY,
	DISPENSED_QUANTITY_DECISION,
	ACQUISITION_COST,
	ACQUISITION_COST_DECISION,
	IS_INVENTORY_DECREMENTED,
	DRUG_ID,
	RX_DRUG_ID,
	DISPENSED_DRUG_KEY,
	PRODUCT_ID,
	RX_PRODUCT_ID,
	PRD_PRODUCT_KEY,
	IS_CANCELED,
	CANCELED_FISCAL_DAY_ID,
	CANCELED_DATE,
	CANCELED_QUANTITY,
	CANCELED_QUANTITY_DECISION,
	IS_CANCELED_INVENTORY_INCREMENTED,
	CANCELED_REASON_ID,
	CANCELED_REASON_CODE,
	IS_340B_ELIGIBLE,
	PD_PATIENT_KEY,
	PRESCRIBER_ID,
	RX_PRESCRIBER_ID,
	PADR_KEY,
	DISPENSE_SENT,
	DISPENSE_SENT_DATE,
	HHHN_PENDING_STATUS,
	HHHN_DECISION,
	HHHN_LATEST_DECISION,
	HHHN_DECISION_DATE,
	DECISION_FISCAL_DAY_ID,
	DECISION_HEADER_ROW,
	ENTITY_340B_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as 
	SELECT FCT_340B_HEADER.RX_340B_HEADER_ID
	,HHHN_DECISION_TRANSACTIONS.REPORTING_WEEK_END_FISCAL_DAY_ID
	,FCT_340B_HEADER.STORE_ID
	,FCT_340B_HEADER.SALES_STORE_ID
	,FCT_340B_HEADER.STORE_NUMBER
	,FCT_340B_HEADER.RX_NUMBER
	,FCT_340B_HEADER.REFILL_NUMBER
	,FCT_340B_HEADER.ADJUDICATION_FISCAL_DAY_ID
	,FCT_340B_HEADER.ADJUDICATION_DATE
	,FCT_340B_HEADER.ORDER_DATE_FISCAL_DAY_ID
	,FCT_340B_HEADER.ORDER_DATE
	,FCT_340B_HEADER.DATE_WRITTEN_FISCAL_DAY_ID
	,FCT_340B_HEADER.DATE_WRITTEN
	,FCT_340B_HEADER.IS_COB
	,FCT_340B_HEADER.IS_PARTIAL_FILL
	,FCT_340B_HEADER.IS_PF_COMPLETED
	,FCT_340B_HEADER.TP_RECORDS_EXPECTED
	,FCT_340B_HEADER.TP_RECORDS_RECEIVED
	,FCT_340B_HEADER.IS_TP_RECONCILED
	,FCT_340B_HEADER.TP_RECONCILED_FISCAL_DAY_ID
	,FCT_340B_HEADER.TP_RECONCILED_DATE
	,((FCT_340B_HEADER.TOTAL_TP_BILLED_AMOUNT * HHHN_DECISION_TRANSACTIONS.DIRECTION_MULTIPLIER))::NUMBER(12, 2) AS TOTAL_TP_BILLED_AMOUNT
	,FCT_340B_HEADER.TOTAL_TP_BILLED_AMOUNT AS TOTAL_TP_BILLED_AMOUNT_DECISION
	,FCT_340B_HEADER.POS_RECORDS_EXPECTED
	,FCT_340B_HEADER.POS_RECORDS_RECEIVED
	,FCT_340B_HEADER.IS_POS_RECONCILED
	,FCT_340B_HEADER.POS_RECONCILED_FISCAL_DAY_ID
	,FCT_340B_HEADER.POS_RECONCILED_DATE
	,((FCT_340B_HEADER.COPAY_AMOUNT * HHHN_DECISION_TRANSACTIONS.DIRECTION_MULTIPLIER))::NUMBER(12, 2) AS COPAY_AMOUNT
	,FCT_340B_HEADER.COPAY_AMOUNT AS COPAY_AMOUNT_DECISION
	,FCT_340B_HEADER.IS_CLAIM_RECONCILED
	,FCT_340B_HEADER.CLAIM_RECONCILED_FISCAL_DAY_ID
	,FCT_340B_HEADER.CLAIM_RECONCILED_DATE
	,((FCT_340B_HEADER.DISPENSED_QUANTITY * HHHN_DECISION_TRANSACTIONS.DIRECTION_MULTIPLIER))::NUMBER(12, 4) AS DISPENSED_QUANTITY
	,FCT_340B_HEADER.DISPENSED_QUANTITY AS DISPENSED_QUANTITY_DECISION
	,((FCT_340B_HEADER.ACQUISITION_COST * HHHN_DECISION_TRANSACTIONS.DIRECTION_MULTIPLIER))::NUMBER(12, 4) AS ACQUISITION_COST
	,FCT_340B_HEADER.ACQUISITION_COST AS ACQUISITION_COST_DECISION
	,FCT_340B_HEADER.IS_INVENTORY_DECREMENTED
	,FCT_340B_HEADER.DRUG_ID
	,FCT_340B_HEADER.RX_DRUG_ID
	,FCT_340B_HEADER.DISPENSED_DRUG_KEY
	,FCT_340B_HEADER.PRODUCT_ID
	,FCT_340B_HEADER.RX_PRODUCT_ID
	,FCT_340B_HEADER.PRD_PRODUCT_KEY
	,FCT_340B_HEADER.IS_CANCELED
	,FCT_340B_HEADER.CANCELED_FISCAL_DAY_ID
	,FCT_340B_HEADER.CANCELED_DATE
	,((FCT_340B_HEADER.CANCELED_QUANTITY * HHHN_DECISION_TRANSACTIONS.DIRECTION_MULTIPLIER))::NUMBER(12, 4) AS CANCELED_QUANTITY
	,FCT_340B_HEADER.CANCELED_QUANTITY AS CANCELED_QUANTITY_DECISION
	,FCT_340B_HEADER.IS_CANCELED_INVENTORY_INCREMENTED
	,FCT_340B_HEADER.CANCELED_REASON_ID
	,FCT_340B_HEADER.CANCELED_REASON_CODE
	,CASE 
		WHEN (
				(
					(HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'D')
					OR (HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'R')
					)
				OR (HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'C')
				)
			THEN 'f'::BOOLEAN
		WHEN (HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'A')
			THEN 't'::BOOLEAN
		ELSE FCT_340B_HEADER.IS_340B_ELIGIBLE
		END AS IS_340B_ELIGIBLE
	,FCT_340B_HEADER.PD_PATIENT_KEY
	,FCT_340B_HEADER.PRESCRIBER_ID
	,FCT_340B_HEADER.RX_PRESCRIBER_ID
	,FCT_340B_HEADER.PADR_KEY
	,FCT_340B_HEADER.DISPENSE_SENT
	,FCT_340B_HEADER.DISPENSE_SENT_DATE
	,FCT_340B_HEADER.HHHN_PENDING_STATUS
	,HHHN_DECISION_TRANSACTIONS.DECISION_CODE AS HHHN_DECISION
	,HHHN_DECISION_TRANSACTIONS.LATEST_DECISION AS HHHN_LATEST_DECISION
	,HHHN_DECISION_TRANSACTIONS.DECISION_DATE AS HHHN_DECISION_DATE
	,HHHN_DECISION_TRANSACTIONS.DECISION_FISCAL_DAY_ID
	,HHHN_DECISION_TRANSACTIONS.HEADER_ROW AS DECISION_HEADER_ROW
	,FCT_340B_HEADER.ENTITY_340B_ID
	,FCT_340B_HEADER.EXTRACT_DATE
	,FCT_340B_HEADER.SOURCE_TABLE_NAME
	,FCT_340B_HEADER.CREATE_DATE
	,FCT_340B_HEADER.MAINT_DATE
	,FCT_340B_HEADER.CREATE_UID
	,FCT_340B_HEADER.MAINT_UID
	,FCT_340B_HEADER.DELETE_FLAG
	,FCT_340B_HEADER.DELETE_DATE
	,FCT_340B_HEADER.DELETE_UID FROM (
	
		EBIDW.RX.FCT_340B_HEADER INNER JOIN REPORTING.DIM_STORE_STACK_CURRENT SSA ON (SSA.SALES_STORE_NUMBER) = FCT_340B_HEADER.STORE_NUMBER
		) INNER JOIN (
		SELECT HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID AS RX_340B_HEADER_ID
			,HHHN_LATEST_CALCULATED_DECISION.DECISION_CODE AS DECISION_CODE
			,HHHN_LATEST_CALCULATED_DECISION.DECISION_DATE AS DECISION_DATE
			,HHHN_LATEST_CALCULATED_DECISION.FISCAL_DAY_ID AS DECISION_FISCAL_DAY_ID
			,HHHN_LATEST_CALCULATED_DECISION.REPORTING_WEEK_END_FISCAL_DAY_ID AS REPORTING_WEEK_END_FISCAL_DAY_ID
			,HHHN_LATEST_CALCULATED_DECISION.DIRECTION_MULTIPLIER AS DIRECTION_MULTIPLIER
			,HHHN_LATEST_CALCULATED_DECISION.LATEST_DECISION AS LATEST_DECISION
			,ROW_NUMBER() OVER (
				PARTITION BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID ORDER BY HHHN_LATEST_CALCULATED_DECISION.DECISION_DATE DESC
					,HHHN_LATEST_CALCULATED_DECISION.DECISION_CODE
				) AS HEADER_ROW
		FROM (
			SELECT HHHN_DECISION_COUNTS.RX_340B_HEADER_ID AS RX_340B_HEADER_ID
				,HHHN_DECISION_COUNTS.DECISION_CODE AS DECISION_CODE
				,HHHN_DECISION_COUNTS.DECISION_DATE AS DECISION_DATE
				,HHHN_DECISION_COUNTS.FISCAL_DAY_ID AS FISCAL_DAY_ID
				,HHHN_DECISION_COUNTS.REPORTING_WEEK_END_FISCAL_DAY_ID AS REPORTING_WEEK_END_FISCAL_DAY_ID
				,CASE 
					WHEN (HHHN_DECISION_COUNTS.DECISION_CODE = 'A')
						THEN 1
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = HHHN_DECISION_COUNTS.TOTAL_PENDING)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'P')
							)
						THEN 1
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS > HHHN_DECISION_COUNTS.TOTAL_PENDING)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'P')
							)
						THEN 0
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = HHHN_DECISION_COUNTS.TOTAL_DECLINES)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'D')
							)
						THEN 0
					WHEN (
							(
								(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = ((HHHN_DECISION_COUNTS.TOTAL_ACCEPTS + HHHN_DECISION_COUNTS.TOTAL_DECLINES) + HHHN_DECISION_COUNTS.TOTAL_PENDING))
								AND (HHHN_DECISION_COUNTS.TOTAL_ACCEPTS > 0)
								)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'D')
							)
						THEN 0
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = HHHN_DECISION_COUNTS.TOTAL_CANCELS)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'C')
							)
						THEN -1
					WHEN (
							(
								(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = ((HHHN_DECISION_COUNTS.TOTAL_ACCEPTS + HHHN_DECISION_COUNTS.TOTAL_CANCELS) + HHHN_DECISION_COUNTS.TOTAL_PENDING))
								AND (HHHN_DECISION_COUNTS.TOTAL_ACCEPTS > 0)
								)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'C')
							)
						THEN -1
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = HHHN_DECISION_COUNTS.TOTAL_REVERSES)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'R')
							)
						THEN -1
					WHEN (
							(
								(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = ((HHHN_DECISION_COUNTS.TOTAL_ACCEPTS + HHHN_DECISION_COUNTS.TOTAL_REVERSES) + HHHN_DECISION_COUNTS.TOTAL_PENDING))
								AND (HHHN_DECISION_COUNTS.TOTAL_ACCEPTS > 0)
								)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'R')
							)
						THEN -1
					ELSE NULL
					END AS DIRECTION_MULTIPLIER
				,CASE 
					WHEN (HHHN_DECISION_COUNTS.TOTAL_DECISIONS = HHHN_DECISION_COUNTS.TOTAL_PENDING)
						THEN 'P'
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = ((HHHN_DECISION_COUNTS.TOTAL_PENDING + HHHN_DECISION_COUNTS.TOTAL_ACCEPTS) + HHHN_DECISION_COUNTS.TOTAL_DECLINES))
							AND (HHHN_DECISION_COUNTS.TOTAL_ACCEPTS > 0)
							)
						THEN 'A'
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = (HHHN_DECISION_COUNTS.TOTAL_DECLINES + HHHN_DECISION_COUNTS.TOTAL_PENDING))
							AND (HHHN_DECISION_COUNTS.TOTAL_DECLINES = HHHN_DECISION_COUNTS.TOTAL_PENDING)
							)
						THEN 'D'
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = (HHHN_DECISION_COUNTS.TOTAL_DECLINES + HHHN_DECISION_COUNTS.TOTAL_PENDING))
							AND (HHHN_DECISION_COUNTS.TOTAL_DECLINES < HHHN_DECISION_COUNTS.TOTAL_PENDING)
							)
						THEN 'P'
					WHEN (
							(
								(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = (((HHHN_DECISION_COUNTS.TOTAL_ACCEPTS + HHHN_DECISION_COUNTS.TOTAL_CANCELS) + HHHN_DECISION_COUNTS.TOTAL_PENDING) + HHHN_DECISION_COUNTS.TOTAL_DECLINES))
								AND (HHHN_DECISION_COUNTS.TOTAL_ACCEPTS > 0)
								)
							AND (HHHN_DECISION_COUNTS.TOTAL_CANCELS > 0)
							)
						THEN 'C'
					WHEN (
							(
								(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = (((HHHN_DECISION_COUNTS.TOTAL_ACCEPTS + HHHN_DECISION_COUNTS.TOTAL_REVERSES) + HHHN_DECISION_COUNTS.TOTAL_PENDING) + HHHN_DECISION_COUNTS.TOTAL_DECLINES))
								AND (HHHN_DECISION_COUNTS.TOTAL_ACCEPTS > 0)
								)
							AND (HHHN_DECISION_COUNTS.TOTAL_REVERSES > 0)
							)
						THEN 'R'
					ELSE NULL
					END AS LATEST_DECISION
			FROM (
				SELECT HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID AS RX_340B_HEADER_ID
					,HHHN_LATEST_CALCULATED_DECISION.DECISION_CODE AS DECISION_CODE
					,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE AS DECISION_DATE
					,HHHN_LATEST_CALCULATED_DECISION.FISCAL_DAY_ID AS FISCAL_DAY_ID
					,HHHN_LATEST_CALCULATED_DECISION.FISCAL_WEEK_END_DAY_ID AS REPORTING_WEEK_END_FISCAL_DAY_ID
					,COUNT(HHHN_LATEST_CALCULATED_DECISION.TOTAL_DECISIONS) OVER (
						PARTITION BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE 
                      order BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE ROWS BETWEEN UNBOUNDED PRECEDING
							AND UNBOUNDED FOLLOWING
						) AS TOTAL_DECISIONS
					,COUNT(HHHN_LATEST_CALCULATED_DECISION.TOTAL_REJECTS) OVER (
						PARTITION BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE 
                      order BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE ROWS BETWEEN UNBOUNDED PRECEDING
							AND UNBOUNDED FOLLOWING
						) AS TOTAL_REJECTS
					,COUNT(HHHN_LATEST_CALCULATED_DECISION.TOTAL_DECLINES) OVER (
						PARTITION BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE 
                      order BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE ROWS BETWEEN UNBOUNDED PRECEDING
							AND UNBOUNDED FOLLOWING
						) AS TOTAL_DECLINES
					,COUNT(HHHN_LATEST_CALCULATED_DECISION.TOTAL_REVERSALS) OVER (
						PARTITION BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE 
                      order BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE ROWS BETWEEN UNBOUNDED PRECEDING
							AND UNBOUNDED FOLLOWING
						) AS TOTAL_REVERSES
					,COUNT(HHHN_LATEST_CALCULATED_DECISION.TOTAL_CANCELS) OVER (
						PARTITION BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE 
                      order BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE ROWS BETWEEN UNBOUNDED PRECEDING
							AND UNBOUNDED FOLLOWING
						) AS TOTAL_CANCELS
					,COUNT(HHHN_LATEST_CALCULATED_DECISION.TOTAL_ACCEPTS) OVER (
						PARTITION BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE 
                      order BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE ROWS BETWEEN UNBOUNDED PRECEDING
							AND UNBOUNDED FOLLOWING
						) AS TOTAL_ACCEPTS
					,COUNT(HHHN_LATEST_CALCULATED_DECISION.TOTAL_PENDING) OVER (
						PARTITION BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE 
                      order BY HHHN_LATEST_CALCULATED_DECISION.RX_340B_HEADER_ID
						,HHHN_LATEST_CALCULATED_DECISION.CALENDAR_DATE ROWS BETWEEN UNBOUNDED PRECEDING
							AND UNBOUNDED FOLLOWING
						) AS TOTAL_PENDING
				FROM (
					SELECT FCT_340B_HHHN_DECISION_TRANSACTIONS.RX_340B_HEADER_ID AS RX_340B_HEADER_ID
						,FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE AS DECISION_CODE
						,CMINUS1.CALENDAR_DATE AS CALENDAR_DATE
						,CMINUS1.FISCAL_DAY_ID AS FISCAL_DAY_ID
						,CMINUS1.FISCAL_WEEK_END_DAY_ID AS FISCAL_WEEK_END_DAY_ID
						,CASE 
							WHEN (
									(
										(
											(FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'A')
											OR (FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'D')
											)
										OR (
											(FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'R')
											OR (FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'C')
											)
										)
									OR (FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'P')
									)
								THEN FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE
							ELSE NULL
							END AS TOTAL_DECISIONS
						,CASE 
							WHEN (
									(
										(FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'D')
										OR (FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'R')
										)
									OR (FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'C')
									)
								THEN FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE
							ELSE NULL
							END AS TOTAL_REJECTS
						,CASE 
							WHEN (FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'D')
								THEN FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE
							ELSE NULL
							END AS TOTAL_DECLINES
						,CASE 
							WHEN (FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'R')
								THEN FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE
							ELSE NULL
							END AS TOTAL_REVERSALS
						,CASE 
							WHEN (FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'C')
								THEN FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE
							ELSE NULL
							END AS TOTAL_CANCELS
						,CASE 
							WHEN (FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'A')
								THEN FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE
							ELSE NULL
							END AS TOTAL_ACCEPTS
						,CASE 
							WHEN (FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE = 'P')
								THEN FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE
							ELSE NULL
							END AS TOTAL_PENDING
					FROM (
						EBIDW.RX.FCT_340B_HHHN_DECISION_TRANSACTIONS 
            INNER JOIN EBIDW.COMMON.DIM_CALENDAR_MASTER CMINUS1 ON (( ((to_DATE (FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_DATE) - 1)) = CMINUS1.CALENDAR_DATE))
						
)
					WHERE (
							FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE IN (
								('A')::VARCHAR(2)
								,('D')::VARCHAR(2)
								,('R')::VARCHAR(2)
								,('C')::VARCHAR(2)
								,('P')::VARCHAR(2)
								)
							)
					GROUP BY FCT_340B_HHHN_DECISION_TRANSACTIONS.RX_340B_HEADER_ID
						,FCT_340B_HHHN_DECISION_TRANSACTIONS.DECISION_CODE
						,CMINUS1.CALENDAR_DATE
						,CMINUS1.FISCAL_DAY_ID
						,CMINUS1.FISCAL_WEEK_END_DAY_ID
					) HHHN_LATEST_CALCULATED_DECISION
				) HHHN_DECISION_COUNTS
			GROUP BY HHHN_DECISION_COUNTS.RX_340B_HEADER_ID
				,HHHN_DECISION_COUNTS.DECISION_CODE
				,HHHN_DECISION_COUNTS.DECISION_DATE
				,HHHN_DECISION_COUNTS.FISCAL_DAY_ID
				,HHHN_DECISION_COUNTS.REPORTING_WEEK_END_FISCAL_DAY_ID
				,CASE 
					WHEN (HHHN_DECISION_COUNTS.DECISION_CODE = 'A')
						THEN 1
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = HHHN_DECISION_COUNTS.TOTAL_PENDING)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'P')
							)
						THEN 1
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS > HHHN_DECISION_COUNTS.TOTAL_PENDING)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'P')
							)
						THEN 0
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = HHHN_DECISION_COUNTS.TOTAL_DECLINES)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'D')
							)
						THEN 0
					WHEN (
							(
								(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = ((HHHN_DECISION_COUNTS.TOTAL_ACCEPTS + HHHN_DECISION_COUNTS.TOTAL_DECLINES) + HHHN_DECISION_COUNTS.TOTAL_PENDING))
								AND (HHHN_DECISION_COUNTS.TOTAL_ACCEPTS > 0)
								)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'D')
							)
						THEN 0
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = HHHN_DECISION_COUNTS.TOTAL_CANCELS)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'C')
							)
						THEN -1
					WHEN (
							(
								(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = ((HHHN_DECISION_COUNTS.TOTAL_ACCEPTS + HHHN_DECISION_COUNTS.TOTAL_CANCELS) + HHHN_DECISION_COUNTS.TOTAL_PENDING))
								AND (HHHN_DECISION_COUNTS.TOTAL_ACCEPTS > 0)
								)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'C')
							)
						THEN -1
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = HHHN_DECISION_COUNTS.TOTAL_REVERSES)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'R')
							)
						THEN -1
					WHEN (
							(
								(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = ((HHHN_DECISION_COUNTS.TOTAL_ACCEPTS + HHHN_DECISION_COUNTS.TOTAL_REVERSES) + HHHN_DECISION_COUNTS.TOTAL_PENDING))
								AND (HHHN_DECISION_COUNTS.TOTAL_ACCEPTS > 0)
								)
							AND (HHHN_DECISION_COUNTS.DECISION_CODE = 'R')
							)
						THEN -1
					ELSE NULL
					END
				,CASE 
					WHEN (HHHN_DECISION_COUNTS.TOTAL_DECISIONS = HHHN_DECISION_COUNTS.TOTAL_PENDING)
						THEN 'P'
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = ((HHHN_DECISION_COUNTS.TOTAL_PENDING + HHHN_DECISION_COUNTS.TOTAL_ACCEPTS) + HHHN_DECISION_COUNTS.TOTAL_DECLINES))
							AND (HHHN_DECISION_COUNTS.TOTAL_ACCEPTS > 0)
							)
						THEN 'A'
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = (HHHN_DECISION_COUNTS.TOTAL_DECLINES + HHHN_DECISION_COUNTS.TOTAL_PENDING))
							AND (HHHN_DECISION_COUNTS.TOTAL_DECLINES = HHHN_DECISION_COUNTS.TOTAL_PENDING)
							)
						THEN 'D'
					WHEN (
							(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = (HHHN_DECISION_COUNTS.TOTAL_DECLINES + HHHN_DECISION_COUNTS.TOTAL_PENDING))
							AND (HHHN_DECISION_COUNTS.TOTAL_DECLINES < HHHN_DECISION_COUNTS.TOTAL_PENDING)
							)
						THEN 'P'
					WHEN (
							(
								(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = (((HHHN_DECISION_COUNTS.TOTAL_ACCEPTS + HHHN_DECISION_COUNTS.TOTAL_CANCELS) + HHHN_DECISION_COUNTS.TOTAL_PENDING) + HHHN_DECISION_COUNTS.TOTAL_DECLINES))
								AND (HHHN_DECISION_COUNTS.TOTAL_ACCEPTS > 0)
								)
							AND (HHHN_DECISION_COUNTS.TOTAL_CANCELS > 0)
							)
						THEN 'C'
					WHEN (
							(
								(HHHN_DECISION_COUNTS.TOTAL_DECISIONS = (((HHHN_DECISION_COUNTS.TOTAL_ACCEPTS + HHHN_DECISION_COUNTS.TOTAL_REVERSES) + HHHN_DECISION_COUNTS.TOTAL_PENDING) + HHHN_DECISION_COUNTS.TOTAL_DECLINES))
								AND (HHHN_DECISION_COUNTS.TOTAL_ACCEPTS > 0)
								)
							AND (HHHN_DECISION_COUNTS.TOTAL_REVERSES > 0)
							)
						THEN 'R'
					ELSE NULL
					END
			) HHHN_LATEST_CALCULATED_DECISION
		) HHHN_DECISION_TRANSACTIONS ON ((FCT_340B_HEADER.RX_340B_HEADER_ID = HHHN_DECISION_TRANSACTIONS.RX_340B_HEADER_ID))
	 WHERE (
		(FCT_340B_HEADER.DELETE_FLAG = 'f'::BOOLEAN)
		AND (SSA.PROCESSOR_340B = 'HHHN')
		)
	
UNION ALL

(
	SELECT FCT_340B_HEADER.RX_340B_HEADER_ID
		,FCT_340B_HEADER.REPORTING_WEEK_END_FISCAL_DAY_ID
		,FCT_340B_HEADER.STORE_ID
		,FCT_340B_HEADER.SALES_STORE_ID
		,FCT_340B_HEADER.STORE_NUMBER
		,FCT_340B_HEADER.RX_NUMBER
		,FCT_340B_HEADER.REFILL_NUMBER
		,FCT_340B_HEADER.ADJUDICATION_FISCAL_DAY_ID
		,FCT_340B_HEADER.ADJUDICATION_DATE
		,FCT_340B_HEADER.ORDER_DATE_FISCAL_DAY_ID
		,FCT_340B_HEADER.ORDER_DATE
		,FCT_340B_HEADER.DATE_WRITTEN_FISCAL_DAY_ID
		,FCT_340B_HEADER.DATE_WRITTEN
		,FCT_340B_HEADER.IS_COB
		,FCT_340B_HEADER.IS_PARTIAL_FILL
		,FCT_340B_HEADER.IS_PF_COMPLETED
		,FCT_340B_HEADER.TP_RECORDS_EXPECTED
		,FCT_340B_HEADER.TP_RECORDS_RECEIVED
		,FCT_340B_HEADER.IS_TP_RECONCILED
		,FCT_340B_HEADER.TP_RECONCILED_FISCAL_DAY_ID
		,FCT_340B_HEADER.TP_RECONCILED_DATE
		,(FCT_340B_HEADER.TOTAL_TP_BILLED_AMOUNT)::NUMBER(12, 2) AS TOTAL_TP_BILLED_AMOUNT
		,FCT_340B_HEADER.TOTAL_TP_BILLED_AMOUNT AS TOTAL_TP_BILLED_AMOUNT_DECISION
		,FCT_340B_HEADER.POS_RECORDS_EXPECTED
		,FCT_340B_HEADER.POS_RECORDS_RECEIVED
		,FCT_340B_HEADER.IS_POS_RECONCILED
		,FCT_340B_HEADER.POS_RECONCILED_FISCAL_DAY_ID
		,FCT_340B_HEADER.POS_RECONCILED_DATE
		,(FCT_340B_HEADER.COPAY_AMOUNT)::NUMBER(12, 2) AS COPAY_AMOUNT
		,FCT_340B_HEADER.COPAY_AMOUNT AS COPAY_AMOUNT_DECISION
		,FCT_340B_HEADER.IS_CLAIM_RECONCILED
		,FCT_340B_HEADER.CLAIM_RECONCILED_FISCAL_DAY_ID
		,FCT_340B_HEADER.CLAIM_RECONCILED_DATE
		,(FCT_340B_HEADER.DISPENSED_QUANTITY)::NUMBER(12, 4) AS DISPENSED_QUANTITY
		,FCT_340B_HEADER.DISPENSED_QUANTITY AS DISPENSED_QUANTITY_DECISION
		,(FCT_340B_HEADER.ACQUISITION_COST)::NUMBER(12, 4) AS ACQUISITION_COST
		,FCT_340B_HEADER.ACQUISITION_COST AS ACQUISITION_COST_DECISION
		,FCT_340B_HEADER.IS_INVENTORY_DECREMENTED
		,FCT_340B_HEADER.DRUG_ID
		,FCT_340B_HEADER.RX_DRUG_ID
		,FCT_340B_HEADER.DISPENSED_DRUG_KEY
		,FCT_340B_HEADER.PRODUCT_ID
		,FCT_340B_HEADER.RX_PRODUCT_ID
		,FCT_340B_HEADER.PRD_PRODUCT_KEY
		,FCT_340B_HEADER.IS_CANCELED
		,FCT_340B_HEADER.CANCELED_FISCAL_DAY_ID
		,FCT_340B_HEADER.CANCELED_DATE
		,(FCT_340B_HEADER.CANCELED_QUANTITY)::NUMBER(12, 4) AS CANCELED_QUANTITY
		,FCT_340B_HEADER.CANCELED_QUANTITY AS CANCELED_QUANTITY_DECISION
		,FCT_340B_HEADER.IS_CANCELED_INVENTORY_INCREMENTED
		,FCT_340B_HEADER.CANCELED_REASON_ID
		,FCT_340B_HEADER.CANCELED_REASON_CODE
		,FCT_340B_HEADER.IS_340B_ELIGIBLE
		,FCT_340B_HEADER.PD_PATIENT_KEY
		,FCT_340B_HEADER.PRESCRIBER_ID
		,FCT_340B_HEADER.RX_PRESCRIBER_ID
		,FCT_340B_HEADER.PADR_KEY
		,FCT_340B_HEADER.DISPENSE_SENT
		,FCT_340B_HEADER.DISPENSE_SENT_DATE
		,FCT_340B_HEADER.HHHN_PENDING_STATUS
		,(
			CASE 
				WHEN FCT_340B_HEADER.IS_340B_ELIGIBLE
					THEN 'A'
				ELSE 'D'
				END
			)::VARCHAR(2) AS HHHN_DECISION
		,CASE 
			WHEN FCT_340B_HEADER.IS_340B_ELIGIBLE
				THEN 'A'
			ELSE 'D'
			END AS HHHN_LATEST_DECISION
		,FCT_340B_HEADER.ADJUDICATION_DATE AS HHHN_DECISION_DATE
		,FCT_340B_HEADER.ADJUDICATION_FISCAL_DAY_ID AS DECISION_FISCAL_DAY_ID
		,1 AS DECISION_HEADER_ROW
    ,FCT_340B_HEADER.ENTITY_340B_ID
		,FCT_340B_HEADER.EXTRACT_DATE
		,FCT_340B_HEADER.SOURCE_TABLE_NAME
		,FCT_340B_HEADER.CREATE_DATE
		,FCT_340B_HEADER.MAINT_DATE
		,FCT_340B_HEADER.CREATE_UID
		,FCT_340B_HEADER.MAINT_UID
		,FCT_340B_HEADER.DELETE_FLAG
		,FCT_340B_HEADER.DELETE_DATE
		,FCT_340B_HEADER.DELETE_UID
	FROM (
		EBIDW.RX.FCT_340B_HEADER INNER JOIN REPORTING.DIM_STORE_STACK_CURRENT SSA ON ((SSA.SALES_STORE_NUMBER) = FCT_340B_HEADER.STORE_NUMBER)
		)
	WHERE (
			(FCT_340B_HEADER.DELETE_FLAG = 'f'::BOOLEAN)
			AND (SSA.PROCESSOR_340B = 'WMY')
            )
			);
create or replace view FCT_340B_REJECTED_CLAIMS_CURRENT(
	REJECT_CLAIM_ID,
	RX_340B_HEADER_ID,
	TRANSCTIN_TYPE,
	CONTRACTED_ENTITY_ID,
	CONTRACTED_ENTITY_DESCRIPTION,
	SALES_STORE_ID,
	STORE_ID,
	STORE_NUMBER,
	RX_NUMBER,
	REFILL_NUMBER,
	FILL_DATE_FISCAL_DAY_ID,
	FILL_DATE,
	WRITTEN_DATE_FISCAL_DAY_ID,
	WRITTEN_DATE,
	NDC_NUMBER,
	IS_GENERIC,
	QUANTITY,
	RETAIL_AMOUNT,
	COPAY_AMOUNT,
	TP_PAYMENT_AMOUNT,
	TRANSACTION_FEE,
	SLIDING_FEE,
	ACQUISITION_COST,
	TP_PLAN_NUMBER,
	DEA_NUMBER,
	PRESCRIBER_FIRST_NAME,
	PRESCRIBER_LAST_NAME,
	ERROR_LEVEL,
	ERROR_TYPE,
	ORIGINAL_FILE_NAME,
	ORIGINAL_FILE_LINE_NUMBER,
	PHARMACY_TRANSACTION_ID,
	IMPORT_NOTES,
	IS_PROCESSED,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as

SELECT FCT_340B_REJECTED_CLAIMS.REJECT_CLAIM_ID
	,FCT_340B_REJECTED_CLAIMS.RX_340B_HEADER_ID
	,FCT_340B_REJECTED_CLAIMS.TRANSCTIN_TYPE
	,FCT_340B_REJECTED_CLAIMS.CONTRACTED_ENTITY_ID
	,FCT_340B_REJECTED_CLAIMS.CONTRACTED_ENTITY_DESCRIPTION
	,FCT_340B_REJECTED_CLAIMS.SALES_STORE_ID
	,FCT_340B_REJECTED_CLAIMS.STORE_ID
	,FCT_340B_REJECTED_CLAIMS.STORE_NUMBER
	,FCT_340B_REJECTED_CLAIMS.RX_NUMBER
	,FCT_340B_REJECTED_CLAIMS.REFILL_NUMBER
	,FCT_340B_REJECTED_CLAIMS.FILL_DATE_FISCAL_DAY_ID
	,FCT_340B_REJECTED_CLAIMS.FILL_DATE
	,FCT_340B_REJECTED_CLAIMS.WRITTEN_DATE_FISCAL_DAY_ID
	,FCT_340B_REJECTED_CLAIMS.WRITTEN_DATE
	,FCT_340B_REJECTED_CLAIMS.NDC_NUMBER
	,FCT_340B_REJECTED_CLAIMS.IS_GENERIC
	,FCT_340B_REJECTED_CLAIMS.QUANTITY
	,FCT_340B_REJECTED_CLAIMS.RETAIL_AMOUNT
	,FCT_340B_REJECTED_CLAIMS.COPAY_AMOUNT
	,FCT_340B_REJECTED_CLAIMS.TP_PAYMENT_AMOUNT
	,FCT_340B_REJECTED_CLAIMS.TRANSACTION_FEE
	,FCT_340B_REJECTED_CLAIMS.SLIDING_FEE
	,FCT_340B_REJECTED_CLAIMS.ACQUISITION_COST
	,FCT_340B_REJECTED_CLAIMS.TP_PLAN_NUMBER
	,FCT_340B_REJECTED_CLAIMS.DEA_NUMBER
	,FCT_340B_REJECTED_CLAIMS.PRESCRIBER_FIRST_NAME
	,FCT_340B_REJECTED_CLAIMS.PRESCRIBER_LAST_NAME
	,FCT_340B_REJECTED_CLAIMS.ERROR_LEVEL
	,FCT_340B_REJECTED_CLAIMS.ERROR_TYPE
	,FCT_340B_REJECTED_CLAIMS.ORIGINAL_FILE_NAME
	,FCT_340B_REJECTED_CLAIMS.ORIGINAL_FILE_LINE_NUMBER
	,FCT_340B_REJECTED_CLAIMS.PHARMACY_TRANSACTION_ID
	,FCT_340B_REJECTED_CLAIMS.IMPORT_NOTES
	,FCT_340B_REJECTED_CLAIMS.IS_PROCESSED
	,FCT_340B_REJECTED_CLAIMS.EXTRACT_DATE
	,FCT_340B_REJECTED_CLAIMS.SOURCE_TABLE_NAME
	,FCT_340B_REJECTED_CLAIMS.CREATE_DATE
	,FCT_340B_REJECTED_CLAIMS.MAINT_DATE
	,FCT_340B_REJECTED_CLAIMS.CREATE_UID
	,FCT_340B_REJECTED_CLAIMS.MAINT_UID
	,FCT_340B_REJECTED_CLAIMS.DELETE_FLAG
	,FCT_340B_REJECTED_CLAIMS.DELETE_DATE
	,FCT_340B_REJECTED_CLAIMS.DELETE_UID
FROM EBIDW.RX.FCT_340B_REJECTED_CLAIMS
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_340B_REJECTED_CLAIMS.STORE_NUMBER
WHERE (FCT_340B_REJECTED_CLAIMS.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_ACTIVATION_DETAIL_CURRENT(
	ACTIVATION_DETAIL_ID,
	ORDER_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	TRANSACTION_DATE,
	TRANSACTION_TIME,
	TRANSACTION_FISCAL_DAY_ID,
	ORDER_NUMBER,
	TERMINAL_NUMBER,
	PRIMARY_ITEM_ID,
	PRIMARY_MERCH_ITEM_ID,
	PRIMARY_UPC,
	ACTUAL_ITEM_ID,
	ACTUAL_MERCH_ITEM_ID,
	ACTUAL_UPC,
	CATEGORY_ID,
	CATEGORY_LABEL,
	PARTNER,
	DENOMINATION,
	MARGIN,
	SURCHARGE,
	MULTIPLIER,
	SAFEWAY_MULTIPLIER,
	GOLUB_MULTIPLIER,
	PARTNER_SHARE,
	THIRDPARTY_SHARE,
	GOLUB_SHARE,
	EASY_SCAN_RECORD,
	SPECIAL_ITEM_CODE_1,
	SPECIAL_ITEM_CODE_2,
	SPECIAL_ITEM_CODE_3,
	ITEM_DESCRIPTION,
	ACCOUNT_NUMBER,
	CARD_TYPE_CODE,
	CARD_TYPE_ID,
	SEQUENCE_NUMBER,
	AMOUNT_OF_ITEM,
	SAFEW_COMMISSIONS_TOTAL,
	SAFEW_CASH_SALES_TOTAL,
	SAFEW_ITEM_BY_VENDOR_TOTAL,
	SAFEW_WEEKLY_TOTAL,
	SAFEW_CASH_SALES_TOTAL_SALE,
	SAFEW_WEEKLY_TOTAL_SALE,
	SAFEW_COMMISSIONS_TOTAL_COMMISSION,
	SAFEW_COMMISSIONS_TOTAL_SAFEW_CUT,
	SAFEW_CASH_SALES_SAFEW_CUT,
	SAFEW_WEEKLY_SAFEW_CUT,
	SAFEW_COMMISSIONS_TOTAL_PC_CUT,
	SAFEW_CASH_SALES_PC_CUT,
	SAFEW_WEEKLY_PC_CUT,
	SAFEW_CASH_SALES_PCT,
	SAFEW_WEEKLY_PCT,
	CASHIER_NUMBER,
	MANAGER_NUMBER,
	DEPARTMENT_NUMBER,
	STATUS_CODE,
	STATUS_CODE_ID,
	AUTH_CODE,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	JOURNAL_FILE_NAME,
	OPERATION_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as

SELECT FCT.ACTIVATION_DETAIL_ID
	,FCT.ORDER_HEADER_ID
	,FCT.DIVISION_NUMBER
	,FCT.STORE_ID
	,FCT.SALES_STORE_ID
	,FCT.STORE_NUMBER
	,FCT.BUSINESS_DATE
	,FCT.BUSINESS_FISCAL_DAY_ID
	,FCT.TRANSACTION_DATE
	,FCT.TRANSACTION_TIME
	,FCT.TRANSACTION_FISCAL_DAY_ID
	,FCT.ORDER_NUMBER
	,FCT.TERMINAL_NUMBER
	,FCT.PRIMARY_ITEM_ID
	,FCT.PRIMARY_MERCH_ITEM_ID
	,FCT.PRIMARY_UPC
	,FCT.ACTUAL_ITEM_ID
	,FCT.ACTUAL_MERCH_ITEM_ID
	,FCT.ACTUAL_UPC
	,FCT.CATEGORY_ID
	,FCT.CATEGORY_LABEL
	,LKP.PARTNER
	,LKP.DENOMINATION
	,LKP.MARGIN
	,LKP.SURCHARGE
	,LKP.MULTIPLIER
	,LKP.SAFEWAY_MULTIPLIER
	,LKP.GOLUB_MULTIPLIER
	,LKP.PARTNER_SHARE
	,LKP.THIRDPARTY_SHARE
	,LKP.GOLUB_SHARE
	,FCT.EASY_SCAN_RECORD
	,FCT.SPECIAL_ITEM_CODE_1
	,FCT.SPECIAL_ITEM_CODE_2
	,FCT.SPECIAL_ITEM_CODE_3
	,FCT.ITEM_DESCRIPTION
	,FCT.ACCOUNT_NUMBER
	,FCT.CARD_TYPE_CODE
	,FCT.CARD_TYPE_ID
	,FCT.SEQUENCE_NUMBER
	,FCT.AMOUNT_OF_ITEM
	,CASE WHEN (ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (FCT.AMOUNT_OF_ITEM + LKP.SURCHARGE) ELSE 0 END, 3) IS NOT NULL) THEN ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (FCT.AMOUNT_OF_ITEM + LKP.SURCHARGE) ELSE 0 END, 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_COMMISSIONS_TOTAL
	,CASE WHEN (ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (FCT.AMOUNT_OF_ITEM - (((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) + LKP.THIRDPARTY_SHARE) + LKP.GOLUB_SHARE)) ELSE 0 END, 3) IS NOT NULL) THEN ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (FCT.AMOUNT_OF_ITEM - (((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) + LKP.THIRDPARTY_SHARE) + LKP.GOLUB_SHARE)) ELSE 0 END, 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_CASH_SALES_TOTAL
	,CASE WHEN (ROUND(CASE WHEN ((SC.STATUS_APPROVED = 't'::BOOLEAN) AND (FCT.AMOUNT_OF_ITEM > 0)) THEN (FCT.AMOUNT_OF_ITEM + LKP.SURCHARGE) ELSE 0 END, 3) IS NOT NULL) THEN ROUND(CASE WHEN ((SC.STATUS_APPROVED = 't'::BOOLEAN) AND (FCT.AMOUNT_OF_ITEM > 0)) THEN (FCT.AMOUNT_OF_ITEM + LKP.SURCHARGE) ELSE 0 END, 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_ITEM_BY_VENDOR_TOTAL
	,CASE WHEN (ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN ((FCT.AMOUNT_OF_ITEM + LKP.SURCHARGE) - (((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) + LKP.THIRDPARTY_SHARE) + LKP.GOLUB_SHARE)) ELSE 0 END, 3) IS NOT NULL) THEN ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN ((FCT.AMOUNT_OF_ITEM + LKP.SURCHARGE) - (((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) + LKP.THIRDPARTY_SHARE) + LKP.GOLUB_SHARE)) ELSE 0 END, 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_WEEKLY_TOTAL
	,CASE WHEN (ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN FCT.AMOUNT_OF_ITEM ELSE 0 END, 3) IS NOT NULL) THEN ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN FCT.AMOUNT_OF_ITEM ELSE 0 END, 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_CASH_SALES_TOTAL_SALE
	,CASE WHEN (ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (FCT.AMOUNT_OF_ITEM + LKP.SURCHARGE) ELSE 0 END, 3) IS NOT NULL) THEN ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (FCT.AMOUNT_OF_ITEM + LKP.SURCHARGE) ELSE 0 END, 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_WEEKLY_TOTAL_SALE
	,CASE WHEN (ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN ((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) + LKP.SURCHARGE) ELSE 0 END, 3) IS NOT NULL) THEN ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN ((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) + LKP.SURCHARGE) ELSE 0 END, 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_COMMISSIONS_TOTAL_COMMISSION
	,CASE WHEN (ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) * LKP.SAFEWAY_MULTIPLIER) + LKP.THIRDPARTY_SHARE) ELSE 0 END, 3) IS NOT NULL) THEN ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) * LKP.SAFEWAY_MULTIPLIER) + LKP.THIRDPARTY_SHARE) ELSE 0 END, 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_COMMISSIONS_TOTAL_SAFEW_CUT
	,CASE WHEN (ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) * LKP.SAFEWAY_MULTIPLIER) + LKP.THIRDPARTY_SHARE) ELSE 0 END, 3) IS NOT NULL) THEN ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) * LKP.SAFEWAY_MULTIPLIER) + LKP.THIRDPARTY_SHARE) ELSE 0 END, 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_CASH_SALES_SAFEW_CUT
	,CASE WHEN (ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN ((((FCT.AMOUNT_OF_ITEM + LKP.SURCHARGE) * LKP.MULTIPLIER) * LKP.SAFEWAY_MULTIPLIER) + LKP.THIRDPARTY_SHARE) ELSE 0 END, 3) IS NOT NULL) THEN ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN ((((FCT.AMOUNT_OF_ITEM + LKP.SURCHARGE) * LKP.MULTIPLIER) * LKP.SAFEWAY_MULTIPLIER) + LKP.THIRDPARTY_SHARE) ELSE 0 END, 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_WEEKLY_SAFEW_CUT
	,CASE WHEN (ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) * LKP.GOLUB_MULTIPLIER) + LKP.GOLUB_SHARE) ELSE 0 END, 3) IS NOT NULL) THEN ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) * LKP.GOLUB_MULTIPLIER) + LKP.GOLUB_SHARE) ELSE 0 END, 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_COMMISSIONS_TOTAL_PC_CUT
	,CASE WHEN (ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) * LKP.GOLUB_MULTIPLIER) + LKP.GOLUB_SHARE) ELSE 0 END, 3) IS NOT NULL) THEN ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN (((FCT.AMOUNT_OF_ITEM * LKP.MULTIPLIER) * LKP.GOLUB_MULTIPLIER) + LKP.GOLUB_SHARE) ELSE 0 END, 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_CASH_SALES_PC_CUT
	,CASE WHEN (ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN ((((FCT.AMOUNT_OF_ITEM + LKP.SURCHARGE) * LKP.MULTIPLIER) * LKP.GOLUB_MULTIPLIER) + LKP.GOLUB_SHARE) ELSE 0 END, 3) IS NOT NULL) THEN ROUND(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN ((((FCT.AMOUNT_OF_ITEM + LKP.SURCHARGE) * LKP.MULTIPLIER) * LKP.GOLUB_MULTIPLIER) + LKP.GOLUB_SHARE) ELSE 0 END, 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_WEEKLY_PC_CUT
	,CASE WHEN (ROUND(TO_NUMBER(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN 1 ELSE 0 END), 3) IS NOT NULL) THEN ROUND(TO_NUMBER(CASE WHEN (SC.STATUS_APPROVED = 't'::BOOLEAN) THEN 1 ELSE 0 END), 3) WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END AS SAFEW_CASH_SALES_PCT
	,LKP.MULTIPLIER AS SAFEW_WEEKLY_PCT
	,FCT.CASHIER_NUMBER
	,FCT.MANAGER_NUMBER
	,FCT.DEPARTMENT_NUMBER
	,FCT.STATUS_CODE
	,FCT.STATUS_CODE_ID
	,FCT.AUTH_CODE
	,FCT.LINE_NUMBER
	,FCT.MASTER_LINE_NUMBER
	,FCT.JOURNAL_FILE_NAME
	,FCT.OPERATION_FLAG
	,FCT.EXTRACT_DATE
	,FCT.SOURCE_TABLE_NAME
	,FCT.CREATE_DATE
	,FCT.MAINT_DATE
	,FCT.CREATE_UID
	,FCT.MAINT_UID
	,FCT.DELETE_FLAG
	,FCT.DELETE_DATE
	,FCT.DELETE_UID
FROM (
	(
		EBIDW.POS.FCT_ACTIVATION_DETAIL FCT INNER JOIN EBIDW.POS.LKP_ACTIVATION_STATUS_CODE SC ON ((FCT.STATUS_CODE_ID = SC.STATUS_CODE_ID))
		Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT.STORE_NUMBER) 
		 LEFT JOIN EBIDW.POS.LKP_UPC_COMMISSION_RATE LKP 
     ON ((cast(FCT.ACTUAL_UPC as number(38,0)) = LKP.UPC_NUMBER) 
     AND (FCT.BUSINESS_DATE between LKP.EFFECTIVE_START_DATE AND LKP.EFFECTIVE_END_DATE ))
	);
create or replace view FCT_ADJUSTMENT_CURRENT(
	ADJUSTMENT_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	ADJUSTMENT_ID,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	VOIDED_FLAG,
	TOTAL_ONLY_FLAG,
	GAIN_ADJUSTMENT_FLAG,
	REASON_CODE,
	USER_ID,
	NUM_LINE_ITEMS,
	DEPARTMENT_NUMBER,
	SALES_DEPARTMENT_ID,
	TOTAL_COST,
	TOTAL_BILLING_PRICE,
	CREATED_DATE,
	CREATED_FISCAL_DAY_ID,
	FINAL_DATE,
	FINAL_FISCAL_DAY_ID,
	AUTO_ADJUSTMENT_FLAG,
	LOAD_TIMESTAMP,
	UPDATE_TIMESTAMP,
	LINE_NUMBER,
	EXTRACT_FILE_NAME,
	EXTRACT_FILE_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as 
SELECT FCT_ADJUSTMENT.ADJUSTMENT_HEADER_ID, FCT_ADJUSTMENT.DIVISION_NUMBER, FCT_ADJUSTMENT.STORE_ID, FCT_ADJUSTMENT.SALES_STORE_ID, FCT_ADJUSTMENT.STORE_NUMBER, FCT_ADJUSTMENT.ADJUSTMENT_ID, FCT_ADJUSTMENT.BUSINESS_FISCAL_DAY_ID, FCT_ADJUSTMENT.BUSINESS_DATE, FCT_ADJUSTMENT.VOIDED_FLAG, FCT_ADJUSTMENT.TOTAL_ONLY_FLAG, FCT_ADJUSTMENT.GAIN_ADJUSTMENT_FLAG, FCT_ADJUSTMENT.REASON_CODE, FCT_ADJUSTMENT.USER_ID, FCT_ADJUSTMENT.NUM_LINE_ITEMS, FCT_ADJUSTMENT.DEPARTMENT_NUMBER, FCT_ADJUSTMENT.SALES_DEPARTMENT_ID, FCT_ADJUSTMENT.TOTAL_COST, FCT_ADJUSTMENT.TOTAL_BILLING_PRICE, FCT_ADJUSTMENT.CREATED_DATE, FCT_ADJUSTMENT.CREATED_FISCAL_DAY_ID, FCT_ADJUSTMENT.FINAL_DATE, FCT_ADJUSTMENT.FINAL_FISCAL_DAY_ID, FCT_ADJUSTMENT.AUTO_ADJUSTMENT_FLAG, FCT_ADJUSTMENT.LOAD_TIMESTAMP, FCT_ADJUSTMENT.UPDATE_TIMESTAMP, FCT_ADJUSTMENT.LINE_NUMBER, FCT_ADJUSTMENT.EXTRACT_FILE_NAME, FCT_ADJUSTMENT.EXTRACT_FILE_ID, FCT_ADJUSTMENT.EXTRACT_DATE, FCT_ADJUSTMENT.SOURCE_TABLE_NAME, FCT_ADJUSTMENT.CREATE_DATE, FCT_ADJUSTMENT.MAINT_DATE, FCT_ADJUSTMENT.CREATE_UID, FCT_ADJUSTMENT.MAINT_UID, FCT_ADJUSTMENT.DELETE_FLAG, FCT_ADJUSTMENT.DELETE_DATE, FCT_ADJUSTMENT.DELETE_UID From EBIDW.PI.FCT_ADJUSTMENT Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_ADJUSTMENT.STORE_NUMBER WHERE (FCT_ADJUSTMENT.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_ADJUSTMENT_DETAIL_CURRENT(
	ADJUSTMENT_DETAIL_ID,
	ADJUSTMENT_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	ADJUSTMENT_ID,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	SEQUENCE_NUMBER,
	PRIMARY_ITEM_ID,
	PRIMARY_MERCH_ITEM_ID,
	PRIMARY_UPC,
	ACTUAL_ITEM_ID,
	ACTUAL_MERCH_ITEM_ID,
	ACTUAL_UPC,
	UPC_TYPE,
	DESCRIPTION,
	SIZE_DESCRIPTION,
	SALES_DEPARTMENT_ID,
	SALES_DEPARTMENT_NUMBER,
	SUB_DEPARTMENT_ID,
	SUB_DEPARTMENT_NUMBER,
	PACK_QUANTITY,
	RECV_SELL_CONVERSION,
	INVENTORY_UNITS,
	FINAL_QUANTITY,
	FINAL_QUANTITY_UNIT_OF_MEASURE,
	CASE_COST,
	BILLING_PRICE,
	BILLING_PRICE_MULTIPLE,
	VENDOR_ID,
	AP_VENDOR_ID,
	SUPPLIER_NUMBER,
	RECLAIM_ELIGIBLE_FLAG,
	EXTENDED_QUANTITY,
	EXTENDED_SKU_QUANTITY,
	EXTENDED_UPC_QUANTITY,
	EXTENDED_COST,
	LINE_QUANTITY,
	LINE_COST,
	INVENTORY_DIRECTION_MULTIPLIER,
	TOTAL_RETAIL_ADJUSTMENT,
	LOAD_TIMESTAMP,
	UPDATE_TIMESTAMP,
	PI_STATUS_CODE,
	PI_ORIGINAL_XREF,
	PI_ORIGINAL_STORE_NUMBER,
	PI_ORIGINAL_BUSINESS_DATE,
	PI_ORIGINAL_ADJUSTMENT_ID,
	PI_ORIGINAL_SEQUENCE_NUMBER,
	PI_LAST_EDIT_ID,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	EXTRACT_FILE_NAME,
	EXTRACT_FILE_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_ADJUSTMENT_DETAIL.ADJUSTMENT_DETAIL_ID, FCT_ADJUSTMENT_DETAIL.ADJUSTMENT_HEADER_ID, FCT_ADJUSTMENT_DETAIL.DIVISION_NUMBER, FCT_ADJUSTMENT_DETAIL.STORE_ID, FCT_ADJUSTMENT_DETAIL.SALES_STORE_ID, FCT_ADJUSTMENT_DETAIL.STORE_NUMBER, FCT_ADJUSTMENT_DETAIL.ADJUSTMENT_ID, FCT_ADJUSTMENT_DETAIL.BUSINESS_FISCAL_DAY_ID, FCT_ADJUSTMENT_DETAIL.BUSINESS_DATE, FCT_ADJUSTMENT_DETAIL.SEQUENCE_NUMBER, FCT_ADJUSTMENT_DETAIL.PRIMARY_ITEM_ID, FCT_ADJUSTMENT_DETAIL.PRIMARY_MERCH_ITEM_ID, FCT_ADJUSTMENT_DETAIL.PRIMARY_UPC, FCT_ADJUSTMENT_DETAIL.ACTUAL_ITEM_ID, FCT_ADJUSTMENT_DETAIL.ACTUAL_MERCH_ITEM_ID, FCT_ADJUSTMENT_DETAIL.ACTUAL_UPC, FCT_ADJUSTMENT_DETAIL.UPC_TYPE, FCT_ADJUSTMENT_DETAIL."DESCRIPTION", FCT_ADJUSTMENT_DETAIL.SIZE_DESCRIPTION, FCT_ADJUSTMENT_DETAIL.SALES_DEPARTMENT_ID, FCT_ADJUSTMENT_DETAIL.SALES_DEPARTMENT_NUMBER, FCT_ADJUSTMENT_DETAIL.SUB_DEPARTMENT_ID, FCT_ADJUSTMENT_DETAIL.SUB_DEPARTMENT_NUMBER, FCT_ADJUSTMENT_DETAIL.PACK_QUANTITY, FCT_ADJUSTMENT_DETAIL.RECV_SELL_CONVERSION, FCT_ADJUSTMENT_DETAIL.INVENTORY_UNITS, FCT_ADJUSTMENT_DETAIL.FINAL_QUANTITY, FCT_ADJUSTMENT_DETAIL.FINAL_QUANTITY_UNIT_OF_MEASURE, FCT_ADJUSTMENT_DETAIL.CASE_COST, FCT_ADJUSTMENT_DETAIL.BILLING_PRICE, FCT_ADJUSTMENT_DETAIL.BILLING_PRICE_MULTIPLE, FCT_ADJUSTMENT_DETAIL.VENDOR_ID, FCT_ADJUSTMENT_DETAIL.AP_VENDOR_ID, FCT_ADJUSTMENT_DETAIL.SUPPLIER_NUMBER, FCT_ADJUSTMENT_DETAIL.RECLAIM_ELIGIBLE_FLAG, (FCT_ADJUSTMENT_DETAIL.EXTENDED_QUANTITY * TO_NUMBER(FCT_ADJUSTMENT_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_QUANTITY, (FCT_ADJUSTMENT_DETAIL.EXTENDED_SKU_QUANTITY * TO_NUMBER(FCT_ADJUSTMENT_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_SKU_QUANTITY, (CASE WHEN (FCT_ADJUSTMENT_DETAIL.FINAL_QUANTITY_UNIT_OF_MEASURE = 'C'::VARCHAR) THEN (FCT_ADJUSTMENT_DETAIL.FINAL_QUANTITY * TO_NUMBER(FCT_ADJUSTMENT_DETAIL.PACK_QUANTITY)) ELSE FCT_ADJUSTMENT_DETAIL.FINAL_QUANTITY END * TO_NUMBER(FCT_ADJUSTMENT_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_UPC_QUANTITY, (FCT_ADJUSTMENT_DETAIL.EXTENDED_COST * TO_NUMBER(FCT_ADJUSTMENT_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_COST, FCT_ADJUSTMENT_DETAIL.EXTENDED_QUANTITY AS LINE_QUANTITY, ROUND(CASE WHEN (FCT_ADJUSTMENT_DETAIL.INVENTORY_DIRECTION_MULTIPLIER <> 0) THEN FCT_ADJUSTMENT_DETAIL.EXTENDED_COST ELSE CASE WHEN ((FCT_ADJUSTMENT_DETAIL.FINAL_QUANTITY_UNIT_OF_MEASURE = 'E'::VARCHAR) AND (FCT_ADJUSTMENT_DETAIL.PACK_QUANTITY >= 1)) THEN ((FCT_ADJUSTMENT_DETAIL.CASE_COST / TO_NUMBER(FCT_ADJUSTMENT_DETAIL.PACK_QUANTITY)) * FCT_ADJUSTMENT_DETAIL.FINAL_QUANTITY) ELSE (FCT_ADJUSTMENT_DETAIL.CASE_COST * FCT_ADJUSTMENT_DETAIL.FINAL_QUANTITY) END END, 4) AS LINE_COST, FCT_ADJUSTMENT_DETAIL.INVENTORY_DIRECTION_MULTIPLIER, CASE WHEN (FCT_ADJUSTMENT_DETAIL.BILLING_PRICE_MULTIPLE = 0) THEN 0 ELSE ABS(((TO_NUMBER(FCT_ADJUSTMENT_DETAIL.INVENTORY_DIRECTION_MULTIPLIER) * FCT_ADJUSTMENT_DETAIL.FINAL_QUANTITY) * (FCT_ADJUSTMENT_DETAIL.BILLING_PRICE / TO_NUMBER(FCT_ADJUSTMENT_DETAIL.BILLING_PRICE_MULTIPLE)))) END AS TOTAL_RETAIL_ADJUSTMENT, FCT_ADJUSTMENT_DETAIL.LOAD_TIMESTAMP, FCT_ADJUSTMENT_DETAIL.UPDATE_TIMESTAMP, FCT_ADJUSTMENT_DETAIL.PI_STATUS_CODE, FCT_ADJUSTMENT_DETAIL.PI_ORIGINAL_XREF, CASE WHEN (CASE WHEN (FCT_ADJUSTMENT_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_ADJUSTMENT_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_ADJUSTMENT_DETAIL.STORE_NUMBER ELSE TO_NUMBER("SUBSTRING"(FCT_ADJUSTMENT_DETAIL.PI_ORIGINAL_XREF, 1, 3)) END AS PI_ORIGINAL_STORE_NUMBER, CASE WHEN (CASE WHEN (FCT_ADJUSTMENT_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_ADJUSTMENT_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_ADJUSTMENT_DETAIL.BUSINESS_DATE ELSE (TO_DATE("SUBSTRING"(FCT_ADJUSTMENT_DETAIL.PI_ORIGINAL_XREF, 5, 10), 'MM-DD-YYYY')) END AS PI_ORIGINAL_BUSINESS_DATE, CASE WHEN (CASE WHEN (FCT_ADJUSTMENT_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_ADJUSTMENT_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_ADJUSTMENT_DETAIL.ADJUSTMENT_ID ELSE TO_NUMBER("SUBSTRING"(FCT_ADJUSTMENT_DETAIL.PI_ORIGINAL_XREF, 16, 10)) END AS PI_ORIGINAL_ADJUSTMENT_ID, CASE WHEN (CASE WHEN (FCT_ADJUSTMENT_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_ADJUSTMENT_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_ADJUSTMENT_DETAIL.SEQUENCE_NUMBER ELSE TO_NUMBER("SUBSTRING"(FCT_ADJUSTMENT_DETAIL.PI_ORIGINAL_XREF, 27, 10)) END AS PI_ORIGINAL_SEQUENCE_NUMBER, FCT_ADJUSTMENT_DETAIL.PI_LAST_EDIT_ID, FCT_ADJUSTMENT_DETAIL.LINE_NUMBER, FCT_ADJUSTMENT_DETAIL.MASTER_LINE_NUMBER, FCT_ADJUSTMENT_DETAIL.EXTRACT_FILE_NAME, FCT_ADJUSTMENT_DETAIL.EXTRACT_FILE_ID, FCT_ADJUSTMENT_DETAIL.EXTRACT_DATE, FCT_ADJUSTMENT_DETAIL.SOURCE_TABLE_NAME, FCT_ADJUSTMENT_DETAIL.CREATE_DATE, FCT_ADJUSTMENT_DETAIL.MAINT_DATE, FCT_ADJUSTMENT_DETAIL.CREATE_UID, FCT_ADJUSTMENT_DETAIL.MAINT_UID, FCT_ADJUSTMENT_DETAIL.DELETE_FLAG, FCT_ADJUSTMENT_DETAIL.DELETE_DATE, FCT_ADJUSTMENT_DETAIL.DELETE_UID From EBIDW.PI.FCT_ADJUSTMENT_DETAIL
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_ADJUSTMENT_DETAIL.STORE_ID WHERE (FCT_ADJUSTMENT_DETAIL.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_AP_CURRENT(
	AP_VENDOR_ID,
	VENDOR_ID,
	PAY_DATE_LABEL,
	BATCH_NUMBER,
	VOUCHER_NUMBER,
	LINE_NUMBER,
	DIVISION,
	AP_VENDOR_NUMBER,
	GL_ACCOUNT,
	INVOICE_NUMBER,
	INVOICE_DAY_KEY,
	INVOICE_DAY_KEY2,
	GROSS_AMOUNT,
	DISCOUNT_AMOUNT,
	CHECK_AMOUNT,
	BANK,
	CHECK_NUMBER,
	CHECK_DAY_KEY,
	ENTRY_DAY_KEY,
	DISTRIBUTED_DAY_KEY,
	FLAG_1099,
	SPECIAL,
	INV_FLAG,
	CURRENT_GROSS_AMOUNT,
	CURRENT_DISCOUNT_AMOUNT,
	CURRENT_CHECK_AMOUNT,
	PO_NUMBER,
	FISCAL_PERIOD_ID,
	CORPORATION_NUMBER,
	ACCOUNT_ID,
	ACCOUNT_NUMBER,
	STORE_ID,
	STORE_NUMBER,
	DEPARTMENT_ID,
	DEPARTMENT_NUMBER,
	RECORD_SOURCE,
	ACTIVE_FLAG
) as SELECT FCT_AP.AP_VENDOR_ID, FCT_AP.VENDOR_ID, FCT_AP.PAY_DATE_LABEL, FCT_AP.BATCH_NUMBER, FCT_AP.VOUCHER_NUMBER, FCT_AP.LINE_NUMBER, FCT_AP.DIVISION, FCT_AP.AP_VENDOR_NUMBER, FCT_AP.GL_ACCOUNT, FCT_AP.INVOICE_NUMBER, FCT_AP.INVOICE_DAY_KEY, FCT_AP.INVOICE_DAY_KEY2, FCT_AP.GROSS_AMOUNT, FCT_AP.DISCOUNT_AMOUNT, FCT_AP.CHECK_AMOUNT, FCT_AP.BANK, FCT_AP.CHECK_NUMBER, FCT_AP.CHECK_DAY_KEY, FCT_AP.ENTRY_DAY_KEY, FCT_AP.DISTRIBUTED_DAY_KEY, FCT_AP.FLAG_1099, FCT_AP.SPECIAL, FCT_AP.INV_FLAG, FCT_AP.CURRENT_GROSS_AMOUNT, FCT_AP.CURRENT_DISCOUNT_AMOUNT, FCT_AP.CURRENT_CHECK_AMOUNT, FCT_AP.PO_NUMBER, FCT_AP.FISCAL_PERIOD_ID, TO_NUMBER(CASE WHEN (CASE WHEN (FCT_AP.GL_ACCOUNT IS NOT NULL) THEN FCT_AP.GL_ACCOUNT WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN '-1' ELSE "SUBSTRING"(FCT_AP.GL_ACCOUNT, 1, 2) END) AS CORPORATION_NUMBER, FCT_AP.ACCOUNT_ID, FCT_AP.ACCOUNT_NUMBER, FCT_AP.STORE_ID, FCT_AP.STORE_NUMBER, FCT_AP.DEPARTMENT_ID, FCT_AP.DEPARTMENT_NUMBER, FCT_AP.RECORD_SOURCE, FCT_AP.ACTIVE_FLAG From EBIDW.FIN.FCT_AP Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_AP.STORE_NUMBER WHERE (FCT_AP.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_AR_CURRENT(
	AR_VENDOR_ID,
	AR_VENDOR_NUMBER,
	VENDOR_ID,
	INVOICE_NUMBER,
	INVOICE_DAY_KEY,
	RECORD_SEQUENCE,
	AMOUNT,
	RECORD_TYPE,
	RECORD_DAY_KEY,
	INVOICE_PREFIX_ID,
	CORPORATION_ID,
	CORPORATION_NUMBER,
	STORE_ID,
	STORE_NUMBER,
	DEPARTMENT_ID,
	DEPARTMENT_NUMBER,
	ACCOUNT_ID,
	ACCOUNT_NUMBER,
	FISCAL_PERIOD_ID,
	CHECK_NUMBER,
	AR020_REPT_FLAG,
	JOURNAL_ENTRY_FLAG,
	IS_ADVANCED_RECORD_FLAG,
	TAPE_NUMBER,
	FUTURE_USE,
	RECORD_SOURCE,
	ACTIVE_FLAG
) as SELECT FCT_AR.AR_VENDOR_ID, FCT_AR.AR_VENDOR_NUMBER, FCT_AR.VENDOR_ID, FCT_AR.INVOICE_NUMBER, FCT_AR.INVOICE_DAY_KEY, FCT_AR.RECORD_SEQUENCE, FCT_AR.AMOUNT, FCT_AR.RECORD_TYPE, FCT_AR.RECORD_DAY_KEY, FCT_AR.INVOICE_PREFIX_ID, FCT_AR.CORPORATION_ID, FCT_AR.CORPORATION_NUMBER, FCT_AR.STORE_ID, FCT_AR.STORE_NUMBER, FCT_AR.DEPARTMENT_ID, FCT_AR.DEPARTMENT_NUMBER, FCT_AR.ACCOUNT_ID, FCT_AR.ACCOUNT_NUMBER, FCT_AR.FISCAL_PERIOD_ID, FCT_AR.CHECK_NUMBER, FCT_AR.AR020_REPT_FLAG, FCT_AR.JOURNAL_ENTRY_FLAG, FCT_AR.IS_ADVANCED_RECORD_FLAG, FCT_AR.TAPE_NUMBER, FCT_AR.FUTURE_USE, FCT_AR.RECORD_SOURCE, FCT_AR.ACTIVE_FLAG 
From EBIDW.FIN.FCT_AR FCT_AR
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_AR.STORE_NUMBER

WHERE (FCT_AR.DELETE_FLAG = 'f'::BOOLEAN)
;
create or replace view FCT_ASSOCIATE_TIME_AND_ATTENDANCE_CURRENT(
	FACT_ASSOCIATE_TIME_AND_ATTENDANCE_ID,
	SALES_STORE_ID,
	STORE_ID,
	RECORDNUMBER,
	WORKED_DEPARTMENT_ID,
	WORKED_DEPARTMENT_NUMBER,
	HOME_DEPARTMENT_ID,
	HOME_DEPARTMENT_NUMBER,
	WORKED_STORE_ID,
	WORKED_STORE_NUMBER,
	HOME_STORE_ID,
	HOME_STORE_NUMBER,
	DAY_KEY,
	FISCAL_DAY_ID,
	PAY_TYPE,
	START_TIME,
	RAW_START_TIME,
	RAW_STOP_TIME,
	STOP_TIME,
	ROUNDED_LBSHIFT,
	RAW_LBSHIFT,
	WEEKEND_DATE,
	UNIVERSAL_ID,
	CLOCK_ID,
	SHIFT_ID,
	TARGET_HOURS,
	TARGET_DOLLARS,
	DATE_TIME,
	SOURCE,
	IS_ACTIVE,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_ASSOCIATE_TIME_AND_ATTENDANCE.FACT_ASSOCIATE_TIME_AND_ATTENDANCE_ID, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.SALES_STORE_ID, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.STORE_ID, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.RECORDNUMBER, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.WORKED_DEPARTMENT_ID, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.WORKED_DEPARTMENT_NUMBER, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.HOME_DEPARTMENT_ID, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.HOME_DEPARTMENT_NUMBER, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.WORKED_STORE_ID, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.WORKED_STORE_NUMBER, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.HOME_STORE_ID, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.HOME_STORE_NUMBER, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.DAY_KEY, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.FISCAL_DAY_ID, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.PAY_TYPE, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.START_TIME, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.RAW_START_TIME, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.RAW_STOP_TIME, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.STOP_TIME, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.ROUNDED_LBSHIFT, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.RAW_LBSHIFT, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.WEEKEND_DATE, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.UNIVERSAL_ID, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.CLOCK_ID, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.SHIFT_ID, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.TARGET_HOURS, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.TARGET_DOLLARS, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.DATE_TIME, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.SOURCE, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.IS_ACTIVE, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.EXTRACT_DATE, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.SOURCE_TABLE_NAME, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.CREATE_DATE, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.MAINT_DATE, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.CREATE_UID, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.MAINT_UID, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.DELETE_FLAG, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.DELETE_DATE, FCT_ASSOCIATE_TIME_AND_ATTENDANCE.DELETE_UID From EBIDW.ADMIN.FCT_ASSOCIATE_TIME_AND_ATTENDANCE Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.STORE_ID=FCT_ASSOCIATE_TIME_AND_ATTENDANCE.STORE_ID ;
create or replace view FCT_BHN_DAILY_COMM_CURRENT(
	COMPANY_NAME,
	MERCHANT_ID,
	MERCHANT_NAME,
	STORE_ID,
	TERMINAL_ID,
	CLERK_ID,
	ACQUIRED_TRANSACTION_DATE,
	ACQUIRED_TRANSACTION_TIME,
	GIFT_CARD_NUMBER,
	PRODUCT_ID,
	PRODUCT_DESCRIPTION,
	POS_TRANSACTION_DATE,
	POS_TRANSACTION_TIME,
	TRANSACTION_TYPE,
	SYSTEM_TRACE_AUDIT_NUMBER,
	PRODUCT_ITEM_PRICE,
	CURRENCY_CODE,
	MERCHANT_TRANSACTION_ID_OR_REFERENCE_NUMBER,
	BHN_TRANSACTION_ID,
	AUTH_RESPONSE_CODE,
	APPROVAL_CODE,
	REVERSAL_SAF_CODE,
	TRANSACTION_AMOUNT,
	CONSUMER_FEE_AMOUNT,
	COMMISSION_AMOUNT,
	TOTAL_TAX_ON_TRANSACTION_AMOUNT,
	TOTAL_TAX_ON_COMMISSION_AMOUNT,
	TOTAL_TAX_ON_FEES_AMOUNT,
	NET_AMOUNT,
	ORDER_ID_SID,
	RELOADIT_PACK_NUMBER,
	TRANSACTION_GUID,
	TRANSACTION_CGUID,
	PHONE_NUMBER,
	SALES_TAX,
	DIGITAL_ACTIVATION_ACCOUNT_NUMBER,
	DIGITAL_REDEMPTION_ACCOUNT_NUMBER,
	PROXY_CARD_NUMBER,
	MESSAGE_REASON_CODE,
	GIFTCARD_TYPE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as
Select
S.COMPANY_NAME ,
S.MERCHANT_ID ,
S.MERCHANT_NAME ,
S.STORE_ID ,
S.TERMINAL_ID ,
S.CLERK_ID ,
S.ACQUIRED_TRANSACTION_DATE ,
S.ACQUIRED_TRANSACTION_TIME ,
S.GIFT_CARD_NUMBER ,
S.PRODUCT_ID ,
S.PRODUCT_DESCRIPTION ,
S.POS_TRANSACTION_DATE ,
S.POS_TRANSACTION_TIME ,
S.TRANSACTION_TYPE ,
S.SYSTEM_TRACE_AUDIT_NUMBER ,
S.PRODUCT_ITEM_PRICE ,
S.CURRENCY_CODE ,
S.MERCHANT_TRANSACTION_ID_OR_REFERENCE_NUMBER ,
S.BHN_TRANSACTION_ID ,
S.AUTH_RESPONSE_CODE ,
S.APPROVAL_CODE ,
S.REVERSAL_SAF_CODE ,
S.TRANSACTION_AMOUNT ,
S.CONSUMER_FEE_AMOUNT ,
S.COMMISSION_AMOUNT ,
S.TOTAL_TAX_ON_TRANSACTION_AMOUNT ,
S.TOTAL_TAX_ON_COMMISSION_AMOUNT ,
S.TOTAL_TAX_ON_FEES_AMOUNT ,
S.NET_AMOUNT ,
S.ORDER_ID_SID ,
S.RELOADIT_PACK_NUMBER ,
S.TRANSACTION_GUID ,
S.TRANSACTION_CGUID ,
S.PHONE_NUMBER ,
S.SALES_TAX ,
S.DIGITAL_ACTIVATION_ACCOUNT_NUMBER ,
S.DIGITAL_REDEMPTION_ACCOUNT_NUMBER ,
S.PROXY_CARD_NUMBER ,
S.MESSAGE_REASON_CODE ,
S.GIFTCARD_TYPE ,
S.ACTIVE_FLAG ,
S.EXTRACT_DATE ,
S.SOURCE_TABLE_NAME ,
S.CREATE_DATE ,
S.MAINT_DATE ,
S.CREATE_UID ,
S.MAINT_UID ,
S.DELETE_FLAG ,
S.DELETE_DATE ,
S.DELETE_UID
from EBIDW.Sales.FCT_BHN_DAILY_COMM AS S
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.STORE_ID=S.STORE_ID;
create or replace view FCT_BOTTLE_REDEMPTION_DETAIL_CURRENT(
	BOTTLE_REDEMPTION_DETAIL_ID,
	ORDER_ID,
	ORDER_NUMBER,
	ORDER_LINE_NUMBER,
	REDEMPTION_DATE,
	REDEMPTION_FISCAL_DAY_ID,
	ASSOCIATE_CASHIER_NUMBER,
	ASSOCIATE_CASHIER_ID,
	STORE_NUMBER,
	SALES_STORE_ID,
	STORE_ID,
	BOTTLE_ID,
	PLU_NUMBER,
	UPC_NUMBER,
	MERCH_ITEM_ID,
	ITEM_ID,
	BOTTLE_DESCRIPTION,
	BOTTLE_SIZE,
	BOTTLE_COLOR_NUMBER,
	BOTTLE_COLOR_ID,
	BOTTLE_TYPE_NUMBER,
	BOTTLE_TYPE_ID,
	QUANTITY,
	DEPOSIT_PER_BOTTLE,
	DEPOSIT_TOTAL,
	MANAGER_OVERRIDE,
	MANAGER_CASHIER_NUMBER,
	MANAGER_CASHIER_ID,
	DEPARTMENT_NUMBER,
	TERMINAL_NUMBER,
	VOID_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	CREATE_UID,
	MAINT_DATE,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_BOTTLE_REDEMPTION_DETAIL.BOTTLE_REDEMPTION_DETAIL_ID, FCT_BOTTLE_REDEMPTION_DETAIL.ORDER_ID, FCT_BOTTLE_REDEMPTION_DETAIL.ORDER_NUMBER, FCT_BOTTLE_REDEMPTION_DETAIL.ORDER_LINE_NUMBER, FCT_BOTTLE_REDEMPTION_DETAIL.REDEMPTION_DATE, FCT_BOTTLE_REDEMPTION_DETAIL.REDEMPTION_FISCAL_DAY_ID, FCT_BOTTLE_REDEMPTION_DETAIL.ASSOCIATE_CASHIER_NUMBER, FCT_BOTTLE_REDEMPTION_DETAIL.ASSOCIATE_CASHIER_ID, FCT_BOTTLE_REDEMPTION_DETAIL.STORE_NUMBER, FCT_BOTTLE_REDEMPTION_DETAIL.SALES_STORE_ID, FCT_BOTTLE_REDEMPTION_DETAIL.STORE_ID, FCT_BOTTLE_REDEMPTION_DETAIL.BOTTLE_ID, FCT_BOTTLE_REDEMPTION_DETAIL.PLU_NUMBER, FCT_BOTTLE_REDEMPTION_DETAIL.UPC_NUMBER, FCT_BOTTLE_REDEMPTION_DETAIL.MERCH_ITEM_ID, FCT_BOTTLE_REDEMPTION_DETAIL.ITEM_ID, FCT_BOTTLE_REDEMPTION_DETAIL.BOTTLE_DESCRIPTION, FCT_BOTTLE_REDEMPTION_DETAIL.BOTTLE_SIZE, FCT_BOTTLE_REDEMPTION_DETAIL.BOTTLE_COLOR_NUMBER, FCT_BOTTLE_REDEMPTION_DETAIL.BOTTLE_COLOR_ID, FCT_BOTTLE_REDEMPTION_DETAIL.BOTTLE_TYPE_NUMBER, FCT_BOTTLE_REDEMPTION_DETAIL.BOTTLE_TYPE_ID, FCT_BOTTLE_REDEMPTION_DETAIL.QUANTITY, FCT_BOTTLE_REDEMPTION_DETAIL.DEPOSIT_PER_BOTTLE, FCT_BOTTLE_REDEMPTION_DETAIL.DEPOSIT_TOTAL, FCT_BOTTLE_REDEMPTION_DETAIL.MANAGER_OVERRIDE, FCT_BOTTLE_REDEMPTION_DETAIL.MANAGER_CASHIER_NUMBER, FCT_BOTTLE_REDEMPTION_DETAIL.MANAGER_CASHIER_ID, FCT_BOTTLE_REDEMPTION_DETAIL.DEPARTMENT_NUMBER, FCT_BOTTLE_REDEMPTION_DETAIL.TERMINAL_NUMBER, FCT_BOTTLE_REDEMPTION_DETAIL.VOID_FLAG, FCT_BOTTLE_REDEMPTION_DETAIL.EXTRACT_DATE, FCT_BOTTLE_REDEMPTION_DETAIL.SOURCE_TABLE_NAME, FCT_BOTTLE_REDEMPTION_DETAIL.CREATE_DATE, FCT_BOTTLE_REDEMPTION_DETAIL.CREATE_UID, FCT_BOTTLE_REDEMPTION_DETAIL.MAINT_DATE, FCT_BOTTLE_REDEMPTION_DETAIL.MAINT_UID, FCT_BOTTLE_REDEMPTION_DETAIL.DELETE_FLAG, FCT_BOTTLE_REDEMPTION_DETAIL.DELETE_DATE, FCT_BOTTLE_REDEMPTION_DETAIL.DELETE_UID From EBIDW.BOTTLEREDEMPTION.FCT_BOTTLE_REDEMPTION_DETAIL Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_BOTTLE_REDEMPTION_DETAIL.STORE_NUMBER WHERE (FCT_BOTTLE_REDEMPTION_DETAIL.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_CAO_ORDER_ADJUSTMENT_CURRENT(
	CAO_ORDER_ADJUSTMENT_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	ORDER_DUE_DATE,
	SUPPLIER_NUMBER,
	ORDER_NUMBER,
	ITEMS_ORDERED,
	MANUAL_ADJUSTMENTS,
	CUTS_QUANTITY,
	ADDS_QUANTITY,
	BUSINESS_DATE,
	BUSINESS_DATE_FISCAL_DAY_ID,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_CAO_ORDER_ADJUSTMENT.CAO_ORDER_ADJUSTMENT_ID, FCT_CAO_ORDER_ADJUSTMENT.STORE_ID, FCT_CAO_ORDER_ADJUSTMENT.SALES_STORE_ID, FCT_CAO_ORDER_ADJUSTMENT.STORE_NUMBER, FCT_CAO_ORDER_ADJUSTMENT.ORDER_DUE_DATE, FCT_CAO_ORDER_ADJUSTMENT.SUPPLIER_NUMBER, FCT_CAO_ORDER_ADJUSTMENT.ORDER_NUMBER, FCT_CAO_ORDER_ADJUSTMENT.ITEMS_ORDERED, FCT_CAO_ORDER_ADJUSTMENT.MANUAL_ADJUSTMENTS, FCT_CAO_ORDER_ADJUSTMENT.CUTS_QUANTITY, FCT_CAO_ORDER_ADJUSTMENT.ADDS_QUANTITY, FCT_CAO_ORDER_ADJUSTMENT.BUSINESS_DATE, FCT_CAO_ORDER_ADJUSTMENT.BUSINESS_DATE_FISCAL_DAY_ID, FCT_CAO_ORDER_ADJUSTMENT.ACTIVE_FLAG, FCT_CAO_ORDER_ADJUSTMENT.EXTRACT_DATE, FCT_CAO_ORDER_ADJUSTMENT.SOURCE_TABLE_NAME, FCT_CAO_ORDER_ADJUSTMENT.CREATE_DATE, FCT_CAO_ORDER_ADJUSTMENT.MAINT_DATE, FCT_CAO_ORDER_ADJUSTMENT.CREATE_UID, FCT_CAO_ORDER_ADJUSTMENT.MAINT_UID, FCT_CAO_ORDER_ADJUSTMENT.DELETE_FLAG, FCT_CAO_ORDER_ADJUSTMENT.DELETE_DATE, FCT_CAO_ORDER_ADJUSTMENT.DELETE_UID From EBIDW.PI.FCT_CAO_ORDER_ADJUSTMENT Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_CAO_ORDER_ADJUSTMENT.STORE_NUMBER;
create or replace view FCT_CASH_AND_SALES_CURRENT(
	SALES_STORE_ID,
	STORE_ID,
	SALES_ACCOUNT_ID,
	NCSIACCOUNTMASTERID,
	NCSSTOREID,
	NCSIACCOUNTID,
	NCSIUSERID,
	ADJUSTED_FLAG,
	FEED_FLAG,
	RECEIPT_PAID_OUT,
	ENTERED_FOR_DAY_KEY,
	ENTERED_FOR_FISCAL_DAY_ID,
	ENTERED_ON_DAY_KEY,
	ENTERED_ON_FISCAL_DAY_ID,
	AMOUNT,
	ACTIVE_FLAG
) as SELECT S.SALES_STORE_ID, S.STORE_ID, S.SALES_ACCOUNT_ID, S."NCSIACCOUNTMASTERID", S."NCSSTOREID", S."NCSIACCOUNTID", S."NCSIUSERID", S.ADJUSTED_FLAG, S.FEED_FLAG, S.RECEIPT_PAID_OUT, S.ENTERED_FOR_DAY_KEY, S.ENTERED_FOR_FISCAL_DAY_ID, S.ENTERED_ON_DAY_KEY, S.ENTERED_ON_FISCAL_DAY_ID, S.AMOUNT, S.ACTIVE_FLAG From EBIDW.SALES.FCT_CASH_AND_SALES S  Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=S.STORE_NUMBER WHERE (S.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_CENTRAL_FILL_INVOICE_CURRENT(
	CENTRAL_FILL_INVOICE_ID,
	CHECK_OUT_FISCAL_DAY_ID,
	CHECK_OUT_DATE,
	CF_STORE_ID,
	CF_SALES_STORE_ID,
	CF_STORE_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	INVOICE_ID,
	INVOICE_NUMBER,
	INVOICE_LINE_NUMBER,
	ITEM_KEY,
	PULLED_BACK_FLAG,
	CHECKED_IN_FLAG,
	CHECK_IN_FISCAL_DAY_ID,
	CHECK_IN_DATE,
	RX_NUMBER,
	REFILL_NUMBER,
	RX_CATALOG_ID,
	RX_ITEM_CATALOG_ID,
	NDC_NUMBER,
	PRODUCT_NAME,
	DISPENSED_QUANTITY,
	UNIT_COST,
	EXTENDED_COST,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_CENTRAL_FILL_INVOICE.CENTRAL_FILL_INVOICE_ID, FCT_CENTRAL_FILL_INVOICE.CHECK_OUT_FISCAL_DAY_ID, FCT_CENTRAL_FILL_INVOICE.CHECK_OUT_DATE, FCT_CENTRAL_FILL_INVOICE.CF_STORE_ID, FCT_CENTRAL_FILL_INVOICE.CF_SALES_STORE_ID, FCT_CENTRAL_FILL_INVOICE.CF_STORE_NUMBER, FCT_CENTRAL_FILL_INVOICE.STORE_ID, FCT_CENTRAL_FILL_INVOICE.SALES_STORE_ID, FCT_CENTRAL_FILL_INVOICE.STORE_NUMBER, FCT_CENTRAL_FILL_INVOICE.INVOICE_ID, FCT_CENTRAL_FILL_INVOICE.INVOICE_NUMBER, FCT_CENTRAL_FILL_INVOICE.INVOICE_LINE_NUMBER, FCT_CENTRAL_FILL_INVOICE.ITEM_KEY, FCT_CENTRAL_FILL_INVOICE.PULLED_BACK_FLAG, FCT_CENTRAL_FILL_INVOICE.CHECKED_IN_FLAG, FCT_CENTRAL_FILL_INVOICE.CHECK_IN_FISCAL_DAY_ID, FCT_CENTRAL_FILL_INVOICE.CHECK_IN_DATE, FCT_CENTRAL_FILL_INVOICE.RX_NUMBER, FCT_CENTRAL_FILL_INVOICE.REFILL_NUMBER, FCT_CENTRAL_FILL_INVOICE.RX_CATALOG_ID, FCT_CENTRAL_FILL_INVOICE.RX_ITEM_CATALOG_ID, FCT_CENTRAL_FILL_INVOICE.NDC_NUMBER, FCT_CENTRAL_FILL_INVOICE.PRODUCT_NAME, FCT_CENTRAL_FILL_INVOICE.DISPENSED_QUANTITY, FCT_CENTRAL_FILL_INVOICE.UNIT_COST, FCT_CENTRAL_FILL_INVOICE.EXTENDED_COST, FCT_CENTRAL_FILL_INVOICE.ACTIVE_FLAG, FCT_CENTRAL_FILL_INVOICE.EXTRACT_DATE, FCT_CENTRAL_FILL_INVOICE.SOURCE_TABLE_NAME, FCT_CENTRAL_FILL_INVOICE.CREATE_DATE, FCT_CENTRAL_FILL_INVOICE.MAINT_DATE, FCT_CENTRAL_FILL_INVOICE.CREATE_UID, FCT_CENTRAL_FILL_INVOICE.MAINT_UID, FCT_CENTRAL_FILL_INVOICE.DELETE_FLAG, FCT_CENTRAL_FILL_INVOICE.DELETE_DATE, FCT_CENTRAL_FILL_INVOICE.DELETE_UID From EBIDW.RX.FCT_CENTRAL_FILL_INVOICE Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_CENTRAL_FILL_INVOICE.STORE_NUMBER WHERE (FCT_CENTRAL_FILL_INVOICE.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_CONSUMER_FEEDBACK_CURRENT(
	CONSUMER_FEEDBACK_ID,
	INSTACART_ORDER_ID,
	INSTACART_ORDER_NUMBER,
	INSTACART_DELIVERY_ID,
	INSTACART_DELIVERY_NUMBER,
	TOTAL_LIFETIME_ORDERS,
	RATING_VALUE,
	RATING_COMMENTS,
	STORE_ID,
	SALES_STORE_NUMBER,
	INSTACART_REGION_CODE,
	INSTACART_REGION_NAME,
	INSTACART_ZONE_CODE,
	INSTACART_ZONE_NAME
) as
SELECT	 S.CONSUMER_FEEDBACK_ID
		,S.INSTACART_ORDER_ID
		,S.INSTACART_ORDER_NUMBER
		,S.INSTACART_DELIVERY_ID
		,S.INSTACART_DELIVERY_NUMBER
		,S.TOTAL_LIFETIME_ORDERS
		,S.RATING_VALUE
		,S.RATING_COMMENTS
		,S.STORE_ID
		,S.SALES_STORE_NUMBER
		,S.INSTACART_REGION_CODE
		,S.INSTACART_REGION_NAME
		,S.INSTACART_ZONE_CODE
		,S.INSTACART_ZONE_NAME
FROM EBIDW.INSTACART.FCT_CONSUMER_FEEDBACK AS S
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=S.SALES_STORE_NUMBER
WHERE ACTIVE_FLAG = TRUE;
create or replace view FCT_COUNT_CURRENT(
	COUNT_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	COUNT_ID,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	DESCRIPTION,
	CYCLE_COUNT_FLAG,
	BLIND_COUNT_FLAG,
	RECOUNT_FLAG,
	THIRD_PARTY_COUNT_FLAG,
	RECOUNT_ID,
	VOIDED_FLAG,
	VOID_USER_ID,
	VOID_TIMESTAMP,
	COUNT_INITIATED_BY,
	INITIAL_TIMESTAMP,
	INITIAL_FISCAL_DAY_ID,
	COUNT_FINALIZED_BY,
	FINAL_TIMESTAMP,
	FINAL_FISCAL_DAY_ID,
	LOAD_TIMESTAMP,
	UPDATE_TIMESTAMP,
	LINE_NUMBER,
	EXTRACT_FILE_NAME,
	EXTRACT_FILE_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_COUNT.COUNT_HEADER_ID, FCT_COUNT.DIVISION_NUMBER, FCT_COUNT.STORE_ID, FCT_COUNT.SALES_STORE_ID, FCT_COUNT.STORE_NUMBER, FCT_COUNT.COUNT_ID, FCT_COUNT.BUSINESS_FISCAL_DAY_ID, FCT_COUNT.BUSINESS_DATE, FCT_COUNT."DESCRIPTION", FCT_COUNT.CYCLE_COUNT_FLAG, FCT_COUNT.BLIND_COUNT_FLAG, FCT_COUNT.RECOUNT_FLAG, FCT_COUNT.THIRD_PARTY_COUNT_FLAG, FCT_COUNT.RECOUNT_ID, FCT_COUNT.VOIDED_FLAG, FCT_COUNT.VOID_USER_ID, FCT_COUNT.VOID_TIMESTAMP, FCT_COUNT.COUNT_INITIATED_BY, FCT_COUNT.INITIAL_TIMESTAMP, FCT_COUNT.INITIAL_FISCAL_DAY_ID, FCT_COUNT.COUNT_FINALIZED_BY, FCT_COUNT.FINAL_TIMESTAMP, FCT_COUNT.FINAL_FISCAL_DAY_ID, FCT_COUNT.LOAD_TIMESTAMP, FCT_COUNT.UPDATE_TIMESTAMP, FCT_COUNT.LINE_NUMBER, FCT_COUNT.EXTRACT_FILE_NAME, FCT_COUNT.EXTRACT_FILE_ID, FCT_COUNT.EXTRACT_DATE, FCT_COUNT.SOURCE_TABLE_NAME, FCT_COUNT.CREATE_DATE, FCT_COUNT.MAINT_DATE, FCT_COUNT.CREATE_UID, FCT_COUNT.MAINT_UID, FCT_COUNT.DELETE_FLAG, FCT_COUNT.DELETE_DATE, FCT_COUNT.DELETE_UID From EBIDW.PI.FCT_COUNT Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_COUNT.STORE_NUMBER WHERE (FCT_COUNT.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_COUNT_DETAIL_CURRENT(
	COUNT_DETAIL_ID,
	COUNT_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	COUNT_ID,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	SEQUENCE_NUMBER,
	PRIMARY_ITEM_ID,
	PRIMARY_MERCH_ITEM_ID,
	PRIMARY_UPC,
	ACTUAL_ITEM_ID,
	ACTUAL_MERCH_ITEM_ID,
	ACTUAL_UPC,
	BACKROOM_COUNTED_FLAG,
	SALES_FLOOR_COUNTED_FLAG,
	ADJUSTED_FLAG,
	PI_COUNT_FLAG,
	SET_PERPETUAL_FLAG,
	SET_AUTO_REORDER_FLAG,
	SHELF_CAPACITY,
	BACKROOM_QUANTITY,
	SALES_FLOOR_QUANTITY,
	QUANTITY_ON_HAND,
	COST_ADJUSTMENT,
	RETAIL_ADJUSTMENT,
	SALES_DEPARTMENT_ID,
	SALES_DEPARTMENT_NUMBER,
	SUB_DEPARTMENT_ID,
	SUB_DEPARTMENT_NUMBER,
	VENDOR_ID,
	AP_VENDOR_ID,
	SUPPLIER_NUMBER,
	DESCRIPTION,
	USER_ID,
	COUNT_TIMESTAMP,
	COUNT_FISCAL_DAY_ID,
	EXTENDED_QUANTITY,
	LOAD_TIMESTAMP,
	UPDATE_TIMESTAMP,
	PI_STATUS_CODE,
	PI_ORIGINAL_XREF,
	PI_ORIGINAL_STORE_NUMBER,
	PI_ORIGINAL_BUSINESS_DATE,
	PI_ORIGINAL_COUNT_ID,
	PI_ORIGINAL_SEQUENCE_NUMBER,
	PI_LAST_EDIT_ID,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	EXTRACT_FILE_NAME,
	EXTRACT_FILE_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_COUNT_DETAIL.COUNT_DETAIL_ID, FCT_COUNT_DETAIL.COUNT_HEADER_ID, FCT_COUNT_DETAIL.DIVISION_NUMBER, FCT_COUNT_DETAIL.STORE_ID, FCT_COUNT_DETAIL.SALES_STORE_ID, FCT_COUNT_DETAIL.STORE_NUMBER, FCT_COUNT_DETAIL.COUNT_ID, FCT_COUNT_DETAIL.BUSINESS_FISCAL_DAY_ID, FCT_COUNT_DETAIL.BUSINESS_DATE, FCT_COUNT_DETAIL.SEQUENCE_NUMBER, FCT_COUNT_DETAIL.PRIMARY_ITEM_ID, FCT_COUNT_DETAIL.PRIMARY_MERCH_ITEM_ID, FCT_COUNT_DETAIL.PRIMARY_UPC, FCT_COUNT_DETAIL.ACTUAL_ITEM_ID, FCT_COUNT_DETAIL.ACTUAL_MERCH_ITEM_ID, FCT_COUNT_DETAIL.ACTUAL_UPC, FCT_COUNT_DETAIL.BACKROOM_COUNTED_FLAG, FCT_COUNT_DETAIL.SALES_FLOOR_COUNTED_FLAG, FCT_COUNT_DETAIL.ADJUSTED_FLAG, FCT_COUNT_DETAIL.PI_COUNT_FLAG, FCT_COUNT_DETAIL.SET_PERPETUAL_FLAG, FCT_COUNT_DETAIL.SET_AUTO_REORDER_FLAG, FCT_COUNT_DETAIL.SHELF_CAPACITY, FCT_COUNT_DETAIL.BACKROOM_QUANTITY, FCT_COUNT_DETAIL.SALES_FLOOR_QUANTITY, FCT_COUNT_DETAIL.QUANTITY_ON_HAND, FCT_COUNT_DETAIL.COST_ADJUSTMENT, FCT_COUNT_DETAIL.RETAIL_ADJUSTMENT, FCT_COUNT_DETAIL.SALES_DEPARTMENT_ID, FCT_COUNT_DETAIL.SALES_DEPARTMENT_NUMBER, FCT_COUNT_DETAIL.SUB_DEPARTMENT_ID, FCT_COUNT_DETAIL.SUB_DEPARTMENT_NUMBER, FCT_COUNT_DETAIL.VENDOR_ID, FCT_COUNT_DETAIL.AP_VENDOR_ID, FCT_COUNT_DETAIL.SUPPLIER_NUMBER, FCT_COUNT_DETAIL."DESCRIPTION", FCT_COUNT_DETAIL.USER_ID, FCT_COUNT_DETAIL.COUNT_TIMESTAMP, FCT_COUNT_DETAIL.COUNT_FISCAL_DAY_ID, (FCT_COUNT_DETAIL.BACKROOM_QUANTITY + FCT_COUNT_DETAIL.SALES_FLOOR_QUANTITY) AS EXTENDED_QUANTITY, FCT_COUNT_DETAIL.LOAD_TIMESTAMP, FCT_COUNT_DETAIL.UPDATE_TIMESTAMP, FCT_COUNT_DETAIL.PI_STATUS_CODE, FCT_COUNT_DETAIL.PI_ORIGINAL_XREF, CASE WHEN (CASE WHEN (FCT_COUNT_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_COUNT_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_COUNT_DETAIL.STORE_NUMBER ELSE TO_NUMBER("SUBSTRING"(FCT_COUNT_DETAIL.PI_ORIGINAL_XREF, 1, 3)) END AS PI_ORIGINAL_STORE_NUMBER, CASE WHEN (CASE WHEN (FCT_COUNT_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_COUNT_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_COUNT_DETAIL.BUSINESS_DATE ELSE (TO_DATE("SUBSTRING"(FCT_COUNT_DETAIL.PI_ORIGINAL_XREF, 5, 10), 'MM-DD-YYYY')) END AS PI_ORIGINAL_BUSINESS_DATE, CASE WHEN (CASE WHEN (FCT_COUNT_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_COUNT_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_COUNT_DETAIL.COUNT_ID ELSE TO_NUMBER("SUBSTRING"(FCT_COUNT_DETAIL.PI_ORIGINAL_XREF, 16, 10)) END AS PI_ORIGINAL_COUNT_ID, CASE WHEN (CASE WHEN (FCT_COUNT_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_COUNT_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_COUNT_DETAIL.SEQUENCE_NUMBER ELSE TO_NUMBER("SUBSTRING"(FCT_COUNT_DETAIL.PI_ORIGINAL_XREF, 27, 10)) END AS PI_ORIGINAL_SEQUENCE_NUMBER, FCT_COUNT_DETAIL.PI_LAST_EDIT_ID, FCT_COUNT_DETAIL.LINE_NUMBER, FCT_COUNT_DETAIL.MASTER_LINE_NUMBER, FCT_COUNT_DETAIL.EXTRACT_FILE_NAME, FCT_COUNT_DETAIL.EXTRACT_FILE_ID, FCT_COUNT_DETAIL.EXTRACT_DATE, FCT_COUNT_DETAIL.SOURCE_TABLE_NAME, FCT_COUNT_DETAIL.CREATE_DATE, FCT_COUNT_DETAIL.MAINT_DATE, FCT_COUNT_DETAIL.CREATE_UID, FCT_COUNT_DETAIL.MAINT_UID, FCT_COUNT_DETAIL.DELETE_FLAG, FCT_COUNT_DETAIL.DELETE_DATE, FCT_COUNT_DETAIL.DELETE_UID From EBIDW.PI.FCT_COUNT_DETAIL  Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_COUNT_DETAIL.STORE_NUMBER WHERE (NOT ((FCT_COUNT_DETAIL.DELETE_FLAG = 't'::BOOLEAN) AND (FCT_COUNT_DETAIL.DELETE_UID = 'RGIS_SBT')));
create or replace view FCT_COUPON_DETAIL_CURRENT(
	COUPON_DETAIL_ID,
	ORDER_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	TRANSACTION_DATE,
	TRANSCATION_FISCAL_DAY_ID,
	ORDER_NUMBER,
	ORDER_LINE_NUMBER,
	COUPON_CODE,
	PROMOTION_ID,
	CLU_CODE,
	TRANSACTION_TIME,
	COUPON_DESCRIPTION,
	QUANTITY,
	SCALE_ITEM_CODE,
	COUPON_AMOUNT,
	PRICE_FROM_INVENTORY_DB,
	ADVANTEDGE_DISCOUNT_AMOUNT,
	GOLUB_SUPPORT_AMOUNT,
	M_SUPPORT_AMOUNT,
	ENTRY_TYPE,
	TERMINAL_NUMBER,
	EASY_SCAN_RECORD,
	RECALLED_ITEM,
	SPECIAL_ITEM_CODE_1,
	SPECIAL_ITEM_CODE_2,
	SPECIAL_ITEM_CODE_3,
	SPECIAL_ITEM_CODE_4,
	SPECIAL_ITEM_CODE_5,
	SPECIAL_ITEM_CODE_6,
	SPECIAL_ITEM_CODE_7,
	TAX_LEVEL_FLAG,
	CASHIER_NUMBER,
	MANAGER_NUMBER,
	POS_DEPARTMENT_ID,
	POS_DEPARTMENT_NUMBER,
	SPLIT_PRICE_FRACTION,
	ADVANTEDGE_COUPON_FLAG,
	SCALE_COUPON_FLAG,
	SALES_DIRECTION_MULTIPLIER,
	EXTENDED_QUANTITY,
	EXTENDED_COUPON_AMOUNT,
	EXTENDED_ADVANTEDGE_AMOUNT,
	EXTENDED_GOLUB_SUPPORT_AMOUNT,
	EXTENDED_M_SUPPORT_AMOUNT,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	JOURNAL_FILE_NAME,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_COUPON_DETAIL.COUPON_DETAIL_ID, FCT_COUPON_DETAIL.ORDER_HEADER_ID, FCT_COUPON_DETAIL.DIVISION_NUMBER, FCT_COUPON_DETAIL.STORE_ID, FCT_COUPON_DETAIL.SALES_STORE_ID, FCT_COUPON_DETAIL.STORE_NUMBER, FCT_COUPON_DETAIL.BUSINESS_DATE, FCT_COUPON_DETAIL.BUSINESS_FISCAL_DAY_ID, FCT_COUPON_DETAIL.TRANSACTION_DATE, FCT_COUPON_DETAIL.TRANSCATION_FISCAL_DAY_ID, FCT_COUPON_DETAIL.ORDER_NUMBER, FCT_COUPON_DETAIL.ORDER_LINE_NUMBER, FCT_COUPON_DETAIL.COUPON_CODE, FCT_COUPON_DETAIL.PROMOTION_ID, FCT_COUPON_DETAIL.CLU_CODE, FCT_COUPON_DETAIL.TRANSACTION_TIME, TRIM(FCT_COUPON_DETAIL.COUPON_DESCRIPTION) COUPON_DESCRIPTION, FCT_COUPON_DETAIL.QUANTITY, FCT_COUPON_DETAIL.SCALE_ITEM_CODE, FCT_COUPON_DETAIL.COUPON_AMOUNT, FCT_COUPON_DETAIL.PRICE_FROM_INVENTORY_DB, FCT_COUPON_DETAIL.ADVANTEDGE_DISCOUNT_AMOUNT, FCT_COUPON_DETAIL.GOLUB_SUPPORT_AMOUNT, FCT_COUPON_DETAIL.M_SUPPORT_AMOUNT, FCT_COUPON_DETAIL.ENTRY_TYPE, FCT_COUPON_DETAIL.TERMINAL_NUMBER, FCT_COUPON_DETAIL.EASY_SCAN_RECORD, FCT_COUPON_DETAIL.RECALLED_ITEM, FCT_COUPON_DETAIL.SPECIAL_ITEM_CODE_1, FCT_COUPON_DETAIL.SPECIAL_ITEM_CODE_2, FCT_COUPON_DETAIL.SPECIAL_ITEM_CODE_3, FCT_COUPON_DETAIL.SPECIAL_ITEM_CODE_4, FCT_COUPON_DETAIL.SPECIAL_ITEM_CODE_5, FCT_COUPON_DETAIL.SPECIAL_ITEM_CODE_6, FCT_COUPON_DETAIL.SPECIAL_ITEM_CODE_7, FCT_COUPON_DETAIL.TAX_LEVEL_FLAG, FCT_COUPON_DETAIL.CASHIER_NUMBER, FCT_COUPON_DETAIL.MANAGER_NUMBER, FCT_COUPON_DETAIL.POS_DEPARTMENT_ID, FCT_COUPON_DETAIL.POS_DEPARTMENT_NUMBER, FCT_COUPON_DETAIL.SPLIT_PRICE_FRACTION, FCT_COUPON_DETAIL.ADVANTEDGE_COUPON_FLAG, FCT_COUPON_DETAIL.SCALE_COUPON_FLAG, FCT_COUPON_DETAIL.SALES_DIRECTION_MULTIPLIER, (FCT_COUPON_DETAIL.QUANTITY * TO_NUMBER(FCT_COUPON_DETAIL.SALES_DIRECTION_MULTIPLIER)) AS EXTENDED_QUANTITY, (FCT_COUPON_DETAIL.COUPON_AMOUNT * TO_NUMBER(FCT_COUPON_DETAIL.SALES_DIRECTION_MULTIPLIER)) AS EXTENDED_COUPON_AMOUNT, (FCT_COUPON_DETAIL.ADVANTEDGE_DISCOUNT_AMOUNT * TO_NUMBER(FCT_COUPON_DETAIL.SALES_DIRECTION_MULTIPLIER)) AS EXTENDED_ADVANTEDGE_AMOUNT, (FCT_COUPON_DETAIL.GOLUB_SUPPORT_AMOUNT * TO_NUMBER(FCT_COUPON_DETAIL.SALES_DIRECTION_MULTIPLIER)) AS EXTENDED_GOLUB_SUPPORT_AMOUNT, (FCT_COUPON_DETAIL.M_SUPPORT_AMOUNT * TO_NUMBER(FCT_COUPON_DETAIL.SALES_DIRECTION_MULTIPLIER)) AS EXTENDED_M_SUPPORT_AMOUNT, FCT_COUPON_DETAIL.LINE_NUMBER, FCT_COUPON_DETAIL.MASTER_LINE_NUMBER, FCT_COUPON_DETAIL.JOURNAL_FILE_NAME, FCT_COUPON_DETAIL.EXTRACT_DATE, FCT_COUPON_DETAIL.SOURCE_TABLE_NAME, FCT_COUPON_DETAIL.CREATE_DATE, FCT_COUPON_DETAIL.MAINT_DATE, FCT_COUPON_DETAIL.CREATE_UID, FCT_COUPON_DETAIL.MAINT_UID, FCT_COUPON_DETAIL.DELETE_FLAG, FCT_COUPON_DETAIL.DELETE_DATE, FCT_COUPON_DETAIL.DELETE_UID From EBIDW.POS.FCT_COUPON_DETAIL Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_COUPON_DETAIL.STORE_NUMBER WHERE (FCT_COUPON_DETAIL.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_DAILY_SALES_CURRENT(
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	ENTERED_FOR_DAY_KEY,
	ENTERED_FOR_FISCAL_DAY_ID,
	HAS_DATA_FLAG,
	FEED_FLAG,
	ADJUSTED_FLAG,
	CUSTOMER_COUNT,
	ROLLING_AVERAGE_DAYS,
	ROLLING_AVERAGE_AMOUNT,
	TOTAL_AMOUNT,
	VARIANCE_FROM_AVERAGE,
	ACTIVE_FLAG
) as SELECT CASE WHEN (FCT_DAILY_SALES.STORE_ID = 647) THEN 315 ELSE FCT_DAILY_SALES.STORE_ID END AS STORE_ID, CASE WHEN (FCT_DAILY_SALES.SALES_STORE_ID = 39243) THEN 4025 ELSE FCT_DAILY_SALES.SALES_STORE_ID END AS SALES_STORE_ID, CASE WHEN (FCT_DAILY_SALES.STORE_NUMBER = 8) THEN 184 ELSE FCT_DAILY_SALES.STORE_NUMBER END AS STORE_NUMBER, FCT_DAILY_SALES.ENTERED_FOR_DAY_KEY, FCT_DAILY_SALES.ENTERED_FOR_FISCAL_DAY_ID, FCT_DAILY_SALES.HAS_DATA_FLAG, FCT_DAILY_SALES.FEED_FLAG, FCT_DAILY_SALES.ADJUSTED_FLAG, FCT_DAILY_SALES.CUSTOMER_COUNT, FCT_DAILY_SALES.ROLLING_AVERAGE_DAYS, FCT_DAILY_SALES.ROLLING_AVERAGE_AMOUNT, FCT_DAILY_SALES.TOTAL_AMOUNT, FCT_DAILY_SALES.VARIANCE_FROM_AVERAGE, FCT_DAILY_SALES.ACTIVE_FLAG From EBIDW.SALES.FCT_DAILY_SALES Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_DAILY_SALES.STORE_NUMBER WHERE ((FCT_DAILY_SALES.DELETE_FLAG = 'f'::BOOLEAN)) ;
create or replace view FCT_DIGITAL_COUPON_DETAIL_CURRENT(
	DIGITAL_COUPON_DETAIL_ID,
	COUPON_ID,
	ORDER_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	TRANSACTION_DATE,
	TRANSCATION_FISCAL_DAY_ID,
	TRANSACTION_CODE,
	ORDER_NUMBER,
	ORDER_LINE_NUMBER,
	TRANSACTION_TIME,
	CAMPAIGN_ID,
	AMOUNT_OF_REDEMPTION,
	OFFER_TYPE,
	UPC_CODE_LIST,
	REJECTION_REASON_CODE,
	REJECTION_REASON_DESCRIPTION,
	LOAD_TIMESTAMP,
	UPDATE_TIMESTAMP,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	JOURNAL_FILE_NAME,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	CREATE_UID,
	MAINT_UID,
	MAINT_DATE,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_DIGITAL_COUPON_DETAIL.DIGITAL_COUPON_DETAIL_ID, FCT_DIGITAL_COUPON_DETAIL.COUPON_ID, FCT_DIGITAL_COUPON_DETAIL.ORDER_HEADER_ID, FCT_DIGITAL_COUPON_DETAIL.DIVISION_NUMBER, FCT_DIGITAL_COUPON_DETAIL.STORE_ID, FCT_DIGITAL_COUPON_DETAIL.SALES_STORE_ID, FCT_DIGITAL_COUPON_DETAIL.STORE_NUMBER, FCT_DIGITAL_COUPON_DETAIL.BUSINESS_DATE, FCT_DIGITAL_COUPON_DETAIL.BUSINESS_FISCAL_DAY_ID, FCT_DIGITAL_COUPON_DETAIL.TRANSACTION_DATE, FCT_DIGITAL_COUPON_DETAIL.TRANSCATION_FISCAL_DAY_ID, FCT_DIGITAL_COUPON_DETAIL.TRANSACTION_CODE, FCT_DIGITAL_COUPON_DETAIL.ORDER_NUMBER, FCT_DIGITAL_COUPON_DETAIL.ORDER_LINE_NUMBER, FCT_DIGITAL_COUPON_DETAIL.TRANSACTION_TIME, FCT_DIGITAL_COUPON_DETAIL.CAMPAIGN_ID, FCT_DIGITAL_COUPON_DETAIL.AMOUNT_OF_REDEMPTION, FCT_DIGITAL_COUPON_DETAIL.OFFER_TYPE, FCT_DIGITAL_COUPON_DETAIL.UPC_CODE_LIST, FCT_DIGITAL_COUPON_DETAIL.REJECTION_REASON_CODE, FCT_DIGITAL_COUPON_DETAIL.REJECTION_REASON_DESCRIPTION, FCT_DIGITAL_COUPON_DETAIL.LOAD_TIMESTAMP, FCT_DIGITAL_COUPON_DETAIL.UPDATE_TIMESTAMP, FCT_DIGITAL_COUPON_DETAIL.LINE_NUMBER, FCT_DIGITAL_COUPON_DETAIL.MASTER_LINE_NUMBER, FCT_DIGITAL_COUPON_DETAIL.JOURNAL_FILE_NAME, FCT_DIGITAL_COUPON_DETAIL.EXTRACT_DATE, FCT_DIGITAL_COUPON_DETAIL.SOURCE_TABLE_NAME, FCT_DIGITAL_COUPON_DETAIL.CREATE_DATE, FCT_DIGITAL_COUPON_DETAIL.CREATE_UID, FCT_DIGITAL_COUPON_DETAIL.MAINT_UID, FCT_DIGITAL_COUPON_DETAIL.MAINT_DATE, FCT_DIGITAL_COUPON_DETAIL.DELETE_FLAG, FCT_DIGITAL_COUPON_DETAIL.DELETE_DATE, FCT_DIGITAL_COUPON_DETAIL.DELETE_UID From EBIDW.POS.FCT_DIGITAL_COUPON_DETAIL Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER= FCT_DIGITAL_COUPON_DETAIL.STORE_NUMBER;
create or replace view FCT_DSD_CURRENT(
	ITEM_ID,
	MERCH_ITEM_ID,
	UPC_NUMBER,
	DSDSTORENUMBER,
	STORE_ID,
	SALES_STORE_ID,
	DATE_ENTERED_KEY,
	DATE_ENTERED_FISCAL_DAY_ID,
	DATE_ENTERED,
	QUANTITY,
	RETAIL_AMOUNT,
	CASE_COST,
	RETURN_QUANTITY,
	VENDOR_NUMBER,
	TICKET,
	VENDOR_PROD,
	PACK,
	SALES_DEPARTMENT_ID,
	DSDSALES_DEPARTMENT_NAME,
	COST_DIFFERENCE,
	PRODTYPE,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID,
	EXTENDED_COST,
	EXTENDED_QUANTITY,
	RETURN_INVOICE_FLAG,
	INVENTORY_DIRECTION_MULTIPLIER
) as

SELECT FCT_DSD.ITEM_ID
	,FCT_DSD.MERCH_ITEM_ID
	,FCT_DSD.UPC_NUMBER
	,FCT_DSD.DSDSTORENUMBER
	,FCT_DSD.STORE_ID
	,FCT_DSD.SALES_STORE_ID
	,FCT_DSD.DATE_ENTERED_KEY
	,FCT_DSD.DATE_ENTERED_FISCAL_DAY_ID
	,FCT_DSD.DATE_ENTERED
	,FCT_DSD.QUANTITY
	,FCT_DSD.RETAIL_AMOUNT
	,FCT_DSD.CASE_COST
	,FCT_DSD.RETURN_QUANTITY
	,FCT_DSD.VENDOR_NUMBER
	,FCT_DSD.TICKET
	,FCT_DSD.VENDOR_PROD
	,FCT_DSD.PACK
	,FCT_DSD.SALES_DEPARTMENT_ID
	,FCT_DSD.DSDSALES_DEPARTMENT_NAME
	,FCT_DSD.COST_DIFFERENCE
	,FCT_DSD.PRODTYPE
	,FCT_DSD.EXTRACT_DATE
	,FCT_DSD.SOURCE_TABLE_NAME
	,FCT_DSD.CREATE_DATE
	,FCT_DSD.MAINT_DATE
	,FCT_DSD.CREATE_UID
	,FCT_DSD.MAINT_UID
	,FCT_DSD.DELETE_FLAG
	,FCT_DSD.DELETE_DATE
	,FCT_DSD.DELETE_UID
	,CASE 
		WHEN (FCT_DSD.RETURN_QUANTITY > 0)
			THEN ((-1 * (FCT_DSD.CASE_COST / TO_NUMBER(FCT_DSD.PACK))) * FCT_DSD.RETURN_QUANTITY)
		ELSE (TO_NUMBER(FCT_DSD.QUANTITY) * FCT_DSD.CASE_COST)
		END AS EXTENDED_COST
	,CASE 
		WHEN (FCT_DSD.RETURN_QUANTITY > 0)
			THEN (-1 * FCT_DSD.RETURN_QUANTITY)
		ELSE TO_NUMBER((FCT_DSD.QUANTITY * FCT_DSD.PACK))
		END AS EXTENDED_QUANTITY
	,CASE 
		WHEN (FCT_DSD.RETURN_QUANTITY <> 0)
			THEN 't'::BOOLEAN
		ELSE 'f'::BOOLEAN
		END AS RETURN_INVOICE_FLAG
	,CASE 
		WHEN (FCT_DSD.RETURN_QUANTITY <> 0)
			THEN - 1
		ELSE 1
		END AS INVENTORY_DIRECTION_MULTIPLIER
FROM EBIDW.MERCH.FCT_DSD Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.STORE_ID=FCT_DSD.STORE_ID ;
create or replace view FCT_FREQUENT_SHOPPER_DETAIL_CURRENT(
	FREQUENT_SHOPPER_DETAIL_ID,
	ORDER_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	TRANSACTION_DATE,
	TRANSACTION_TIME,
	ORDER_NUMBER,
	ORDER_LINE_NUMBER,
	TERMINAL_NUMBER,
	ADVANTEDGE_CARD_NUMBER,
	ITEM_DESCRIPTION,
	ROBOT_RECORD,
	SPECIAL_ITEM_CODE,
	GLOBAL_FLAG,
	PROMOTIONID,
	ACCOUNTID,
	PROGRAM_ID,
	NUMBER_OF_REDEMPTION,
	PREVIOUS_POINTS,
	POINTS_EARNED,
	CASHIER_NUMBER,
	POINTS_REDEEMED,
	POINTS_BALANCE,
	BALANCE_ID,
	POS_TRANSACTION_NUMBER,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	JOURNAL_FILE_NAME,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as
SELECT FCT_FREQUENT_SHOPPER_DETAIL.FREQUENT_SHOPPER_DETAIL_ID, FCT_FREQUENT_SHOPPER_DETAIL.ORDER_HEADER_ID, FCT_FREQUENT_SHOPPER_DETAIL.DIVISION_NUMBER,
FCT_FREQUENT_SHOPPER_DETAIL.STORE_ID, FCT_FREQUENT_SHOPPER_DETAIL.SALES_STORE_ID, FCT_FREQUENT_SHOPPER_DETAIL.STORE_NUMBER, FCT_FREQUENT_SHOPPER_DETAIL.BUSINESS_DATE, 
FCT_FREQUENT_SHOPPER_DETAIL.BUSINESS_FISCAL_DAY_ID, FCT_FREQUENT_SHOPPER_DETAIL.TRANSACTION_DATE, FCT_FREQUENT_SHOPPER_DETAIL.TRANSACTION_TIME, 
FCT_FREQUENT_SHOPPER_DETAIL.ORDER_NUMBER, FCT_FREQUENT_SHOPPER_DETAIL.ORDER_LINE_NUMBER, FCT_FREQUENT_SHOPPER_DETAIL.TERMINAL_NUMBER, 
'04'|| FCT_FREQUENT_SHOPPER_DETAIL.ADVANTEDGE_CARD_NUMBER as ADVANTEDGE_CARD_NUMBER, FCT_FREQUENT_SHOPPER_DETAIL.ITEM_DESCRIPTION, FCT_FREQUENT_SHOPPER_DETAIL.ROBOT_RECORD,
FCT_FREQUENT_SHOPPER_DETAIL.SPECIAL_ITEM_CODE, FCT_FREQUENT_SHOPPER_DETAIL.GLOBAL_FLAG, LKP_PROMOTION_REDEMPTION_DETAIL.PROMOTIONID,
FCT_FREQUENT_SHOPPER_DETAIL.ACCOUNTID, FCT_FREQUENT_SHOPPER_DETAIL.PROGRAM_ID, FCT_FREQUENT_SHOPPER_DETAIL.NUMBER_OF_REDEMPTION, 
FCT_FREQUENT_SHOPPER_DETAIL.PREVIOUS_POINTS, FCT_FREQUENT_SHOPPER_DETAIL.POINTS_EARNED, FCT_FREQUENT_SHOPPER_DETAIL.CASHIER_NUMBER,
FCT_FREQUENT_SHOPPER_DETAIL.POINTS_REDEEMED, FCT_FREQUENT_SHOPPER_DETAIL.POINTS_BALANCE, FCT_FREQUENT_SHOPPER_DETAIL.BALANCE_ID,
FCT_FREQUENT_SHOPPER_DETAIL.POS_TRANSACTION_NUMBER, FCT_FREQUENT_SHOPPER_DETAIL.LINE_NUMBER, FCT_FREQUENT_SHOPPER_DETAIL.MASTER_LINE_NUMBER,
FCT_FREQUENT_SHOPPER_DETAIL.JOURNAL_FILE_NAME, FCT_FREQUENT_SHOPPER_DETAIL.EXTRACT_DATE, FCT_FREQUENT_SHOPPER_DETAIL.SOURCE_TABLE_NAME,
FCT_FREQUENT_SHOPPER_DETAIL.CREATE_DATE, FCT_FREQUENT_SHOPPER_DETAIL.MAINT_DATE, FCT_FREQUENT_SHOPPER_DETAIL.CREATE_UID, FCT_FREQUENT_SHOPPER_DETAIL.MAINT_UID,
FCT_FREQUENT_SHOPPER_DETAIL.DELETE_FLAG, FCT_FREQUENT_SHOPPER_DETAIL.DELETE_DATE, FCT_FREQUENT_SHOPPER_DETAIL.DELETE_UID 
FROM (EBIDW.POS.FCT_FREQUENT_SHOPPER_DETAIL Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_FREQUENT_SHOPPER_DETAIL.STORE_NUMBER JOIN EBIDW.POS.LKP_PROMOTION_REDEMPTION_DETAIL 
ON ((((((((LKP_PROMOTION_REDEMPTION_DETAIL.STOREID = FCT_FREQUENT_SHOPPER_DETAIL.STORE_NUMBER) 
AND (LKP_PROMOTION_REDEMPTION_DETAIL.LANE = FCT_FREQUENT_SHOPPER_DETAIL.TERMINAL_NUMBER))
AND (FCT_FREQUENT_SHOPPER_DETAIL.TRANSACTION_DATE = LKP_PROMOTION_REDEMPTION_DETAIL.POS_DATE))
AND (LKP_PROMOTION_REDEMPTION_DETAIL.LOYALTYCARD = FCT_FREQUENT_SHOPPER_DETAIL.ADVANTEDGE_CARD_NUMBER))
AND (FCT_FREQUENT_SHOPPER_DETAIL.ACCOUNTID = LKP_PROMOTION_REDEMPTION_DETAIL.ACCOUNTID))
AND (FCT_FREQUENT_SHOPPER_DETAIL.PROMOTIONID = LKP_PROMOTION_REDEMPTION_DETAIL.PROMOTIONID))
AND (FCT_FREQUENT_SHOPPER_DETAIL.ORDER_NUMBER = LKP_PROMOTION_REDEMPTION_DETAIL.TRANSACTION_ID)
)));
create or replace view FCT_FUEL_ADJUSTMENT_CURRENT(
	FUEL_ADJUSTMENT_ID,
	FUEL_ACTIVITY_FILE_ID,
	TRANSACTION_FISCAL_DAY_ID,
	TRANSACTION_TIME,
	TRANSACTION_POST_DATETIME,
	TRANSACTION_POST_FISCAL_DAY_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	FUEL_RETAILER_ID,
	RM_RETAILER_NUMBER,
	RM_TRANSACTION_NUMBER,
	ADVANTEDGE_CARD_NUMBER,
	ADVANTEDGE_CARD_ID,
	FUEL_REWARD_TYPE_ID,
	REWARD_TYPE_NUMBER,
	RM_REWARD_NUMBER,
	REWARD_DESC,
	DISCOUNT_VALUE,
	POS_TRANSACTION_NUMBER,
	PAYMENT_TYPE,
	FUEL_OFFER_TYPE_ID,
	OFFER_TYPE_CODE,
	EXPIRATION_FISCAL_DAY_ID,
	EXPIRATION_DATE,
	DISCOUNT_PER_GALLON,
	GALLON_LIMIT,
	SPONSOR_NUMBER,
	UPC_NUMBER,
	MERCH_ITEM_ID,
	ITEM_ID,
	TOTAL_EARNED,
	PROGRAM_NUMBER,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	CREATE_UID,
	MAINT_DATE,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_FUEL_ADJUSTMENT.FUEL_ADJUSTMENT_ID, FCT_FUEL_ADJUSTMENT.FUEL_ACTIVITY_FILE_ID, FCT_FUEL_ADJUSTMENT.TRANSACTION_FISCAL_DAY_ID, FCT_FUEL_ADJUSTMENT.TRANSACTION_TIME, FCT_FUEL_ADJUSTMENT.TRANSACTION_POST_DATETIME, FCT_FUEL_ADJUSTMENT.TRANSACTION_POST_FISCAL_DAY_ID, FCT_FUEL_ADJUSTMENT.STORE_ID, FCT_FUEL_ADJUSTMENT.SALES_STORE_ID, FCT_FUEL_ADJUSTMENT.STORE_NUMBER, FCT_FUEL_ADJUSTMENT.FUEL_RETAILER_ID, FCT_FUEL_ADJUSTMENT.RM_RETAILER_NUMBER, FCT_FUEL_ADJUSTMENT.RM_TRANSACTION_NUMBER, FCT_FUEL_ADJUSTMENT.ADVANTEDGE_CARD_NUMBER, FCT_FUEL_ADJUSTMENT.ADVANTEDGE_CARD_ID, FCT_FUEL_ADJUSTMENT.FUEL_REWARD_TYPE_ID, FCT_FUEL_ADJUSTMENT.REWARD_TYPE_NUMBER, FCT_FUEL_ADJUSTMENT.RM_REWARD_NUMBER, FCT_FUEL_ADJUSTMENT.REWARD_DESC, ROUND(FCT_FUEL_ADJUSTMENT.DISCOUNT_VALUE, 2) AS DISCOUNT_VALUE, FCT_FUEL_ADJUSTMENT.POS_TRANSACTION_NUMBER, FCT_FUEL_ADJUSTMENT.PAYMENT_TYPE, FCT_FUEL_ADJUSTMENT.FUEL_OFFER_TYPE_ID, FCT_FUEL_ADJUSTMENT.OFFER_TYPE_CODE, FCT_FUEL_ADJUSTMENT.EXPIRATION_FISCAL_DAY_ID, FCT_FUEL_ADJUSTMENT.EXPIRATION_DATE, FCT_FUEL_ADJUSTMENT.DISCOUNT_PER_GALLON, FCT_FUEL_ADJUSTMENT.GALLON_LIMIT, FCT_FUEL_ADJUSTMENT.SPONSOR_NUMBER, FCT_FUEL_ADJUSTMENT.UPC_NUMBER, FCT_FUEL_ADJUSTMENT.MERCH_ITEM_ID, FCT_FUEL_ADJUSTMENT.ITEM_ID, FCT_FUEL_ADJUSTMENT.TOTAL_EARNED, FCT_FUEL_ADJUSTMENT.PROGRAM_NUMBER, FCT_FUEL_ADJUSTMENT.ACTIVE_FLAG, FCT_FUEL_ADJUSTMENT.EXTRACT_DATE, FCT_FUEL_ADJUSTMENT.SOURCE_TABLE_NAME, FCT_FUEL_ADJUSTMENT.CREATE_DATE, FCT_FUEL_ADJUSTMENT.CREATE_UID, FCT_FUEL_ADJUSTMENT.MAINT_DATE, FCT_FUEL_ADJUSTMENT.MAINT_UID, FCT_FUEL_ADJUSTMENT.DELETE_FLAG, FCT_FUEL_ADJUSTMENT.DELETE_DATE, FCT_FUEL_ADJUSTMENT.DELETE_UID From EBIDW.FUEL.FCT_FUEL_ADJUSTMENT Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_FUEL_ADJUSTMENT.STORE_NUMBER WHERE ((FCT_FUEL_ADJUSTMENT.ACTIVE_FLAG = 't'::BOOLEAN) AND (FCT_FUEL_ADJUSTMENT.DELETE_FLAG = 'f'::BOOLEAN));
create or replace view FCT_FUEL_AGED_REDEMPTION_CURRENT(
	FUEL_AGED_REDEMPTIONS_ID,
	FUEL_RETAILER_ID,
	RM_RETAILER_NUMBER,
	SITE_NUMBER,
	PUMP_NUMBER,
	RM_TRANSACTION_NUMBER,
	REDEMPTION_FISCAL_DAY_ID,
	REDEMPTION_DATETIME,
	REDEMPTION_DATE,
	EOD_MARKER,
	ADVANTEDGE_CARD_NUMBER,
	ADVANTEDGE_CARD_ID,
	FUEL_REWARD_TYPE_ID,
	REWARD_TYPE_NUMBER,
	RM_REWARD_NUMBER,
	GALLONS_QTY,
	TENDERED_AMOUNT,
	FUEL_PRICE,
	FUEL_GRADE,
	FUEL_GRADE_DESC,
	DISCOUNT_VALUE,
	STREET_PRICE,
	ISSUING_STORE_NUMBER,
	POS_TRANSACTION_NUMBER,
	PAYMENT_TYPE,
	FUEL_OFFER_TYPE_ID,
	OFFER_TYPE_CODE,
	EXPIRATION_FISCAL_DAY_ID,
	EXPIRATION_DATETIME,
	EXPIRATION_DATE,
	DISCOUNT_PER_GALLON,
	GALLON_LIMIT,
	SPONSOR_NUMBER,
	UPC_NUMBER,
	TOTAL_EARNED,
	TOTAL_REDEEMED,
	FUEL_ACTIVITY_FILE_ID,
	REDEMPTION_POST_DATETIME,
	REDEMPTION_POST_FISCAL_DAY_ID,
	STORE_ID,
	PSN,
	HHN,
	FILE_CREATE_DATE,
	FIRST_ISSUE_FISCAL_DAY_ID,
	FIRST_ISSUE_DATE,
	LAST_ISSUE_FISCAL_DAY_ID,
	LAST_ISSUE_DATE,
	MAX_ISSUE_AGE,
	AVG_ISSUE_AGE,
	AVG_GROCERY_PURCHASE,
	TOTAL_GROCERY_PURCHASE,
	FUEL_COST_PCT,
	SHOPPING_TRIPS,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as

SELECT FCT_FUEL_AGED_REDEMPTION.FUEL_AGED_REDEMPTIONS_ID
	,FCT_FUEL_AGED_REDEMPTION.FUEL_RETAILER_ID
	,FCT_FUEL_AGED_REDEMPTION.RM_RETAILER_NUMBER
	,FCT_FUEL_AGED_REDEMPTION.SITE_NUMBER
	,FCT_FUEL_AGED_REDEMPTION.PUMP_NUMBER
	,FCT_FUEL_AGED_REDEMPTION.RM_TRANSACTION_NUMBER
	,FCT_FUEL_AGED_REDEMPTION.REDEMPTION_FISCAL_DAY_ID
	,FCT_FUEL_AGED_REDEMPTION.REDEMPTION_DATETIME
	,FCT_FUEL_AGED_REDEMPTION.REDEMPTION_DATE
	,FCT_FUEL_AGED_REDEMPTION.EOD_MARKER
	,FCT_FUEL_AGED_REDEMPTION.ADVANTEDGE_CARD_NUMBER
	,FCT_FUEL_AGED_REDEMPTION.ADVANTEDGE_CARD_ID
	,FCT_FUEL_AGED_REDEMPTION.FUEL_REWARD_TYPE_ID
	,FCT_FUEL_AGED_REDEMPTION.REWARD_TYPE_NUMBER
	,FCT_FUEL_AGED_REDEMPTION.RM_REWARD_NUMBER
	,FCT_FUEL_AGED_REDEMPTION.GALLONS_QTY
	,FCT_FUEL_AGED_REDEMPTION.TENDERED_AMOUNT
	,FCT_FUEL_AGED_REDEMPTION.FUEL_PRICE
	,FCT_FUEL_AGED_REDEMPTION.FUEL_GRADE
	,FCT_FUEL_AGED_REDEMPTION.FUEL_GRADE_DESC
	,FCT_FUEL_AGED_REDEMPTION.DISCOUNT_VALUE
	,FCT_FUEL_AGED_REDEMPTION.STREET_PRICE
	,FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER
	,FCT_FUEL_AGED_REDEMPTION.POS_TRANSACTION_NUMBER
	,FCT_FUEL_AGED_REDEMPTION.PAYMENT_TYPE
	,FCT_FUEL_AGED_REDEMPTION.FUEL_OFFER_TYPE_ID
	,FCT_FUEL_AGED_REDEMPTION.OFFER_TYPE_CODE
	,FCT_FUEL_AGED_REDEMPTION.EXPIRATION_FISCAL_DAY_ID
	,FCT_FUEL_AGED_REDEMPTION.EXPIRATION_DATETIME
	,FCT_FUEL_AGED_REDEMPTION.EXPIRATION_DATE
	,FCT_FUEL_AGED_REDEMPTION.DISCOUNT_PER_GALLON
	,FCT_FUEL_AGED_REDEMPTION.GALLON_LIMIT
	,FCT_FUEL_AGED_REDEMPTION.SPONSOR_NUMBER
	,FCT_FUEL_AGED_REDEMPTION.UPC_NUMBER
	,FCT_FUEL_AGED_REDEMPTION.TOTAL_EARNED
	,CASE 
		WHEN (
				(
					(FCT_FUEL_AGED_REDEMPTION.REDEMPTION_DATETIME > '2019-06-22 00:00:00')
					AND (TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.RM_RETAILER_NUMBER) = 11895)
					)
				AND (
					NOT (
						(
							(
								(
									(TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 238)
									OR (TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 210)
									)
								OR (
									(TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 135)
									OR (TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 169)
									)
								)
							OR (
								(
									(TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 185)
									OR (TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 190)
									)
								OR (
									(TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 202)
									OR (TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 222)
									)
								)
							)
						OR (		
							(
							(TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 236)
								OR (FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER IS NULL)
								)
																																													 
		 
							OR (TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 173)
							)
						)
					)
				)
			THEN ROUND((FCT_FUEL_AGED_REDEMPTION.TOTAL_REDEEMED / 100), 2)
			WHEN (
				(
					(FCT_FUEL_AGED_REDEMPTION.REDEMPTION_DATETIME > '2020-01-12 00:00:00')
					AND (TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.RM_RETAILER_NUMBER) = 11895)
					)
				AND (
					(
						(
							(
								(TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 238)
								OR (TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 210)
								)
							OR (
								(TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 135)
								OR (TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 169)
								)
							)
						OR (
							(
								(TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 185)
								OR (TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 190)
								)
							OR (
								(TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 202)
								OR (TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 222)
								)
							)
						)
					OR (
						(
							(TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 236)
							OR (FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER IS NULL)
							)
						OR (TO_NUMBER(FCT_FUEL_AGED_REDEMPTION.ISSUING_STORE_NUMBER) = 173)
						)
					)
				)
			THEN ROUND((FCT_FUEL_AGED_REDEMPTION.TOTAL_REDEEMED / 100), 2)
																							  
		ELSE FCT_FUEL_AGED_REDEMPTION.TOTAL_REDEEMED
		END AS TOTAL_REDEEMED
	,FCT_FUEL_AGED_REDEMPTION.FUEL_ACTIVITY_FILE_ID
	,FCT_FUEL_AGED_REDEMPTION.REDEMPTION_POST_DATETIME
	,FCT_FUEL_AGED_REDEMPTION.REDEMPTION_POST_FISCAL_DAY_ID
	,FCT_FUEL_AGED_REDEMPTION.STORE_ID
	,FCT_FUEL_AGED_REDEMPTION.PSN
	,FCT_FUEL_AGED_REDEMPTION.HHN
	,FCT_FUEL_AGED_REDEMPTION.FILE_CREATE_DATE
	,FCT_FUEL_AGED_REDEMPTION.FIRST_ISSUE_FISCAL_DAY_ID
	,FCT_FUEL_AGED_REDEMPTION.FIRST_ISSUE_DATE
	,FCT_FUEL_AGED_REDEMPTION.LAST_ISSUE_FISCAL_DAY_ID
	,FCT_FUEL_AGED_REDEMPTION.LAST_ISSUE_DATE
	,FCT_FUEL_AGED_REDEMPTION.MAX_ISSUE_AGE
	,FCT_FUEL_AGED_REDEMPTION.AVG_ISSUE_AGE
	,FCT_FUEL_AGED_REDEMPTION.AVG_GROCERY_PURCHASE
	,FCT_FUEL_AGED_REDEMPTION.TOTAL_GROCERY_PURCHASE
	,FCT_FUEL_AGED_REDEMPTION.FUEL_COST_PCT
	,FCT_FUEL_AGED_REDEMPTION.SHOPPING_TRIPS
	,FCT_FUEL_AGED_REDEMPTION.ACTIVE_FLAG
	,FCT_FUEL_AGED_REDEMPTION.EXTRACT_DATE
	,FCT_FUEL_AGED_REDEMPTION.SOURCE_TABLE_NAME
	,FCT_FUEL_AGED_REDEMPTION.CREATE_DATE
	,FCT_FUEL_AGED_REDEMPTION.MAINT_DATE
	,FCT_FUEL_AGED_REDEMPTION.CREATE_UID
	,FCT_FUEL_AGED_REDEMPTION.MAINT_UID
	,FCT_FUEL_AGED_REDEMPTION.DELETE_FLAG
	,FCT_FUEL_AGED_REDEMPTION.DELETE_DATE
	,FCT_FUEL_AGED_REDEMPTION.DELETE_UID
FROM EBIDW.FUEL.FCT_FUEL_AGED_REDEMPTION Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.STORE_ID=FCT_FUEL_AGED_REDEMPTION.STORE_ID
WHERE (
		(FCT_FUEL_AGED_REDEMPTION.ACTIVE_FLAG = 't'::BOOLEAN)
		AND (FCT_FUEL_AGED_REDEMPTION.DELETE_FLAG = 'f'::BOOLEAN));
create or replace view FCT_FUEL_DETAIL_CURRENT(
	FUEL_DETAIL_ID,
	ORDER_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	TRANSACTION_DATE,
	TRANSACTION_FISCAL_DAY_ID,
	ORDER_NUMBER,
	ORDER_LINE_NUMBER,
	FUEL_CODE,
	FUEL_NUMBER,
	FLU_CODE,
	TRANSACTION_TIME,
	FUEL_DESCRIPTION,
	FUEL_QUANTITY,
	FUEL_AMOUNT,
	EXTENDED_FUEL_QUANTITY,
	EXTENDED_FUEL_AMOUNT,
	MINIMUM_SPEND_REQUIREMENT,
	MINIMUM_COUNT_REQUIREMENT,
	MINIMUM_WEIGHT_REQUIREMENT,
	MAX_REDEMPTION,
	REQUIREMENT_TYPE,
	POS_DEPARTMENT_ID,
	POS_DEPARTMENT_NUMBER,
	TOTAL_REWARD_AMOUNT,
	FUEL_APPLIED_INDICATOR,
	TERMINAL_NUMBER,
	M_SUPPORT,
	POB_OVERRIDE_INDICATOR,
	POB_OVERRIDE_DATE,
	POB_OVERRIDE_FISCAL_DAY_ID,
	POB_JOURNAL_ID,
	POB_JOURNAL_ENTRY_ID,
	POS_TRANSACTION_NUMBER,
	ISSUANCE_NUMBER,
	FUEL_OFFER_TYPE_ID,
	FUEL_OFFER_TYPE_CODE,
	STARTING_DISCOUNT_PER_GALLON,
	REMAINING_DISCOUNT_PER_GALLON,
	TOTAL_EARNED_AMOUNT,
	TOTAL_OUTSTANDING_LIABILITY_AMOUNT,
	TOTAL_REDEEMED_AMOUNT,
	TOTAL_ABANDONED_AMOUNT,
	TOTAL_EXPIRED_AMOUNT,
	SPLIT_ISSUANCE_COUNT,
	REWARD_COMPLETION_FLAG,
	MAX_GALLONS,
	MAX_REWARD,
	GALLONS_REDEEMED,
	GALLONS_ABANDONED,
	GALLONS_EXPIRED,
	FLU_DIRECTION_MULTIPLIER,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	JOURNAL_FILE_NAME,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_FUEL_DETAIL.FUEL_DETAIL_ID, FCT_FUEL_DETAIL.ORDER_HEADER_ID, FCT_FUEL_DETAIL.DIVISION_NUMBER, FCT_FUEL_DETAIL.STORE_ID, FCT_FUEL_DETAIL.SALES_STORE_ID, FCT_FUEL_DETAIL.STORE_NUMBER, FCT_FUEL_DETAIL.BUSINESS_DATE, FCT_FUEL_DETAIL.BUSINESS_FISCAL_DAY_ID, FCT_FUEL_DETAIL.TRANSACTION_DATE, FCT_FUEL_DETAIL.TRANSACTION_FISCAL_DAY_ID, FCT_FUEL_DETAIL.ORDER_NUMBER, FCT_FUEL_DETAIL.ORDER_LINE_NUMBER, FCT_FUEL_DETAIL.FUEL_CODE, TO_NUMBER(FCT_FUEL_DETAIL.FUEL_CODE) AS FUEL_NUMBER, FCT_FUEL_DETAIL.FLU_CODE, FCT_FUEL_DETAIL.TRANSACTION_TIME, FCT_FUEL_DETAIL.FUEL_DESCRIPTION, FCT_FUEL_DETAIL.FUEL_QUANTITY, FCT_FUEL_DETAIL.FUEL_AMOUNT, (FCT_FUEL_DETAIL.FUEL_QUANTITY * TO_NUMBER(FCT_FUEL_DETAIL.FLU_DIRECTION_MULTIPLIER)) AS EXTENDED_FUEL_QUANTITY, ((FCT_FUEL_DETAIL.FUEL_AMOUNT * TO_NUMBER(FCT_FUEL_DETAIL.FLU_DIRECTION_MULTIPLIER)) * FCT_FUEL_DETAIL.FUEL_QUANTITY) AS EXTENDED_FUEL_AMOUNT, FCT_FUEL_DETAIL.MINIMUM_SPEND_REQUIREMENT, FCT_FUEL_DETAIL.MINIMUM_COUNT_REQUIREMENT, FCT_FUEL_DETAIL.MINIMUM_WEIGHT_REQUIREMENT, FCT_FUEL_DETAIL.MAX_REDEMPTION, FCT_FUEL_DETAIL.REQUIREMENT_TYPE, FCT_FUEL_DETAIL.POS_DEPARTMENT_ID, FCT_FUEL_DETAIL.POS_DEPARTMENT_NUMBER, FCT_FUEL_DETAIL.TOTAL_REWARD_AMOUNT, FCT_FUEL_DETAIL.FUEL_APPLIED_INDICATOR, FCT_FUEL_DETAIL.TERMINAL_NUMBER, FCT_FUEL_DETAIL.M_SUPPORT, FCT_FUEL_DETAIL.POB_OVERRIDE_INDICATOR, FCT_FUEL_DETAIL.POB_OVERRIDE_DATE, FCT_FUEL_DETAIL.POB_OVERRIDE_FISCAL_DAY_ID, FCT_FUEL_DETAIL.POB_JOURNAL_ID, FCT_FUEL_DETAIL.POB_JOURNAL_ENTRY_ID, FCT_FUEL_DETAIL.POS_TRANSACTION_NUMBER, FCT_FUEL_DETAIL.ISSUANCE_NUMBER, FCT_FUEL_DETAIL.FUEL_OFFER_TYPE_ID, FCT_FUEL_DETAIL.FUEL_OFFER_TYPE_CODE, FCT_FUEL_DETAIL.STARTING_DISCOUNT_PER_GALLON, FCT_FUEL_DETAIL.REMAINING_DISCOUNT_PER_GALLON, FCT_FUEL_DETAIL.TOTAL_EARNED_AMOUNT, FCT_FUEL_DETAIL.TOTAL_OUTSTANDING_LIABILITY_AMOUNT, FCT_FUEL_DETAIL.TOTAL_REDEEMED_AMOUNT, FCT_FUEL_DETAIL.TOTAL_ABANDONED_AMOUNT, FCT_FUEL_DETAIL.TOTAL_EXPIRED_AMOUNT, FCT_FUEL_DETAIL.SPLIT_ISSUANCE_COUNT, FCT_FUEL_DETAIL.REWARD_COMPLETION_FLAG, FCT_FUEL_DETAIL.MAX_GALLONS, FCT_FUEL_DETAIL.MAX_REWARD, FCT_FUEL_DETAIL.GALLONS_REDEEMED, FCT_FUEL_DETAIL.GALLONS_ABANDONED, FCT_FUEL_DETAIL.GALLONS_EXPIRED, FCT_FUEL_DETAIL.FLU_DIRECTION_MULTIPLIER, FCT_FUEL_DETAIL.LINE_NUMBER, FCT_FUEL_DETAIL.MASTER_LINE_NUMBER, FCT_FUEL_DETAIL.JOURNAL_FILE_NAME, FCT_FUEL_DETAIL.EXTRACT_DATE, FCT_FUEL_DETAIL.SOURCE_TABLE_NAME, FCT_FUEL_DETAIL.CREATE_DATE, FCT_FUEL_DETAIL.MAINT_DATE, FCT_FUEL_DETAIL.CREATE_UID, FCT_FUEL_DETAIL.MAINT_UID, FCT_FUEL_DETAIL.DELETE_FLAG, FCT_FUEL_DETAIL.DELETE_DATE, FCT_FUEL_DETAIL.DELETE_UID From EBIDW.POS.FCT_FUEL_DETAIL Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_FUEL_DETAIL.STORE_NUMBER;
create or replace view FCT_FUEL_EXPIRATION_CURRENT(
	FUEL_EXPIRATION_ID,
	FUEL_ACTIVITY_FILE_ID,
	TRANSACTION_FISCAL_DAY_ID,
	TRANSACTION_TIME,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	FUEL_RETAILER_ID,
	RM_RETAILER_NUMBER,
	REGISTER_NUMBER,
	RM_TRANSACTION_NUMBER,
	ADVANTEDGE_CARD_NUMBER,
	ADVANTEDGE_CARD_ID,
	FUEL_REWARD_TYPE_ID,
	REWARD_TYPE_NUMBER,
	RM_REWARD_NUMBER,
	REWARD_QTY,
	REWARD_DESC,
	DISCOUNT_VALUE,
	ISSUING_MERCHANT,
	POS_TRANSACTION_NUMBER,
	FUEL_OFFER_TYPE_ID,
	OFFER_TYPE_CODE,
	EXPIRATION_FISCAL_DAY_ID,
	EXPIRATION_DATE,
	EXPIRATION_POST_DATETIME,
	EXPIRATION_POST_FISCAL_DAY_ID,
	DISCOUNT_PER_GALLON,
	GALLON_LIMIT,
	UPC_NUMBER,
	MERCH_ITEM_ID,
	ITEM_ID,
	PROGRAM_NUMBER,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	CREATE_UID,
	MAINT_DATE,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_FUEL_EXPIRATION.FUEL_EXPIRATION_ID, FCT_FUEL_EXPIRATION.FUEL_ACTIVITY_FILE_ID, FCT_FUEL_EXPIRATION.TRANSACTION_FISCAL_DAY_ID, FCT_FUEL_EXPIRATION.TRANSACTION_TIME, FCT_FUEL_EXPIRATION.STORE_ID, FCT_FUEL_EXPIRATION.SALES_STORE_ID, FCT_FUEL_EXPIRATION.STORE_NUMBER, FCT_FUEL_EXPIRATION.FUEL_RETAILER_ID, FCT_FUEL_EXPIRATION.RM_RETAILER_NUMBER, FCT_FUEL_EXPIRATION.REGISTER_NUMBER, FCT_FUEL_EXPIRATION.RM_TRANSACTION_NUMBER, FCT_FUEL_EXPIRATION.ADVANTEDGE_CARD_NUMBER, FCT_FUEL_EXPIRATION.ADVANTEDGE_CARD_ID, FCT_FUEL_EXPIRATION.FUEL_REWARD_TYPE_ID, FCT_FUEL_EXPIRATION.REWARD_TYPE_NUMBER, FCT_FUEL_EXPIRATION.RM_REWARD_NUMBER, FCT_FUEL_EXPIRATION.REWARD_QTY, FCT_FUEL_EXPIRATION.REWARD_DESC, ROUND(FCT_FUEL_EXPIRATION.DISCOUNT_VALUE, 2) AS DISCOUNT_VALUE, FCT_FUEL_EXPIRATION.ISSUING_MERCHANT, FCT_FUEL_EXPIRATION.POS_TRANSACTION_NUMBER, FCT_FUEL_EXPIRATION.FUEL_OFFER_TYPE_ID, FCT_FUEL_EXPIRATION.OFFER_TYPE_CODE, FCT_FUEL_EXPIRATION.EXPIRATION_FISCAL_DAY_ID, FCT_FUEL_EXPIRATION.EXPIRATION_DATE, FCT_FUEL_EXPIRATION.EXPIRATION_POST_DATETIME, FCT_FUEL_EXPIRATION.EXPIRATION_POST_FISCAL_DAY_ID, FCT_FUEL_EXPIRATION.DISCOUNT_PER_GALLON, FCT_FUEL_EXPIRATION.GALLON_LIMIT, FCT_FUEL_EXPIRATION.UPC_NUMBER, FCT_FUEL_EXPIRATION.MERCH_ITEM_ID, FCT_FUEL_EXPIRATION.ITEM_ID, FCT_FUEL_EXPIRATION.PROGRAM_NUMBER, FCT_FUEL_EXPIRATION.ACTIVE_FLAG, FCT_FUEL_EXPIRATION.EXTRACT_DATE, FCT_FUEL_EXPIRATION.SOURCE_TABLE_NAME, FCT_FUEL_EXPIRATION.CREATE_DATE, FCT_FUEL_EXPIRATION.CREATE_UID, FCT_FUEL_EXPIRATION.MAINT_DATE, FCT_FUEL_EXPIRATION.MAINT_UID, FCT_FUEL_EXPIRATION.DELETE_FLAG, FCT_FUEL_EXPIRATION.DELETE_DATE, FCT_FUEL_EXPIRATION.DELETE_UID From EBIDW.FUEL.FCT_FUEL_EXPIRATION Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_FUEL_EXPIRATION.STORE_NUMBER WHERE ((FCT_FUEL_EXPIRATION.ACTIVE_FLAG = 't'::BOOLEAN) AND (FCT_FUEL_EXPIRATION.DELETE_FLAG = 'f'::BOOLEAN));
create or replace view FCT_FUEL_ISSUANCE_CURRENT(
	FUEL_ISSUANCE_ID,
	FUEL_ACTIVITY_FILE_ID,
	TRANSACTION_FISCAL_DAY_ID,
	TRANSACTION_TIME,
	TRANSACTION_POST_DATETIME,
	TRANSACTION_POST_FISCAL_DAY_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	FUEL_RETAILER_ID,
	RM_RETAILER_NUMBER,
	REGISTER_NUMBER,
	RM_TRANSACTION_NUMBER,
	EOD_MARKER,
	ADVANTEDGE_CARD_NUMBER,
	ADVANTEDGE_CARD_ID,
	FUEL_REWARD_TYPE_ID,
	REWARD_TYPE_NUMBER,
	RM_REWARD_NUMBER,
	REWARD_QTY,
	TENDERED_AMOUNT,
	REWARD_DESC,
	DISCOUNT_VALUE,
	POS_TRANSACTION_NUMBER,
	PAYMENT_TYPE,
	FUEL_OFFER_TYPE_ID,
	OFFER_TYPE_CODE,
	EXPIRATION_FISCAL_DAY_ID,
	EXPIRATION_DATE,
	DISCOUNT_PER_GALLON,
	GALLON_LIMIT,
	SPONSOR_NUMBER,
	UPC_NUMBER,
	MERCH_ITEM_ID,
	ITEM_ID,
	TOTAL_EARNED,
	PROGRAM_NUMBER,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	CREATE_UID,
	MAINT_DATE,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_FUEL_ISSUANCE.FUEL_ISSUANCE_ID, FCT_FUEL_ISSUANCE.FUEL_ACTIVITY_FILE_ID, FCT_FUEL_ISSUANCE.TRANSACTION_FISCAL_DAY_ID, FCT_FUEL_ISSUANCE.TRANSACTION_TIME, FCT_FUEL_ISSUANCE.TRANSACTION_POST_DATETIME, FCT_FUEL_ISSUANCE.TRANSACTION_POST_FISCAL_DAY_ID, FCT_FUEL_ISSUANCE.STORE_ID, FCT_FUEL_ISSUANCE.SALES_STORE_ID, FCT_FUEL_ISSUANCE.STORE_NUMBER, FCT_FUEL_ISSUANCE.FUEL_RETAILER_ID, FCT_FUEL_ISSUANCE.RM_RETAILER_NUMBER, FCT_FUEL_ISSUANCE.REGISTER_NUMBER, FCT_FUEL_ISSUANCE.RM_TRANSACTION_NUMBER, FCT_FUEL_ISSUANCE.EOD_MARKER, FCT_FUEL_ISSUANCE.ADVANTEDGE_CARD_NUMBER, FCT_FUEL_ISSUANCE.ADVANTEDGE_CARD_ID, FCT_FUEL_ISSUANCE.FUEL_REWARD_TYPE_ID, FCT_FUEL_ISSUANCE.REWARD_TYPE_NUMBER, FCT_FUEL_ISSUANCE.RM_REWARD_NUMBER, FCT_FUEL_ISSUANCE.REWARD_QTY, FCT_FUEL_ISSUANCE.TENDERED_AMOUNT, FCT_FUEL_ISSUANCE.REWARD_DESC, ROUND(FCT_FUEL_ISSUANCE.DISCOUNT_VALUE, 2) AS DISCOUNT_VALUE, FCT_FUEL_ISSUANCE.POS_TRANSACTION_NUMBER, FCT_FUEL_ISSUANCE.PAYMENT_TYPE, FCT_FUEL_ISSUANCE.FUEL_OFFER_TYPE_ID, FCT_FUEL_ISSUANCE.OFFER_TYPE_CODE, FCT_FUEL_ISSUANCE.EXPIRATION_FISCAL_DAY_ID, FCT_FUEL_ISSUANCE.EXPIRATION_DATE, FCT_FUEL_ISSUANCE.DISCOUNT_PER_GALLON, FCT_FUEL_ISSUANCE.GALLON_LIMIT, FCT_FUEL_ISSUANCE.SPONSOR_NUMBER, FCT_FUEL_ISSUANCE.UPC_NUMBER, FCT_FUEL_ISSUANCE.MERCH_ITEM_ID, FCT_FUEL_ISSUANCE.ITEM_ID, FCT_FUEL_ISSUANCE.TOTAL_EARNED, FCT_FUEL_ISSUANCE.PROGRAM_NUMBER, FCT_FUEL_ISSUANCE.ACTIVE_FLAG, FCT_FUEL_ISSUANCE.EXTRACT_DATE, FCT_FUEL_ISSUANCE.SOURCE_TABLE_NAME, FCT_FUEL_ISSUANCE.CREATE_DATE, FCT_FUEL_ISSUANCE.CREATE_UID, FCT_FUEL_ISSUANCE.MAINT_DATE, FCT_FUEL_ISSUANCE.MAINT_UID, FCT_FUEL_ISSUANCE.DELETE_FLAG, FCT_FUEL_ISSUANCE.DELETE_DATE, FCT_FUEL_ISSUANCE.DELETE_UID From EBIDW.FUEL.FCT_FUEL_ISSUANCE Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_FUEL_ISSUANCE.STORE_NUMBER WHERE ((FCT_FUEL_ISSUANCE.ACTIVE_FLAG = 't'::BOOLEAN) AND (FCT_FUEL_ISSUANCE.DELETE_FLAG = 'f'::BOOLEAN));
create or replace view FCT_FUEL_REDEMPTION_CURRENT(
	FUEL_REDEMPTION_ID,
	FUEL_ACTIVITY_FILE_ID,
	TRANSACTION_FISCAL_DAY_ID,
	TRANSACTION_TIME,
	TRANSACTION_POST_DATETIME,
	TRANSACTION_POST_FISCAL_DAY_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	FUEL_RETAILER_ID,
	RM_RETAILER_NUMBER,
	SITE_NUMBER,
	PUMP_NUMBER,
	RM_TRANSACTION_NUMBER,
	EOD_MARKER,
	ADVANTEDGE_CARD_NUMBER,
	ADVANTEDGE_CARD_ID,
	FUEL_REWARD_TYPE_ID,
	REWARD_TYPE_NUMBER,
	RM_REWARD_NUMBER,
	GALLONS_QTY,
	TENDERED_AMOUNT,
	FUEL_PRICE,
	FUEL_GRADE,
	FUEL_GRADE_DESC,
	DISCOUNT_VALUE,
	STREET_PRICE,
	POS_TRANSACTION_NUMBER,
	PAYMENT_TYPE,
	FUEL_OFFER_TYPE_ID,
	OFFER_TYPE_CODE,
	DISCOUNT_PER_GALLON,
	GALLON_LIMIT,
	SPONSOR_NUMBER,
	TOTAL_REDEEMED,
	PROGRAM_NUMBER,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	CREATE_UID,
	MAINT_DATE,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as 
SELECT 
FCT_FUEL_REDEMPTION.FUEL_REDEMPTION_ID, 
FCT_FUEL_REDEMPTION.FUEL_ACTIVITY_FILE_ID, 
FCT_FUEL_REDEMPTION.TRANSACTION_FISCAL_DAY_ID, 
FCT_FUEL_REDEMPTION.TRANSACTION_TIME, 
FCT_FUEL_REDEMPTION.TRANSACTION_POST_DATETIME, 
FCT_FUEL_REDEMPTION.TRANSACTION_POST_FISCAL_DAY_ID, 
FCT_FUEL_REDEMPTION.STORE_ID, 
FCT_FUEL_REDEMPTION.SALES_STORE_ID, 
FCT_FUEL_REDEMPTION.STORE_NUMBER, 
FCT_FUEL_REDEMPTION.FUEL_RETAILER_ID, 
FCT_FUEL_REDEMPTION.RM_RETAILER_NUMBER, 
FCT_FUEL_REDEMPTION.SITE_NUMBER, 
FCT_FUEL_REDEMPTION.PUMP_NUMBER, 
FCT_FUEL_REDEMPTION.RM_TRANSACTION_NUMBER, 
FCT_FUEL_REDEMPTION.EOD_MARKER, 
FCT_FUEL_REDEMPTION.ADVANTEDGE_CARD_NUMBER, 
FCT_FUEL_REDEMPTION.ADVANTEDGE_CARD_ID, 
FCT_FUEL_REDEMPTION.FUEL_REWARD_TYPE_ID, 
FCT_FUEL_REDEMPTION.REWARD_TYPE_NUMBER, 
FCT_FUEL_REDEMPTION.RM_REWARD_NUMBER, 
ROUND(FCT_FUEL_REDEMPTION.GALLONS_QTY, 2) AS GALLONS_QTY, 
FCT_FUEL_REDEMPTION.TENDERED_AMOUNT, 
FCT_FUEL_REDEMPTION.FUEL_PRICE, 
FCT_FUEL_REDEMPTION.FUEL_GRADE, 
FCT_FUEL_REDEMPTION.FUEL_GRADE_DESC, 
ROUND(FCT_FUEL_REDEMPTION.DISCOUNT_VALUE, 2) AS DISCOUNT_VALUE, 
FCT_FUEL_REDEMPTION.STREET_PRICE, 
FCT_FUEL_REDEMPTION.POS_TRANSACTION_NUMBER, 
FCT_FUEL_REDEMPTION.PAYMENT_TYPE, 
FCT_FUEL_REDEMPTION.FUEL_OFFER_TYPE_ID, 
FCT_FUEL_REDEMPTION.OFFER_TYPE_CODE, 
FCT_FUEL_REDEMPTION.DISCOUNT_PER_GALLON, 
FCT_FUEL_REDEMPTION.GALLON_LIMIT, 
FCT_FUEL_REDEMPTION.SPONSOR_NUMBER, 
CASE 
WHEN (((FCT_FUEL_REDEMPTION.TRANSACTION_TIME > '2019-06-22 00:00:00') 
AND (TO_NUMBER(FCT_FUEL_REDEMPTION.RM_RETAILER_NUMBER) = 11895)) 
AND (
NOT (((((FCT_FUEL_REDEMPTION.STORE_NUMBER = 238) 
OR (FCT_FUEL_REDEMPTION.STORE_NUMBER = 210)) 
OR ((FCT_FUEL_REDEMPTION.STORE_NUMBER = 135) 
OR (FCT_FUEL_REDEMPTION.STORE_NUMBER = 169))) 
OR (((FCT_FUEL_REDEMPTION.STORE_NUMBER = 185) 
OR (FCT_FUEL_REDEMPTION.STORE_NUMBER = 190)) 
OR ((FCT_FUEL_REDEMPTION.STORE_NUMBER = 202) 
OR (FCT_FUEL_REDEMPTION.STORE_NUMBER = 222)))) 
OR ((FCT_FUEL_REDEMPTION.STORE_NUMBER = 236) 
OR (FCT_FUEL_REDEMPTION.STORE_NUMBER = 173))))) THEN ROUND((FCT_FUEL_REDEMPTION.TOTAL_REDEEMED / '100'), 2) 
WHEN (((FCT_FUEL_REDEMPTION.TRANSACTION_TIME > '2020-01-12 00:00:00') 
AND (TO_NUMBER(FCT_FUEL_REDEMPTION.RM_RETAILER_NUMBER) = 11895)) 
AND (((((FCT_FUEL_REDEMPTION.STORE_NUMBER = 238) 
OR (FCT_FUEL_REDEMPTION.STORE_NUMBER = 210)) 
OR ((FCT_FUEL_REDEMPTION.STORE_NUMBER = 135) 
OR (FCT_FUEL_REDEMPTION.STORE_NUMBER = 169))) 
OR (((FCT_FUEL_REDEMPTION.STORE_NUMBER = 185) 
OR (FCT_FUEL_REDEMPTION.STORE_NUMBER = 190)) 
OR ((FCT_FUEL_REDEMPTION.STORE_NUMBER = 202) 
OR (FCT_FUEL_REDEMPTION.STORE_NUMBER = 222)))) 
OR ((FCT_FUEL_REDEMPTION.STORE_NUMBER = 236) 
OR (FCT_FUEL_REDEMPTION.STORE_NUMBER = 173)))) THEN ROUND((FCT_FUEL_REDEMPTION.TOTAL_REDEEMED / '100'), 2) ELSE FCT_FUEL_REDEMPTION.TOTAL_REDEEMED 
END AS TOTAL_REDEEMED, 
FCT_FUEL_REDEMPTION.PROGRAM_NUMBER, 
FCT_FUEL_REDEMPTION.ACTIVE_FLAG, 
FCT_FUEL_REDEMPTION.EXTRACT_DATE, 
FCT_FUEL_REDEMPTION.SOURCE_TABLE_NAME, 
FCT_FUEL_REDEMPTION.CREATE_DATE, 
FCT_FUEL_REDEMPTION.CREATE_UID, 
FCT_FUEL_REDEMPTION.MAINT_DATE, 
FCT_FUEL_REDEMPTION.MAINT_UID, 
FCT_FUEL_REDEMPTION.DELETE_FLAG, 
FCT_FUEL_REDEMPTION.DELETE_DATE, 
FCT_FUEL_REDEMPTION.DELETE_UID 

FROM EBIDW.FUEL.FCT_FUEL_REDEMPTION 
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_FUEL_REDEMPTION.STORE_NUMBER
WHERE ((FCT_FUEL_REDEMPTION.ACTIVE_FLAG = 't'::BOOLEAN) 
AND (FCT_FUEL_REDEMPTION.DELETE_FLAG = 'f'::BOOLEAN));
create or replace view FCT_FUEL_REWARD_LIABILITY_CURRENT(
	FUEL_REWARD_LIABILITY_ID,
	RM_REWARD_NUMBER,
	ADJUSTMENT_FLAG,
	ADVANTEDGE_CARD_NUMBER,
	ADVANTEDGE_CARD_ID,
	ISSUANCE_FISCAL_DAY_ID,
	ISSUANCE_DATETIME,
	ISSUANCE_POST_DATETIME,
	ISSUANCE_POST_FISCAL_DAY_ID,
	EXPIRATION_FISCAL_DAY_ID,
	EXPIRATION_DATE,
	EXPIRED_FLAG,
	SPLIT_ISSUANCE_FLAG,
	SPLIT_ISSUANCE_COUNT,
	STORE_NUMBER,
	SALES_STORE_ID,
	STORE_ID,
	FUEL_RETAILER_ID,
	RM_RETAILER_NUMBER,
	RM_TRANSACTION_NUMBER,
	POS_TRANSACTION_NUMBER,
	REWARD_TYPE_NUMBER,
	FUEL_REWARD_TYPE_ID,
	OFFER_TYPE_CODE,
	FUEL_OFFER_TYPE_ID,
	STARTING_DISCOUNT_PER_GALLON,
	REMAINING_DISCOUNT_PER_GALLON,
	TOTAL_EARNED,
	TOTAL_REDEEMED,
	TOTAL_OUTSTANDING_LIABILITY,
	TOTAL_ABANDONED,
	TOTAL_EXPIRED,
	GALLON_LIMIT,
	GALLONS_REDEEMED,
	GALLONS_ABANDONED,
	GALLONS_EXPIRED,
	LAST_REDEMPTION_DATETIME,
	LAST_REDEMPTION_FISCAL_DAY_ID,
	REWARD_COMPLETION_FLAG,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	CREATE_UID,
	MAINT_DATE,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as
SELECT FCT_FUEL_REWARD_LIABILITY.FUEL_REWARD_LIABILITY_ID
	,FCT_FUEL_REWARD_LIABILITY.RM_REWARD_NUMBER
	,FCT_FUEL_REWARD_LIABILITY.ADJUSTMENT_FLAG
	,FCT_FUEL_REWARD_LIABILITY.ADVANTEDGE_CARD_NUMBER
	,FCT_FUEL_REWARD_LIABILITY.ADVANTEDGE_CARD_ID
	,FCT_FUEL_REWARD_LIABILITY.ISSUANCE_FISCAL_DAY_ID
	,FCT_FUEL_REWARD_LIABILITY.ISSUANCE_DATETIME
	,FCT_FUEL_REWARD_LIABILITY.ISSUANCE_POST_DATETIME
	,FCT_FUEL_REWARD_LIABILITY.ISSUANCE_POST_FISCAL_DAY_ID
	,FCT_FUEL_REWARD_LIABILITY.EXPIRATION_FISCAL_DAY_ID
	,FCT_FUEL_REWARD_LIABILITY.EXPIRATION_DATE
	,FCT_FUEL_REWARD_LIABILITY.EXPIRED_FLAG
	,FCT_FUEL_REWARD_LIABILITY.SPLIT_ISSUANCE_FLAG
	,FCT_FUEL_REWARD_LIABILITY.SPLIT_ISSUANCE_COUNT
	,FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER
	,FCT_FUEL_REWARD_LIABILITY.SALES_STORE_ID
	,FCT_FUEL_REWARD_LIABILITY.STORE_ID
	,FCT_FUEL_REWARD_LIABILITY.FUEL_RETAILER_ID
	,FCT_FUEL_REWARD_LIABILITY.RM_RETAILER_NUMBER
	,FCT_FUEL_REWARD_LIABILITY.RM_TRANSACTION_NUMBER
	,FCT_FUEL_REWARD_LIABILITY.POS_TRANSACTION_NUMBER
	,FCT_FUEL_REWARD_LIABILITY.REWARD_TYPE_NUMBER
	,FCT_FUEL_REWARD_LIABILITY.FUEL_REWARD_TYPE_ID
	,FCT_FUEL_REWARD_LIABILITY.OFFER_TYPE_CODE
	,FCT_FUEL_REWARD_LIABILITY.FUEL_OFFER_TYPE_ID
	,FCT_FUEL_REWARD_LIABILITY.STARTING_DISCOUNT_PER_GALLON
	,FCT_FUEL_REWARD_LIABILITY.REMAINING_DISCOUNT_PER_GALLON
	,CASE 
		WHEN (
				(
					(FCT_FUEL_REWARD_LIABILITY.ISSUANCE_DATETIME > '2019-06-22 00:00:00')
					AND (TO_NUMBER(FCT_FUEL_REWARD_LIABILITY.RM_RETAILER_NUMBER) in (11895,-1))
					)
				AND (
					NOT (
						(
							(
								(
									(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 238)
									OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 210)
									)
								OR (
									(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 135)
									OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 169)
									)
								)
							OR (
								(
									(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 185)
									OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 190)
									)
								OR (
									(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 202)
									OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 222)
									)
								)
							)
						OR (
							(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 236)
							OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 173)
							)
						)
					)
				)
			THEN ROUND((FCT_FUEL_REWARD_LIABILITY.TOTAL_EARNED / '100'), 2)
		WHEN (
				(
					(FCT_FUEL_REWARD_LIABILITY.ISSUANCE_DATETIME > '2020-01-12 00:00:00')
					AND (TO_NUMBER(FCT_FUEL_REWARD_LIABILITY.RM_RETAILER_NUMBER) in (11895,-1))
					)
				AND (
					(
						(
							(
								(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 238)
								OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 210)
								)
							OR (
								(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 135)
								OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 169)
								)
							)
						OR (
							(
								(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 185)
								OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 190)
								)
							OR (
								(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 202)
								OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 222)
								)
							)
						)
					OR (
						(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 236)
						OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 173)
						)
					)
				)
			THEN ROUND((FCT_FUEL_REWARD_LIABILITY.TOTAL_EARNED / '100'), 2)
		ELSE FCT_FUEL_REWARD_LIABILITY.TOTAL_EARNED
		END AS TOTAL_EARNED
	,CASE 
		WHEN (
				(
					(FCT_FUEL_REWARD_LIABILITY.ISSUANCE_DATETIME > '2019-06-22 00:00:00')
					AND (TO_NUMBER(FCT_FUEL_REWARD_LIABILITY.RM_RETAILER_NUMBER) in (11895,-1))
					)
				AND (
					NOT (
						(
							(
								(
									(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 238)
									OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 210)
									)
								OR (
									(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 135)
									OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 169)
									)
								)
							OR (
								(
									(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 185)
									OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 190)
									)
								OR (
									(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 202)
									OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 222)
									)
								)
							)
						OR (
							(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 236)
							OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 173)
							)
						)
					)
				)
			THEN ROUND((FCT_FUEL_REWARD_LIABILITY.TOTAL_REDEEMED / '100'), 2)
		WHEN (
				(
					(FCT_FUEL_REWARD_LIABILITY.ISSUANCE_DATETIME > '2020-01-12 00:00:00')
					AND (TO_NUMBER(FCT_FUEL_REWARD_LIABILITY.RM_RETAILER_NUMBER) in (11895,-1))
					)
				AND (
					(
						(
							(
								(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 238)
								OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 210)
								)
							OR (
								(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 135)
								OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 169)
								)
							)
						OR (
							(
								(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 185)
								OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 190)
								)
							OR (
								(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 202)
								OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 222)
								)
							)
						)
					OR (
						(FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 236)
						OR (FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER = 173)
						)
					)
				)
			THEN ROUND((FCT_FUEL_REWARD_LIABILITY.TOTAL_REDEEMED / '100'), 2)
		ELSE FCT_FUEL_REWARD_LIABILITY.TOTAL_REDEEMED
		END AS TOTAL_REDEEMED
	,FCT_FUEL_REWARD_LIABILITY.TOTAL_OUTSTANDING_LIABILITY
	,FCT_FUEL_REWARD_LIABILITY.TOTAL_ABANDONED
	,FCT_FUEL_REWARD_LIABILITY.TOTAL_EXPIRED
	,FCT_FUEL_REWARD_LIABILITY.GALLON_LIMIT
	,FCT_FUEL_REWARD_LIABILITY.GALLONS_REDEEMED
	,FCT_FUEL_REWARD_LIABILITY.GALLONS_ABANDONED
	,FCT_FUEL_REWARD_LIABILITY.GALLONS_EXPIRED
	,FCT_FUEL_REWARD_LIABILITY.LAST_REDEMPTION_DATETIME
	,FCT_FUEL_REWARD_LIABILITY.LAST_REDEMPTION_FISCAL_DAY_ID
	,FCT_FUEL_REWARD_LIABILITY.REWARD_COMPLETION_FLAG
	,FCT_FUEL_REWARD_LIABILITY.ACTIVE_FLAG
	,FCT_FUEL_REWARD_LIABILITY.EXTRACT_DATE
	,FCT_FUEL_REWARD_LIABILITY.SOURCE_TABLE_NAME
	,FCT_FUEL_REWARD_LIABILITY.CREATE_DATE
	,FCT_FUEL_REWARD_LIABILITY.CREATE_UID
	,FCT_FUEL_REWARD_LIABILITY.MAINT_DATE
	,FCT_FUEL_REWARD_LIABILITY.MAINT_UID
	,FCT_FUEL_REWARD_LIABILITY.DELETE_FLAG
	,FCT_FUEL_REWARD_LIABILITY.DELETE_DATE
	,FCT_FUEL_REWARD_LIABILITY.DELETE_UID
FROM EBIDW.FUEL.FCT_FUEL_REWARD_LIABILITY
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_FUEL_REWARD_LIABILITY.STORE_NUMBER
WHERE (
		(FCT_FUEL_REWARD_LIABILITY.ACTIVE_FLAG = 't'::BOOLEAN)
		AND (FCT_FUEL_REWARD_LIABILITY.DELETE_FLAG = 'f'::BOOLEAN));
create or replace view FCT_FUEL_STORE_LIABILITY_CURRENT(
	FUEL_STORE_LIABILITY_ID,
	FUEL_STORE_LIABILITY_FILE_ID,
	LIABILITY_AS_OF_DATE,
	LIABILITY_AS_OF_FISCAL_DAY_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	STORE_NAME,
	PROGRAM_NUMBER,
	OUSTANDING_TRANSACTION_COUNT,
	TOTAL_OUTSTANDING_DISCOUNT_PER_GALLON,
	GALLON_LIMIT,
	TOTAL_OUTSTANDING_LIABILITY,
	CURRENT_FLAG,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	CREATE_UID,
	MAINT_DATE,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT L.FUEL_STORE_LIABILITY_ID, L.FUEL_STORE_LIABILITY_FILE_ID, L.LIABILITY_AS_OF_DATE, L.LIABILITY_AS_OF_FISCAL_DAY_ID, L.STORE_ID, L.SALES_STORE_ID, L.STORE_NUMBER, L.STORE_NAME, L.PROGRAM_NUMBER, L.OUSTANDING_TRANSACTION_COUNT, L.TOTAL_OUTSTANDING_DISCOUNT_PER_GALLON, L.GALLON_LIMIT, L.TOTAL_OUTSTANDING_LIABILITY, L.CURRENT_FLAG, L.ACTIVE_FLAG, L.EXTRACT_DATE, L.SOURCE_TABLE_NAME, L.CREATE_DATE, L.CREATE_UID, L.MAINT_DATE, L.MAINT_UID, L.DELETE_FLAG, L.DELETE_DATE, L.DELETE_UID From EBIDW.FUEL.FCT_FUEL_STORE_LIABILITY L Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=L.STORE_NUMBER WHERE ((L.DELETE_FLAG = 'f'::BOOLEAN) AND (L.ACTIVE_FLAG = 't'::BOOLEAN));
create or replace view FCT_HUSKY_BUCKS_TRANSACTION_CURRENT(
	HUSKY_BUCKS_TRANSACTION_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	TERMINAL_NUMBER,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	TRANSACTION_DATE,
	HB_TRANSACTION_ID,
	ORIG_HB_TRANSACTION_ID,
	PATRON_LAST_NAME,
	PATRON_FIRST_NAME,
	STUDENT_ID,
	AMOUNT_REQUESTED,
	AMOUNT_APPROVED,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as

SELECT FCT_HUSKY_BUCKS_TRANSACTION.HUSKY_BUCKS_TRANSACTION_ID
	,FCT_HUSKY_BUCKS_TRANSACTION.STORE_ID
	,FCT_HUSKY_BUCKS_TRANSACTION.SALES_STORE_ID
	,FCT_HUSKY_BUCKS_TRANSACTION.STORE_NUMBER
	,FCT_HUSKY_BUCKS_TRANSACTION.TERMINAL_NUMBER
	,FCT_HUSKY_BUCKS_TRANSACTION.BUSINESS_DATE
	,FCT_HUSKY_BUCKS_TRANSACTION.BUSINESS_FISCAL_DAY_ID
	,FCT_HUSKY_BUCKS_TRANSACTION.TRANSACTION_DATE
	,RIGHT(FCT_HUSKY_BUCKS_TRANSACTION.HB_TRANSACTION_ID, 4) AS HB_TRANSACTION_ID
	,FCT_HUSKY_BUCKS_TRANSACTION.HB_TRANSACTION_ID AS ORIG_HB_TRANSACTION_ID
	,FCT_HUSKY_BUCKS_TRANSACTION.PATRON_LAST_NAME
	,FCT_HUSKY_BUCKS_TRANSACTION.PATRON_FIRST_NAME
	,FCT_HUSKY_BUCKS_TRANSACTION.STUDENT_ID
	,FCT_HUSKY_BUCKS_TRANSACTION.AMOUNT_REQUESTED
	,FCT_HUSKY_BUCKS_TRANSACTION.AMOUNT_APPROVED
	,FCT_HUSKY_BUCKS_TRANSACTION.ACTIVE_FLAG
	,FCT_HUSKY_BUCKS_TRANSACTION.EXTRACT_DATE
	,FCT_HUSKY_BUCKS_TRANSACTION.SOURCE_TABLE_NAME
	,FCT_HUSKY_BUCKS_TRANSACTION.CREATE_DATE
	,FCT_HUSKY_BUCKS_TRANSACTION.MAINT_DATE
	,FCT_HUSKY_BUCKS_TRANSACTION.CREATE_UID
	,FCT_HUSKY_BUCKS_TRANSACTION.MAINT_UID
	,FCT_HUSKY_BUCKS_TRANSACTION.DELETE_FLAG
	,FCT_HUSKY_BUCKS_TRANSACTION.DELETE_DATE
	,FCT_HUSKY_BUCKS_TRANSACTION.DELETE_UID
FROM EBIDW.TREASURY.FCT_HUSKY_BUCKS_TRANSACTION
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_HUSKY_BUCKS_TRANSACTION.STORE_NUMBER
WHERE ((FCT_HUSKY_BUCKS_TRANSACTION.DELETE_FLAG = 'f'::BOOLEAN));
create or replace view FCT_INSTACART_DELIVERY_CURRENT(
	INSTACART_DELIVERY_ID,
	INSTACART_DELIVERY_NUMBER,
	INSTACART_ORDER_ID,
	INSTACART_ORDER_NUMBER,
	STORE_ID,
	SALES_STORE_NUMBER,
	DELIVERY_FISCAL_DAY_ID,
	DELIVERY_DATE,
	DELIVERY_DATETIME,
	DELIVERY_ZIP_CODE,
	IS_DELIVERY,
	IS_PICKUP,
	IS_ALCOHOLIC
) as
SELECT	 S.INSTACART_DELIVERY_ID
		,S.INSTACART_DELIVERY_NUMBER
		,S.INSTACART_ORDER_ID
		,S.INSTACART_ORDER_NUMBER
		,S.STORE_ID
		,S.SALES_STORE_NUMBER
		,S.DELIVERY_FISCAL_DAY_ID
		,S.DELIVERY_DATE
		,S.DELIVERY_DATETIME
		,S.DELIVERY_ZIP_CODE
		,S.IS_DELIVERY
		,S.IS_PICKUP
		,S.IS_ALCOHOLIC
FROM EBIDW.INSTACART.FCT_INSTACART_DELIVERY AS S
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=S.SALES_STORE_NUMBER
WHERE (ACTIVE_FLAG = TRUE);
create or replace view FCT_INSTACART_OUT_OF_STOCK_CURRENT(
	INSTACART_OUT_OF_STOCK_ID,
	INSTACART_ORDER_ID,
	INSTACART_ORDER_NUMBER,
	INSTACART_ORDER_ITEM_NUMBER,
	STORE_ID,
	INSTACART_STORE_NUMBER,
	PICKED_DATETIME,
	ORDERED_ITEM_ID,
	ORDERED_INSTACART_ITEM_UPC,
	ORDERED_INSTACART_ITEM_LABEL,
	ORDERED_INSTACART_BRAND_LABEL,
	DELIVERED_ITEM_ID,
	DELIVERED_INSTACART_ITEM_UPC,
	DELIVERED_INSTACART_ITEM_LABEL,
	DELIVERED_INSTACART_BRAND_LABEL,
	ORDERED_QUANTITY,
	UNFOUND_QUANTITY,
	FOUND_QUANTITY,
	REPLACED_QUANTITY,
	SHOPPER_REASON_CODE
) as
SELECT	 S.INSTACART_OUT_OF_STOCK_ID
		,S.INSTACART_ORDER_ID
		,S.INSTACART_ORDER_NUMBER
		,S.INSTACART_ORDER_ITEM_NUMBER
		,S.STORE_ID
		,S.INSTACART_STORE_NUMBER
		,S.PICKED_DATETIME
		,S.ORDERED_ITEM_ID
		,S.ORDERED_INSTACART_ITEM_UPC
		,S.ORDERED_INSTACART_ITEM_LABEL
		,S.ORDERED_INSTACART_BRAND_LABEL
		,S.DELIVERED_ITEM_ID
		,S.DELIVERED_INSTACART_ITEM_UPC
		,S.DELIVERED_INSTACART_ITEM_LABEL
		,S.DELIVERED_INSTACART_BRAND_LABEL
		,S.ORDERED_QUANTITY
		,S.UNFOUND_QUANTITY
		,S.FOUND_QUANTITY
		,S.REPLACED_QUANTITY
		, S.SHOPPER_REASON_CODE
FROM EBIDW.INSTACART.FCT_INSTACART_OUT_OF_STOCK AS S
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.STORE_ID=S.STORE_ID
WHERE ACTIVE_FLAG = TRUE;
create or replace view FCT_INVENTORY_POSITION_CURRENT(
	INVENTORY_POSITION_ID,
	BATCH_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	ITEM_ID,
	MERCH_ITEM_ID,
	PRIMARY_UPC,
	POSITION_FISCAL_DAY_ID,
	POSITION_DATE,
	POSITION_SEQUENCE_NUMBER,
	INCEPTION_DATE,
	INCEPTION_QUANTITY,
	QUANTITY,
	UNIT_VALUE,
	EXTENDED_VALUE,
	SKU_QUANTITY,
	SKU_UNIT_VALUE,
	THIRD_PARTY_COUNT_FLAG,
	ADJUSTMENT_POSITION_FLAG,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID
) as SELECT FCT_INVENTORY_POSITION.INVENTORY_POSITION_ID, FCT_INVENTORY_POSITION.BATCH_ID, FCT_INVENTORY_POSITION.STORE_ID, FCT_INVENTORY_POSITION.SALES_STORE_ID, FCT_INVENTORY_POSITION.STORE_NUMBER, FCT_INVENTORY_POSITION.ITEM_ID, FCT_INVENTORY_POSITION.MERCH_ITEM_ID, FCT_INVENTORY_POSITION.PRIMARY_UPC, FCT_INVENTORY_POSITION.POSITION_FISCAL_DAY_ID, FCT_INVENTORY_POSITION.POSITION_DATE, FCT_INVENTORY_POSITION.POSITION_SEQUENCE_NUMBER, FCT_INVENTORY_POSITION.INCEPTION_DATE, FCT_INVENTORY_POSITION.INCEPTION_QUANTITY, FCT_INVENTORY_POSITION.QUANTITY, FCT_INVENTORY_POSITION.UNIT_VALUE, FCT_INVENTORY_POSITION.EXTENDED_VALUE, FCT_INVENTORY_POSITION.SKU_QUANTITY, FCT_INVENTORY_POSITION.SKU_UNIT_VALUE, FCT_INVENTORY_POSITION.THIRD_PARTY_COUNT_FLAG, FCT_INVENTORY_POSITION.ADJUSTMENT_POSITION_FLAG, FCT_INVENTORY_POSITION.SOURCE_TABLE_NAME, FCT_INVENTORY_POSITION.CREATE_DATE, FCT_INVENTORY_POSITION.MAINT_DATE, FCT_INVENTORY_POSITION.CREATE_UID, FCT_INVENTORY_POSITION.MAINT_UID From EBIDW.PI.FCT_INVENTORY_POSITION Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_INVENTORY_POSITION.STORE_NUMBER;
create or replace view FCT_INVOICE_CURRENT(
	INVOICE_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	INVOICE_ID,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	NUM_LINE_ITEMS,
	VENDOR_ID,
	AP_VENDOR_ID,
	SUPPLIER_NUMBER,
	INVOICE_NUMBER,
	RETURN_INVOICE_FLAG,
	INVOICE_DATE,
	INVOICE_FISCAL_DAY_ID,
	FINAL_TIMESTAMP,
	FINAL_FISCAL_DAY_ID,
	FINAL_TOTAL_QUANTITY,
	FINAL_TOTAL_NET,
	FINAL_TOTAL_RETAIL,
	METHOD,
	INVOICE_PAID_COD,
	USER_ID,
	RETURN_AUTHORIZATION,
	RETURN_REASON_CODE,
	DELIVERY_TIMESTAMP,
	FLAGS,
	BASE_TOTAL_QUANTITY,
	BASE_MISC_CHARGE,
	BASE_MISC_ALLOWANCE,
	BASE_TOTAL_NET,
	FINAL_TOTAL_EXTENDED_COST,
	FINAL_MISC_CHARGE,
	FINAL_MISC_ALLOWANCE,
	FINAL_TOTAL_EXTENDED_DEPOSIT,
	SPECIAL_INVOICE_FLAG,
	SALVAGE_INVOICE_FLAG,
	WAREHOUSE_INVOICE_FLAG,
	DSD_INVOICE_FLAG,
	DISTRIBUTION_INVOICE_FLAG,
	DOCUMENT_NUMBER,
	EDIT_HEADER_ID,
	LOAD_TIMESTAMP,
	UPDATE_TIMESTAMP,
	LINE_NUMBER,
	SKIPPED_TICKET_FLAG,
	VOIDED_FLAG,
	ORIGINAL_BUSINESS_DATE,
	ORIGINAL_BUSINESS_FISCAL_DAY_ID,
	EXTRACT_FILE_NAME,
	EXTRACT_FILE_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_INVOICE.INVOICE_HEADER_ID, FCT_INVOICE.DIVISION_NUMBER, FCT_INVOICE.STORE_ID, FCT_INVOICE.SALES_STORE_ID, FCT_INVOICE.STORE_NUMBER, FCT_INVOICE.INVOICE_ID, FCT_INVOICE.BUSINESS_FISCAL_DAY_ID, FCT_INVOICE.BUSINESS_DATE, FCT_INVOICE.NUM_LINE_ITEMS, FCT_INVOICE.VENDOR_ID, FCT_INVOICE.AP_VENDOR_ID, FCT_INVOICE.SUPPLIER_NUMBER, FCT_INVOICE.INVOICE_NUMBER, FCT_INVOICE.RETURN_INVOICE_FLAG, FCT_INVOICE.INVOICE_DATE, FCT_INVOICE.INVOICE_FISCAL_DAY_ID, FCT_INVOICE.FINAL_TIMESTAMP, FCT_INVOICE.FINAL_FISCAL_DAY_ID, FCT_INVOICE.FINAL_TOTAL_QUANTITY, FCT_INVOICE.FINAL_TOTAL_NET, FCT_INVOICE.FINAL_TOTAL_RETAIL, FCT_INVOICE.METHOD, FCT_INVOICE.INVOICE_PAID_COD, FCT_INVOICE.USER_ID, FCT_INVOICE.RETURN_AUTHORIZATION, FCT_INVOICE.RETURN_REASON_CODE, FCT_INVOICE.DELIVERY_TIMESTAMP, FCT_INVOICE.FLAGS, FCT_INVOICE.BASE_TOTAL_QUANTITY, FCT_INVOICE.BASE_MISC_CHARGE, FCT_INVOICE.BASE_MISC_ALLOWANCE, FCT_INVOICE.BASE_TOTAL_NET, FCT_INVOICE.FINAL_TOTAL_EXTENDED_COST, FCT_INVOICE.FINAL_MISC_CHARGE, FCT_INVOICE.FINAL_MISC_ALLOWANCE, FCT_INVOICE.FINAL_TOTAL_EXTENDED_DEPOSIT, FCT_INVOICE.SPECIAL_INVOICE_FLAG, FCT_INVOICE.SALVAGE_INVOICE_FLAG, FCT_INVOICE.WAREHOUSE_INVOICE_FLAG, FCT_INVOICE.DSD_INVOICE_FLAG, CASE WHEN (("SUBSTRING"(FCT_INVOICE.INVOICE_NUMBER, 8, 1) = 'D') OR ("SUBSTRING"(FCT_INVOICE.INVOICE_NUMBER, 8, 1) = 'F')) THEN 't'::BOOLEAN ELSE 'f'::BOOLEAN END AS DISTRIBUTION_INVOICE_FLAG, (CASE WHEN (FCT_INVOICE.SKIPPED_TICKET_FLAG = 't'::BOOLEAN) THEN 'MA' WHEN (("SUBSTRING"(FCT_INVOICE.INVOICE_NUMBER, 8, 1) = 'D') OR ("SUBSTRING"(FCT_INVOICE.INVOICE_NUMBER, 8, 1) = 'F')) THEN 'DS' ELSE "SUBSTRING"(FCT_INVOICE.INVOICE_NUMBER, 2, 2) END || "SUBSTRING"(FCT_INVOICE.INVOICE_NUMBER, 4, 4)) AS DOCUMENT_NUMBER, FCT_INVOICE.EDIT_HEADER_ID, FCT_INVOICE.LOAD_TIMESTAMP, FCT_INVOICE.UPDATE_TIMESTAMP, FCT_INVOICE.LINE_NUMBER, FCT_INVOICE.SKIPPED_TICKET_FLAG, FCT_INVOICE.VOIDED_FLAG, FCT_INVOICE.ORIGINAL_BUSINESS_DATE, FCT_INVOICE.ORIGINAL_BUSINESS_FISCAL_DAY_ID, FCT_INVOICE.EXTRACT_FILE_NAME, FCT_INVOICE.EXTRACT_FILE_ID, FCT_INVOICE.EXTRACT_DATE, FCT_INVOICE.SOURCE_TABLE_NAME, FCT_INVOICE.CREATE_DATE, FCT_INVOICE.MAINT_DATE, FCT_INVOICE.CREATE_UID, FCT_INVOICE.MAINT_UID, FCT_INVOICE.DELETE_FLAG, FCT_INVOICE.DELETE_DATE, FCT_INVOICE.DELETE_UID From EBIDW.PI.FCT_INVOICE Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_INVOICE.STORE_NUMBER;
create or replace view FCT_INVOICE_DETAIL_CURRENT(
	INVOICE_DETAIL_ID,
	INVOICE_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	INVOICE_ID,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	SEQUENCE_NUMBER,
	SHIPPER_SUB_SEQUENCE_NUMBER,
	PO_NUMBER,
	PRIMARY_ITEM_ID,
	PRIMARY_MERCH_ITEM_ID,
	PRIMARY_UPC,
	ACTUAL_ITEM_ID,
	ACTUAL_MERCH_ITEM_ID,
	ACTUAL_UPC,
	EXCEPTION,
	INVENTORY_UNITS,
	FINAL_QUANTITY,
	FINAL_QUANTITY_UNIT_OF_MEASURE,
	FINAL_PACK_QUANTITY,
	FINAL_COST,
	FINAL_ALLOWANCE,
	LAST_EDITED_COST,
	LAST_EDIT_HEADER_ID,
	FINAL_EDITED_COST,
	SUPPLIER_NUMBER,
	INVOICE_NUMBER,
	RETURN_INVOICE_FLAG,
	ORDERED_ORDER_CODE,
	DESCRIPTION,
	SIZE_DESCRIPTION,
	ITEM_TYPE,
	FLAGS,
	RECV_SELL_CONVERSION,
	BASE_QUANTITY,
	BASE_QUANTITY_UNIT_OF_MEASURE,
	BASE_PACK_QUANTITY,
	STORE_PACK_QUANTITY,
	BASE_COST,
	STORE_COST,
	BASE_ALLOWANCE,
	STORE_ALLOWANCE,
	DEPOSIT,
	DEPOSIT_MULTIPLE,
	BILLING_PRICE,
	BILLING_PRICE_MULTIPLE,
	EXTENDED_QUANTITY,
	EXTENDED_SKU_QUANTITY,
	EXTENDED_UPC_QUANTITY,
	EXTENDED_COST,
	EXTENDED_INVENTORY_VALUE,
	EXTENDED_MARGIN_ADJUSTMENT,
	EXTENDED_BILLING_ADJUSTMENT,
	INVENTORY_DIRECTION_MULTIPLIER,
	EDIT_ORIGINAL_FLAG,
	EDIT_REVERSAL_FLAG,
	EDIT_UPDATED_FLAG,
	SHIPPER_ORIGINAL_FLAG,
	SHIPPER_EXPLODED_FLAG,
	SHIPPER_ALLOCATED_FLAG,
	SKIPPED_TICKET_FLAG,
	NON_INVENTORY_FLAG,
	MANUAL_UPC_FLAG,
	LOAD_TIMESTAMP,
	UPDATE_TIMESTAMP,
	PI_STATUS_CODE,
	PI_ORIGINAL_XREF,
	PI_ORIGINAL_STORE_NUMBER,
	PI_ORIGINAL_BUSINESS_DATE,
	PI_ORIGINAL_INVOICE_ID,
	PI_ORIGINAL_SEQUENCE_NUMBER,
	PI_LAST_EDIT_ID,
	ORIGINAL_BUSINESS_DATE,
	ORIGINAL_BUSINESS_FISCAL_DAY_ID,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	EXTRACT_FILE_NAME,
	EXTRACT_FILE_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_INVOICE_DETAIL.INVOICE_DETAIL_ID, FCT_INVOICE_DETAIL.INVOICE_HEADER_ID, FCT_INVOICE_DETAIL.DIVISION_NUMBER, FCT_INVOICE_DETAIL.STORE_ID, FCT_INVOICE_DETAIL.SALES_STORE_ID, FCT_INVOICE_DETAIL.STORE_NUMBER, FCT_INVOICE_DETAIL.INVOICE_ID, FCT_INVOICE_DETAIL.BUSINESS_FISCAL_DAY_ID, FCT_INVOICE_DETAIL.BUSINESS_DATE, FCT_INVOICE_DETAIL.SEQUENCE_NUMBER, FCT_INVOICE_DETAIL.SHIPPER_SUB_SEQUENCE_NUMBER, FCT_INVOICE_DETAIL.PO_NUMBER, FCT_INVOICE_DETAIL.PRIMARY_ITEM_ID, FCT_INVOICE_DETAIL.PRIMARY_MERCH_ITEM_ID, FCT_INVOICE_DETAIL.PRIMARY_UPC, FCT_INVOICE_DETAIL.ACTUAL_ITEM_ID, FCT_INVOICE_DETAIL.ACTUAL_MERCH_ITEM_ID, FCT_INVOICE_DETAIL.ACTUAL_UPC, FCT_INVOICE_DETAIL.EXCEPTION, FCT_INVOICE_DETAIL.INVENTORY_UNITS, FCT_INVOICE_DETAIL.FINAL_QUANTITY, FCT_INVOICE_DETAIL.FINAL_QUANTITY_UNIT_OF_MEASURE, FCT_INVOICE_DETAIL.FINAL_PACK_QUANTITY, FCT_INVOICE_DETAIL.FINAL_COST, FCT_INVOICE_DETAIL.FINAL_ALLOWANCE, FCT_INVOICE_DETAIL.LAST_EDITED_COST, FCT_INVOICE_DETAIL.LAST_EDIT_HEADER_ID, FCT_INVOICE_DETAIL.FINAL_EDITED_COST, FCT_INVOICE_DETAIL.SUPPLIER_NUMBER, FCT_INVOICE_DETAIL.INVOICE_NUMBER, FCT_INVOICE_DETAIL.RETURN_INVOICE_FLAG, FCT_INVOICE_DETAIL.ORDERED_ORDER_CODE, FCT_INVOICE_DETAIL."DESCRIPTION", FCT_INVOICE_DETAIL.SIZE_DESCRIPTION, FCT_INVOICE_DETAIL.ITEM_TYPE, FCT_INVOICE_DETAIL.FLAGS, FCT_INVOICE_DETAIL.RECV_SELL_CONVERSION, FCT_INVOICE_DETAIL.BASE_QUANTITY, FCT_INVOICE_DETAIL.BASE_QUANTITY_UNIT_OF_MEASURE, FCT_INVOICE_DETAIL.BASE_PACK_QUANTITY, FCT_INVOICE_DETAIL.STORE_PACK_QUANTITY, FCT_INVOICE_DETAIL.BASE_COST, FCT_INVOICE_DETAIL.STORE_COST, FCT_INVOICE_DETAIL.BASE_ALLOWANCE, FCT_INVOICE_DETAIL.STORE_ALLOWANCE, FCT_INVOICE_DETAIL.DEPOSIT, FCT_INVOICE_DETAIL.DEPOSIT_MULTIPLE, FCT_INVOICE_DETAIL.BILLING_PRICE, FCT_INVOICE_DETAIL.BILLING_PRICE_MULTIPLE, (FCT_INVOICE_DETAIL.EXTENDED_QUANTITY * TO_NUMBER(FCT_INVOICE_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_QUANTITY, (FCT_INVOICE_DETAIL.EXTENDED_SKU_QUANTITY * TO_NUMBER(FCT_INVOICE_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_SKU_QUANTITY, (CASE WHEN (FCT_INVOICE_DETAIL.FINAL_QUANTITY_UNIT_OF_MEASURE = 'C'::VARCHAR) THEN (FCT_INVOICE_DETAIL.FINAL_QUANTITY * TO_NUMBER(FCT_INVOICE_DETAIL.FINAL_PACK_QUANTITY)) ELSE FCT_INVOICE_DETAIL.FINAL_QUANTITY END * TO_NUMBER(FCT_INVOICE_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_UPC_QUANTITY, (FCT_INVOICE_DETAIL.EXTENDED_COST * TO_NUMBER(FCT_INVOICE_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_COST, (FCT_INVOICE_DETAIL.EXTENDED_INVENTORY_VALUE * TO_NUMBER(FCT_INVOICE_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_INVENTORY_VALUE, (FCT_INVOICE_DETAIL.EXTENDED_MARGIN_ADJUSTMENT * TO_NUMBER(FCT_INVOICE_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_MARGIN_ADJUSTMENT, CASE WHEN (FCT_INVOICE_DETAIL.INVENTORY_DIRECTION_MULTIPLIER = 0) THEN 0 ELSE FCT_INVOICE_DETAIL.EXTENDED_BILLING_ADJUSTMENT END AS EXTENDED_BILLING_ADJUSTMENT, FCT_INVOICE_DETAIL.INVENTORY_DIRECTION_MULTIPLIER, FCT_INVOICE_DETAIL.EDIT_ORIGINAL_FLAG, FCT_INVOICE_DETAIL.EDIT_REVERSAL_FLAG, FCT_INVOICE_DETAIL.EDIT_UPDATED_FLAG, FCT_INVOICE_DETAIL.SHIPPER_ORIGINAL_FLAG, FCT_INVOICE_DETAIL.SHIPPER_EXPLODED_FLAG, FCT_INVOICE_DETAIL.SHIPPER_ALLOCATED_FLAG, FCT_INVOICE_DETAIL.SKIPPED_TICKET_FLAG, FCT_INVOICE_DETAIL.NON_INVENTORY_FLAG, FCT_INVOICE_DETAIL.MANUAL_UPC_FLAG, FCT_INVOICE_DETAIL.LOAD_TIMESTAMP, FCT_INVOICE_DETAIL.UPDATE_TIMESTAMP, FCT_INVOICE_DETAIL.PI_STATUS_CODE, FCT_INVOICE_DETAIL.PI_ORIGINAL_XREF, CASE WHEN (CASE WHEN (FCT_INVOICE_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_INVOICE_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_INVOICE_DETAIL.STORE_NUMBER ELSE TO_NUMBER("SUBSTRING"(FCT_INVOICE_DETAIL.PI_ORIGINAL_XREF, 1, 3)) END AS PI_ORIGINAL_STORE_NUMBER, CASE WHEN (CASE WHEN (FCT_INVOICE_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_INVOICE_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_INVOICE_DETAIL.BUSINESS_DATE ELSE (TO_DATE("SUBSTRING"(FCT_INVOICE_DETAIL.PI_ORIGINAL_XREF, 5, 10), 'MM-DD-YYYY')) END AS PI_ORIGINAL_BUSINESS_DATE, CASE WHEN (CASE WHEN (FCT_INVOICE_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_INVOICE_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_INVOICE_DETAIL.INVOICE_ID ELSE TO_NUMBER("SUBSTRING"(FCT_INVOICE_DETAIL.PI_ORIGINAL_XREF, 16, 10)) END AS PI_ORIGINAL_INVOICE_ID, CASE WHEN (CASE WHEN (FCT_INVOICE_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_INVOICE_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_INVOICE_DETAIL.SEQUENCE_NUMBER ELSE TO_NUMBER("SUBSTRING"(FCT_INVOICE_DETAIL.PI_ORIGINAL_XREF, 27, 10)) END AS PI_ORIGINAL_SEQUENCE_NUMBER, FCT_INVOICE_DETAIL.PI_LAST_EDIT_ID, FCT_INVOICE_DETAIL.ORIGINAL_BUSINESS_DATE, FCT_INVOICE_DETAIL.ORIGINAL_BUSINESS_FISCAL_DAY_ID, FCT_INVOICE_DETAIL.LINE_NUMBER, FCT_INVOICE_DETAIL.MASTER_LINE_NUMBER, FCT_INVOICE_DETAIL.EXTRACT_FILE_NAME, FCT_INVOICE_DETAIL.EXTRACT_FILE_ID, FCT_INVOICE_DETAIL.EXTRACT_DATE, FCT_INVOICE_DETAIL.SOURCE_TABLE_NAME, FCT_INVOICE_DETAIL.CREATE_DATE, FCT_INVOICE_DETAIL.MAINT_DATE, FCT_INVOICE_DETAIL.CREATE_UID, FCT_INVOICE_DETAIL.MAINT_UID, FCT_INVOICE_DETAIL.DELETE_FLAG, FCT_INVOICE_DETAIL.DELETE_DATE, FCT_INVOICE_DETAIL.DELETE_UID From EBIDW.PI.FCT_INVOICE_DETAIL Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER= FCT_INVOICE_DETAIL.STORE_NUMBER;
create or replace view FCT_ITEM_LEVEL_FUEL_DETAIL_CURRENT(
	ITEM_LEVEL_FUEL_DETAIL_ID,
	ORDER_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	TRANSACTION_DATE,
	TRANSACTION_FISCAL_DAY_ID,
	ORDER_NUMBER,
	ORDER_LINE_NUMBER,
	ITEM_FUEL_CODE,
	FLU_CODE,
	TRANSACTION_TIME,
	ITEM_FUEL_DESCRIPTION,
	ITEM_FUEL_QUANTITY,
	ITEM_FUEL_AMOUNT,
	MINIMUM_SPEND_REQUIREMENT,
	MINIMUM_COUNT_REQUIREMENT,
	MINIMUM_WEIGHT_REQUIREMENT,
	MAX_REDEMPTION,
	REQUIREMENT_TYPE,
	POS_DEPARTMENT_ID,
	POS_DEPARTMENT_NUMBER,
	TOTAL_REWARD_AMOUNT,
	TERMINAL_NUMBER,
	FUEL_APPLIED_INDICATOR,
	POB_OVERRIDE_INDICATOR,
	POB_OVERRIDE_DATE,
	POB_OVERRIDE_FISCAL_DAY_ID,
	POB_JOURNAL_ID,
	POB_JOURNAL_ENTRY_ID,
	MAX_GALLONS,
	MAX_REWARD,
	ACTUAL_GALLONS,
	ACTUAL_REWARD,
	M_SUPPORT,
	FLU_DIRECTION_MULTIPLIER,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	JOURNAL_FILE_NAME,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_ITEM_LEVEL_FUEL_DETAIL.ITEM_LEVEL_FUEL_DETAIL_ID, FCT_ITEM_LEVEL_FUEL_DETAIL.ORDER_HEADER_ID, FCT_ITEM_LEVEL_FUEL_DETAIL.DIVISION_NUMBER, FCT_ITEM_LEVEL_FUEL_DETAIL.STORE_ID, FCT_ITEM_LEVEL_FUEL_DETAIL.SALES_STORE_ID, FCT_ITEM_LEVEL_FUEL_DETAIL.STORE_NUMBER, FCT_ITEM_LEVEL_FUEL_DETAIL.BUSINESS_DATE, FCT_ITEM_LEVEL_FUEL_DETAIL.BUSINESS_FISCAL_DAY_ID, FCT_ITEM_LEVEL_FUEL_DETAIL.TRANSACTION_DATE, FCT_ITEM_LEVEL_FUEL_DETAIL.TRANSACTION_FISCAL_DAY_ID, FCT_ITEM_LEVEL_FUEL_DETAIL.ORDER_NUMBER, FCT_ITEM_LEVEL_FUEL_DETAIL.ORDER_LINE_NUMBER, FCT_ITEM_LEVEL_FUEL_DETAIL.ITEM_FUEL_CODE, FCT_ITEM_LEVEL_FUEL_DETAIL.FLU_CODE, FCT_ITEM_LEVEL_FUEL_DETAIL.TRANSACTION_TIME, FCT_ITEM_LEVEL_FUEL_DETAIL.ITEM_FUEL_DESCRIPTION, FCT_ITEM_LEVEL_FUEL_DETAIL.ITEM_FUEL_QUANTITY, FCT_ITEM_LEVEL_FUEL_DETAIL.ITEM_FUEL_AMOUNT, FCT_ITEM_LEVEL_FUEL_DETAIL.MINIMUM_SPEND_REQUIREMENT, FCT_ITEM_LEVEL_FUEL_DETAIL.MINIMUM_COUNT_REQUIREMENT, FCT_ITEM_LEVEL_FUEL_DETAIL.MINIMUM_WEIGHT_REQUIREMENT, FCT_ITEM_LEVEL_FUEL_DETAIL.MAX_REDEMPTION, FCT_ITEM_LEVEL_FUEL_DETAIL.REQUIREMENT_TYPE, FCT_ITEM_LEVEL_FUEL_DETAIL.POS_DEPARTMENT_ID, FCT_ITEM_LEVEL_FUEL_DETAIL.POS_DEPARTMENT_NUMBER, FCT_ITEM_LEVEL_FUEL_DETAIL.TOTAL_REWARD_AMOUNT, FCT_ITEM_LEVEL_FUEL_DETAIL.TERMINAL_NUMBER, FCT_ITEM_LEVEL_FUEL_DETAIL.FUEL_APPLIED_INDICATOR, FCT_ITEM_LEVEL_FUEL_DETAIL.POB_OVERRIDE_INDICATOR, FCT_ITEM_LEVEL_FUEL_DETAIL.POB_OVERRIDE_DATE, FCT_ITEM_LEVEL_FUEL_DETAIL.POB_OVERRIDE_FISCAL_DAY_ID, FCT_ITEM_LEVEL_FUEL_DETAIL.POB_JOURNAL_ID, FCT_ITEM_LEVEL_FUEL_DETAIL.POB_JOURNAL_ENTRY_ID, FCT_ITEM_LEVEL_FUEL_DETAIL.MAX_GALLONS, FCT_ITEM_LEVEL_FUEL_DETAIL.MAX_REWARD, FCT_ITEM_LEVEL_FUEL_DETAIL.ACTUAL_GALLONS, FCT_ITEM_LEVEL_FUEL_DETAIL.ACTUAL_REWARD, FCT_ITEM_LEVEL_FUEL_DETAIL.M_SUPPORT, FCT_ITEM_LEVEL_FUEL_DETAIL.FLU_DIRECTION_MULTIPLIER, FCT_ITEM_LEVEL_FUEL_DETAIL.LINE_NUMBER, FCT_ITEM_LEVEL_FUEL_DETAIL.MASTER_LINE_NUMBER, FCT_ITEM_LEVEL_FUEL_DETAIL.JOURNAL_FILE_NAME, FCT_ITEM_LEVEL_FUEL_DETAIL.EXTRACT_DATE, FCT_ITEM_LEVEL_FUEL_DETAIL.SOURCE_TABLE_NAME, FCT_ITEM_LEVEL_FUEL_DETAIL.CREATE_DATE, FCT_ITEM_LEVEL_FUEL_DETAIL.MAINT_DATE, FCT_ITEM_LEVEL_FUEL_DETAIL.CREATE_UID, FCT_ITEM_LEVEL_FUEL_DETAIL.MAINT_UID, FCT_ITEM_LEVEL_FUEL_DETAIL.DELETE_FLAG, FCT_ITEM_LEVEL_FUEL_DETAIL.DELETE_DATE, FCT_ITEM_LEVEL_FUEL_DETAIL.DELETE_UID From EBIDW.POS.FCT_ITEM_LEVEL_FUEL_DETAIL Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_ITEM_LEVEL_FUEL_DETAIL.STORE_NUMBER WHERE (FCT_ITEM_LEVEL_FUEL_DETAIL.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_MB_SKIPPED_TICKET_CURRENT(
	MB_SKIPPED_TICKET_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	ACCOUNTING_FISCAL_WEEK_ID,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	COST,
	DOCUMENT_ID,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_MB_SKIPPED_TICKET.MB_SKIPPED_TICKET_ID, FCT_MB_SKIPPED_TICKET.STORE_ID, FCT_MB_SKIPPED_TICKET.SALES_STORE_ID, FCT_MB_SKIPPED_TICKET.STORE_NUMBER, FCT_MB_SKIPPED_TICKET.ACCOUNTING_FISCAL_WEEK_ID, FCT_MB_SKIPPED_TICKET.BUSINESS_FISCAL_DAY_ID, FCT_MB_SKIPPED_TICKET.BUSINESS_DATE, FCT_MB_SKIPPED_TICKET.COST, FCT_MB_SKIPPED_TICKET.DOCUMENT_ID, FCT_MB_SKIPPED_TICKET.ACTIVE_FLAG, FCT_MB_SKIPPED_TICKET.EXTRACT_DATE, FCT_MB_SKIPPED_TICKET.SOURCE_TABLE_NAME, FCT_MB_SKIPPED_TICKET.CREATE_DATE, FCT_MB_SKIPPED_TICKET.MAINT_DATE, FCT_MB_SKIPPED_TICKET.CREATE_UID, FCT_MB_SKIPPED_TICKET.MAINT_UID, FCT_MB_SKIPPED_TICKET.DELETE_FLAG, FCT_MB_SKIPPED_TICKET.DELETE_DATE, FCT_MB_SKIPPED_TICKET.DELETE_UID From EBIDW.MB.FCT_MB_SKIPPED_TICKET 
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_MB_SKIPPED_TICKET.STORE_NUMBER;
create or replace view FCT_OFFER_CURRENT(
	OFFER_ID,
	ITEM_ID,
	UPC_NUMBER,
	ITEM_CODE,
	STORE_ID,
	STORE_NUMBER,
	START_FISCAL_DAY_ID,
	START_DATE,
	END_FISCAL_DAY_ID,
	END_DATE,
	RETAIL_EVENT_TYPE_ID,
	RETAIL_EVENT_TYPE_NUMBER,
	M_SUPPORT_AMOUNT,
	BUY_QUANTITY,
	GET_QUANTITY,
	PURCHASE_REQUIRED_QUANTITY,
	PURCHASE_LIMIT_QUANTITY,
	ADJUSTMENT_PERCENT,
	ADJUSTMENT_AMOUNT,
	COUPON_NUMBER,
	ADD_DATE,
	LAST_MODIFIED_DATE,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_OFFER.OFFER_ID, FCT_OFFER.ITEM_ID, FCT_OFFER.UPC_NUMBER, FCT_OFFER.ITEM_CODE, FCT_OFFER.STORE_ID, FCT_OFFER.STORE_NUMBER, FCT_OFFER.START_FISCAL_DAY_ID, FCT_OFFER.START_DATE, FCT_OFFER.END_FISCAL_DAY_ID, FCT_OFFER.END_DATE, FCT_OFFER.RETAIL_EVENT_TYPE_ID, FCT_OFFER.RETAIL_EVENT_TYPE_NUMBER, FCT_OFFER.M_SUPPORT_AMOUNT, FCT_OFFER.BUY_QUANTITY, FCT_OFFER.GET_QUANTITY, FCT_OFFER.PURCHASE_REQUIRED_QUANTITY, FCT_OFFER.PURCHASE_LIMIT_QUANTITY, FCT_OFFER.ADJUSTMENT_PERCENT, FCT_OFFER.ADJUSTMENT_AMOUNT, FCT_OFFER.COUPON_NUMBER, FCT_OFFER.ADD_DATE, FCT_OFFER.LAST_MODIFIED_DATE, FCT_OFFER.EXTRACT_DATE, FCT_OFFER.SOURCE_TABLE_NAME, FCT_OFFER.CREATE_DATE, FCT_OFFER.MAINT_DATE, FCT_OFFER.CREATE_UID, FCT_OFFER.MAINT_UID, FCT_OFFER.DELETE_FLAG, FCT_OFFER.DELETE_DATE, FCT_OFFER.DELETE_UID From EBIDW.MERCH.FCT_OFFER Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_OFFER.STORE_NUMBER WHERE (FCT_OFFER.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_ORDER_DETAIL_CURRENT(
	ORDER_DETAIL_ID,
	ORDER_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	TRANSACTION_DATE,
	TRANSACTION_FISCAL_DAY_ID,
	ORDER_NUMBER,
	ORDER_LINE_NUMBER,
	PRIMARY_ITEM_ID,
	PRIMARY_MERCH_ITEM_ID,
	PRIMARY_UPC,
	ACTUAL_ITEM_ID,
	ACTUAL_MERCH_ITEM_ID,
	ACTUAL_UPC,
	TRANSACTION_TIME,
	ITEM_DESCRIPTION,
	ITEM_SHORT_DESC,
	CLU_CODE,
	FLU_CODE,
	FUEL_APPLIED_INDICATOR,
	PROMOTION_TYPE_ID,
	PROMOTION_TYPE_CODE,
	RX_SCRIPT_NUMBER,
	RX_FILL_NUMBER,
	QUANTITY,
	SCALE_ITEM_CODE,
	AMOUNT_OF_ITEM,
	PRICE_FROM_INVENTORY_DB,
	EXTENDED_PRE_DISCOUNT_RETAIL_AMOUNT,
	EXTENDED_RETAIL_AMOUNT,
	EXTENDED_QUANTITY,
	EXTENDED_SKU_QUANTITY,
	EXTENDED_COST,
	ADVANTEDGE_DISCOUNT_AMOUNT,
	GOLUB_SUPPORT_AMOUNT,
	CLU_M_SUPPORT_AMOUNT,
	EXTENDED_CLU_M_SUPPORT_AMOUNT,
	FLU_M_SUPPORT_AMOUNT,
	EXTENDED_FLU_M_SUPPORT_AMOUNT,
	LINE_QUANTITY,
	LINE_RETAIL_AMOUNT,
	ENTRY_TYPE,
	TERMINAL_NUMBER,
	EASY_SCAN_RECORD,
	RECALLED_ITEM,
	SPECIAL_ITEM_CODE_1,
	SPECIAL_ITEM_CODE_2,
	SPECIAL_ITEM_CODE_3,
	SPECIAL_ITEM_CODE_4,
	SPECIAL_ITEM_CODE_5,
	SPECIAL_ITEM_CODE_6,
	SPECIAL_ITEM_CODE_7,
	TAX_LEVEL_FLAG,
	CASHIER_NUMBER,
	MANAGER_NUMBER,
	POS_DEPARTMENT_ID,
	POS_DEPARTMENT_NUMBER,
	SPLIT_PRICE_FRACTION,
	VOID_ITEM_FLAG,
	REFUND_ITEM_FLAG,
	ADVANTEDGE_ITEM_FLAG,
	SCALE_ITEM_FLAG,
	DEPARTMENT_LEVEL_SALE_FLAG,
	DEPARTMENT_LEVEL_COUPON_FLAG,
	INVENTORY_DIRECTION_MULTIPLIER,
	SALES_DIRECTION_MULTIPLIER,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	JOURNAL_FILE_NAME,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_ORDER_DETAIL.ORDER_DETAIL_ID, FCT_ORDER_DETAIL.ORDER_HEADER_ID, FCT_ORDER_DETAIL.DIVISION_NUMBER, FCT_ORDER_DETAIL.STORE_ID, FCT_ORDER_DETAIL.SALES_STORE_ID, FCT_ORDER_DETAIL.STORE_NUMBER, FCT_ORDER_DETAIL.BUSINESS_DATE, FCT_ORDER_DETAIL.BUSINESS_FISCAL_DAY_ID, FCT_ORDER_DETAIL.TRANSACTION_DATE, FCT_ORDER_DETAIL.TRANSACTION_FISCAL_DAY_ID, FCT_ORDER_DETAIL.ORDER_NUMBER, FCT_ORDER_DETAIL.ORDER_LINE_NUMBER, FCT_ORDER_DETAIL.PRIMARY_ITEM_ID, FCT_ORDER_DETAIL.PRIMARY_MERCH_ITEM_ID, FCT_ORDER_DETAIL.PRIMARY_UPC, FCT_ORDER_DETAIL.ACTUAL_ITEM_ID, FCT_ORDER_DETAIL.ACTUAL_MERCH_ITEM_ID, FCT_ORDER_DETAIL.ACTUAL_UPC, FCT_ORDER_DETAIL.TRANSACTION_TIME, FCT_ORDER_DETAIL.ITEM_DESCRIPTION, FCT_ORDER_DETAIL.ITEM_SHORT_DESC, FCT_ORDER_DETAIL.CLU_CODE, FCT_ORDER_DETAIL.FLU_CODE, FCT_ORDER_DETAIL.FUEL_APPLIED_INDICATOR, FCT_ORDER_DETAIL.PROMOTION_TYPE_ID, FCT_ORDER_DETAIL.PROMOTION_TYPE_CODE, FCT_ORDER_DETAIL.RX_SCRIPT_NUMBER, FCT_ORDER_DETAIL.RX_FILL_NUMBER, FCT_ORDER_DETAIL.QUANTITY, FCT_ORDER_DETAIL.SCALE_ITEM_CODE, FCT_ORDER_DETAIL.AMOUNT_OF_ITEM, FCT_ORDER_DETAIL.PRICE_FROM_INVENTORY_DB, (FCT_ORDER_DETAIL.AMOUNT_OF_ITEM * TO_NUMBER(FCT_ORDER_DETAIL.SALES_DIRECTION_MULTIPLIER)) AS EXTENDED_PRE_DISCOUNT_RETAIL_AMOUNT, (((FCT_ORDER_DETAIL.AMOUNT_OF_ITEM - FCT_ORDER_DETAIL.ADVANTEDGE_DISCOUNT_AMOUNT) - FCT_ORDER_DETAIL.GOLUB_SUPPORT_AMOUNT) * TO_NUMBER(FCT_ORDER_DETAIL.SALES_DIRECTION_MULTIPLIER)) AS EXTENDED_RETAIL_AMOUNT, (FCT_ORDER_DETAIL.QUANTITY * TO_NUMBER(FCT_ORDER_DETAIL.SALES_DIRECTION_MULTIPLIER)) AS EXTENDED_QUANTITY, (FCT_ORDER_DETAIL.EXTENDED_SKU_QUANTITY * TO_NUMBER(FCT_ORDER_DETAIL.SALES_DIRECTION_MULTIPLIER)) AS EXTENDED_SKU_QUANTITY, (FCT_ORDER_DETAIL.EXTENDED_COST * TO_NUMBER(FCT_ORDER_DETAIL.SALES_DIRECTION_MULTIPLIER)) AS EXTENDED_COST, (FCT_ORDER_DETAIL.ADVANTEDGE_DISCOUNT_AMOUNT * TO_NUMBER(FCT_ORDER_DETAIL.SALES_DIRECTION_MULTIPLIER)) AS ADVANTEDGE_DISCOUNT_AMOUNT, FCT_ORDER_DETAIL.GOLUB_SUPPORT_AMOUNT, FCT_ORDER_DETAIL.CLU_M_SUPPORT_AMOUNT, (FCT_ORDER_DETAIL.CLU_M_SUPPORT_AMOUNT * TO_NUMBER(FCT_ORDER_DETAIL.SALES_DIRECTION_MULTIPLIER)) AS EXTENDED_CLU_M_SUPPORT_AMOUNT, FCT_ORDER_DETAIL.FLU_M_SUPPORT_AMOUNT, (FCT_ORDER_DETAIL.FLU_M_SUPPORT_AMOUNT * TO_NUMBER(FCT_ORDER_DETAIL.SALES_DIRECTION_MULTIPLIER)) AS EXTENDED_FLU_M_SUPPORT_AMOUNT, (FCT_ORDER_DETAIL.QUANTITY * TO_NUMBER(CASE WHEN ((FCT_ORDER_DETAIL.VOID_ITEM_FLAG = 't'::BOOLEAN) OR (FCT_ORDER_DETAIL.REFUND_ITEM_FLAG = 't'::BOOLEAN)) THEN -1 ELSE 1 END)) AS LINE_QUANTITY, (FCT_ORDER_DETAIL.AMOUNT_OF_ITEM * TO_NUMBER(CASE WHEN ((FCT_ORDER_DETAIL.VOID_ITEM_FLAG = 't'::BOOLEAN) OR (FCT_ORDER_DETAIL.REFUND_ITEM_FLAG = 't'::BOOLEAN)) THEN -1 ELSE 1 END)) AS LINE_RETAIL_AMOUNT, FCT_ORDER_DETAIL.ENTRY_TYPE, FCT_ORDER_DETAIL.TERMINAL_NUMBER, FCT_ORDER_DETAIL.EASY_SCAN_RECORD, FCT_ORDER_DETAIL.RECALLED_ITEM, FCT_ORDER_DETAIL.SPECIAL_ITEM_CODE_1, FCT_ORDER_DETAIL.SPECIAL_ITEM_CODE_2, FCT_ORDER_DETAIL.SPECIAL_ITEM_CODE_3, FCT_ORDER_DETAIL.SPECIAL_ITEM_CODE_4, FCT_ORDER_DETAIL.SPECIAL_ITEM_CODE_5, FCT_ORDER_DETAIL.SPECIAL_ITEM_CODE_6, FCT_ORDER_DETAIL.SPECIAL_ITEM_CODE_7, FCT_ORDER_DETAIL.TAX_LEVEL_FLAG, FCT_ORDER_DETAIL.CASHIER_NUMBER, FCT_ORDER_DETAIL.MANAGER_NUMBER, FCT_ORDER_DETAIL.POS_DEPARTMENT_ID, FCT_ORDER_DETAIL.POS_DEPARTMENT_NUMBER, FCT_ORDER_DETAIL.SPLIT_PRICE_FRACTION, FCT_ORDER_DETAIL.VOID_ITEM_FLAG, FCT_ORDER_DETAIL.REFUND_ITEM_FLAG, FCT_ORDER_DETAIL.ADVANTEDGE_ITEM_FLAG, FCT_ORDER_DETAIL.SCALE_ITEM_FLAG, FCT_ORDER_DETAIL.DEPARTMENT_LEVEL_SALE_FLAG, FCT_ORDER_DETAIL.DEPARTMENT_LEVEL_COUPON_FLAG, FCT_ORDER_DETAIL.INVENTORY_DIRECTION_MULTIPLIER, FCT_ORDER_DETAIL.SALES_DIRECTION_MULTIPLIER, FCT_ORDER_DETAIL.LINE_NUMBER, FCT_ORDER_DETAIL.MASTER_LINE_NUMBER, FCT_ORDER_DETAIL.JOURNAL_FILE_NAME, FCT_ORDER_DETAIL.EXTRACT_DATE, FCT_ORDER_DETAIL.SOURCE_TABLE_NAME, FCT_ORDER_DETAIL.CREATE_DATE, FCT_ORDER_DETAIL.MAINT_DATE, FCT_ORDER_DETAIL.CREATE_UID, FCT_ORDER_DETAIL.MAINT_UID, FCT_ORDER_DETAIL.DELETE_FLAG, FCT_ORDER_DETAIL.DELETE_DATE, FCT_ORDER_DETAIL.DELETE_UID From EBIDW.POS.FCT_ORDER_DETAIL
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_ORDER_DETAIL.STORE_NUMBER;
create or replace view FCT_ORDER_HEADER_CURRENT(
	ORDER_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	TRANSACTION_DATE,
	TRANSACTION_FISCAL_DAY_ID,
	ORDER_NUMBER,
	TRANSACTION_TIME,
	TERMINAL_NUMBER,
	EASY_SCAN_RECORD,
	CASHIER_NAME,
	CASHIER_NUMBER,
	MANAGER_NUMBER,
	DRAWER_ACCESS_COUNT,
	TAX_REGION_ID,
	TAX_REGION_NUMBER,
	DELIVERED_ORDER_FLAG,
	DELIVERED_OUTSIDE_TAX_REGION_FLAG,
	INSTACART_ORDER_FLAG,
	DETAIL_DEBITS,
	DETAIL_TAX,
	DETAIL_CREDITS,
	DETAIL_CHANGE,
	ITEMS_SOLD,
	TAX_EXEMPT_ORDER_FLAG,
	CLOTHING_TAX,
	MEALS_TAX,
	ENCRYPTION_FLAG,
	OPOS_VERSION_NUMBER,
	ADVANTEDGE_CARD_ID,
	ADVANTEDGE_CARD_NUMBER,
	CANCELLED_ORDER_FLAG,
	SHOPS4U_ORDER_FLAG,
	SALES_DIRECTION_MULTIPLIER,
	EXTENDED_DEBITS,
	EXTENDED_TAX,
	EXTENDED_CREDITS,
	EXTENDED_CHANGE,
	EXTENDED_ITEMS_SOLD,
	EXTENDED_CLOTHING_TAX,
	EXTENDED_MEALS_TAX,
	LINE_NUMBER,
	JOURNAL_FILE_NAME,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_ORDER_HEADER.ORDER_HEADER_ID, FCT_ORDER_HEADER.DIVISION_NUMBER, FCT_ORDER_HEADER.STORE_ID, FCT_ORDER_HEADER.SALES_STORE_ID, FCT_ORDER_HEADER.STORE_NUMBER, FCT_ORDER_HEADER.BUSINESS_DATE, FCT_ORDER_HEADER.BUSINESS_FISCAL_DAY_ID, FCT_ORDER_HEADER.TRANSACTION_DATE, FCT_ORDER_HEADER.TRANSACTION_FISCAL_DAY_ID, FCT_ORDER_HEADER.ORDER_NUMBER, FCT_ORDER_HEADER.TRANSACTION_TIME, FCT_ORDER_HEADER.TERMINAL_NUMBER, FCT_ORDER_HEADER.EASY_SCAN_RECORD, FCT_ORDER_HEADER.CASHIER_NAME, FCT_ORDER_HEADER.CASHIER_NUMBER, FCT_ORDER_HEADER.MANAGER_NUMBER, FCT_ORDER_HEADER.DRAWER_ACCESS_COUNT, FCT_ORDER_HEADER.TAX_REGION_ID, FCT_ORDER_HEADER.TAX_REGION_NUMBER, FCT_ORDER_HEADER.DELIVERED_ORDER_FLAG, FCT_ORDER_HEADER.DELIVERED_OUTSIDE_TAX_REGION_FLAG, FCT_ORDER_HEADER.INSTACART_ORDER_FLAG, FCT_ORDER_HEADER.DETAIL_DEBITS, FCT_ORDER_HEADER.DETAIL_TAX, FCT_ORDER_HEADER.DETAIL_CREDITS, FCT_ORDER_HEADER.DETAIL_CHANGE, FCT_ORDER_HEADER.ITEMS_SOLD, FCT_ORDER_HEADER.TAX_EXEMPT_ORDER_FLAG, FCT_ORDER_HEADER.CLOTHING_TAX, FCT_ORDER_HEADER.MEALS_TAX, FCT_ORDER_HEADER.ENCRYPTION_FLAG, FCT_ORDER_HEADER.OPOS_VERSION_NUMBER, FCT_ORDER_HEADER.ADVANTEDGE_CARD_ID, FCT_ORDER_HEADER.ADVANTEDGE_CARD_NUMBER, FCT_ORDER_HEADER.CANCELLED_ORDER_FLAG, CASE WHEN (FCT_ORDER_HEADER.STORE_NUMBER = 138) THEN CASE WHEN ((FCT_ORDER_HEADER.TERMINAL_NUMBER = 45) AND (FCT_ORDER_HEADER.BUSINESS_FISCAL_DAY_ID > 20140000)) THEN 't'::BOOLEAN ELSE 'f'::BOOLEAN END ELSE CASE WHEN (FCT_ORDER_HEADER.TERMINAL_NUMBER = 45) THEN 't'::BOOLEAN ELSE 'f'::BOOLEAN END END AS SHOPS4U_ORDER_FLAG, CASE WHEN (FCT_ORDER_HEADER.CANCELLED_ORDER_FLAG = 't'::BOOLEAN) THEN 0 ELSE 1 END AS SALES_DIRECTION_MULTIPLIER, (FCT_ORDER_HEADER.DETAIL_DEBITS * TO_NUMBER(CASE WHEN (FCT_ORDER_HEADER.CANCELLED_ORDER_FLAG = 't'::BOOLEAN) THEN 0 ELSE 1 END)) AS EXTENDED_DEBITS, (FCT_ORDER_HEADER.DETAIL_TAX * TO_NUMBER(CASE WHEN (FCT_ORDER_HEADER.CANCELLED_ORDER_FLAG = 't'::BOOLEAN) THEN 0 ELSE 1 END)) AS EXTENDED_TAX, (FCT_ORDER_HEADER.DETAIL_CREDITS * TO_NUMBER(CASE WHEN (FCT_ORDER_HEADER.CANCELLED_ORDER_FLAG = 't'::BOOLEAN) THEN 0 ELSE 1 END)) AS EXTENDED_CREDITS, (FCT_ORDER_HEADER.DETAIL_CHANGE * TO_NUMBER(CASE WHEN (FCT_ORDER_HEADER.CANCELLED_ORDER_FLAG = 't'::BOOLEAN) THEN 0 ELSE 1 END)) AS EXTENDED_CHANGE, (FCT_ORDER_HEADER.ITEMS_SOLD * CASE WHEN (FCT_ORDER_HEADER.CANCELLED_ORDER_FLAG = 't'::BOOLEAN) THEN 0 ELSE 1 END) AS EXTENDED_ITEMS_SOLD, (FCT_ORDER_HEADER.CLOTHING_TAX * TO_NUMBER(CASE WHEN (FCT_ORDER_HEADER.CANCELLED_ORDER_FLAG = 't'::BOOLEAN) THEN 0 ELSE 1 END)) AS EXTENDED_CLOTHING_TAX, (FCT_ORDER_HEADER.MEALS_TAX * TO_NUMBER(CASE WHEN (FCT_ORDER_HEADER.CANCELLED_ORDER_FLAG = 't'::BOOLEAN) THEN 0 ELSE 1 END)) AS EXTENDED_MEALS_TAX, FCT_ORDER_HEADER.LINE_NUMBER, FCT_ORDER_HEADER.JOURNAL_FILE_NAME, FCT_ORDER_HEADER.EXTRACT_DATE, FCT_ORDER_HEADER.SOURCE_TABLE_NAME, FCT_ORDER_HEADER.CREATE_DATE, FCT_ORDER_HEADER.MAINT_DATE, FCT_ORDER_HEADER.CREATE_UID, FCT_ORDER_HEADER.MAINT_UID, FCT_ORDER_HEADER.DELETE_FLAG, FCT_ORDER_HEADER.DELETE_DATE, FCT_ORDER_HEADER.DELETE_UID From EBIDW.POS.FCT_ORDER_HEADER Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_ORDER_HEADER.STORE_NUMBER;
create or replace view FCT_OVERTIME_MAINFRAME_CURRENT(
	FACT_OVERTIME_MAINFRAME_ID,
	FISCAL_WEEK_ID,
	LAST_WEEK_DAY,
	STORE_ID,
	STORE_NUMBER,
	NON_SUNDAY_DOLLARS,
	NON_SUNDAY_HOURS,
	OTHER_DOLLARS,
	OTHER_HOURS,
	VERSION_ID,
	CURRENT_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	CREATE_UID,
	MAINT_DATE,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_OVERTIME_MAINFRAME.FACT_OVERTIME_MAINFRAME_ID, FCT_OVERTIME_MAINFRAME.FISCAL_WEEK_ID, FCT_OVERTIME_MAINFRAME.LAST_WEEK_DAY, FCT_OVERTIME_MAINFRAME.STORE_ID, FCT_OVERTIME_MAINFRAME.STORE_NUMBER, FCT_OVERTIME_MAINFRAME.NON_SUNDAY_DOLLARS, FCT_OVERTIME_MAINFRAME.NON_SUNDAY_HOURS, FCT_OVERTIME_MAINFRAME.OTHER_DOLLARS, FCT_OVERTIME_MAINFRAME.OTHER_HOURS, FCT_OVERTIME_MAINFRAME.VERSION_ID, FCT_OVERTIME_MAINFRAME.CURRENT_FLAG, FCT_OVERTIME_MAINFRAME.EXTRACT_DATE, FCT_OVERTIME_MAINFRAME.SOURCE_TABLE_NAME, FCT_OVERTIME_MAINFRAME.CREATE_DATE, FCT_OVERTIME_MAINFRAME.CREATE_UID, FCT_OVERTIME_MAINFRAME.MAINT_DATE, FCT_OVERTIME_MAINFRAME.MAINT_UID, FCT_OVERTIME_MAINFRAME.DELETE_FLAG, FCT_OVERTIME_MAINFRAME.DELETE_DATE, FCT_OVERTIME_MAINFRAME.DELETE_UID From EBIDW.FIN.FCT_OVERTIME_MAINFRAME 
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_OVERTIME_MAINFRAME.STORE_NUMBER;
create or replace view FCT_PRICE_OVERRIDE_DETAIL_CURRENT(
	PRICE_OVERRIDE_DETAIL_ID,
	ORDER_HEADER_ID,
	ORDER_DETAIL_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	TRANSACTION_DATE,
	TRANSACTION_FISCAL_DAY_ID,
	ORDER_NUMBER,
	ORDER_LINE_NUMBER,
	PRIMARY_ITEM_ID,
	PRIMARY_MERCH_ITEM_ID,
	PRIMARY_UPC,
	ACTUAL_ITEM_ID,
	ACTUAL_MERCH_ITEM_ID,
	ACTUAL_UPC,
	TRANSACTION_TIME,
	ITEM_DESCRIPTION,
	ITEM_SHORT_DESC,
	MARKDOWN,
	ELECTRONIC_REDUCED,
	FORCE_PRICE,
	OPT_SUBTRACT,
	OPT_CANCEL,
	QTY_IF_FUEL_GALLONS,
	QTY_IS_WEIGHT,
	QTY_IS_DECIMAL_QTY,
	ORIGINAL_PRICE,
	REDUCED_PRICE,
	QTY,
	DIFFERENT_AMOUNT,
	CODE,
	TYPE,
	REASON_NUMBER,
	RETURN_TYPE,
	OPT_RETURN_PRICE_CONFIRM,
	OPT_Q_BUSTER,
	OPT_E_TICKET,
	OPT_FLAG_3,
	OPT_FLAG_4,
	OPT_FLAG_5,
	OPT_FLAG_6,
	REDUCED_TO_CLEAR_MARKDOWN,
	ORIGINAL_MSU,
	NEW_MSU,
	ORG_AMOUNT,
	FREQUENT_SHOPPER_PRICE,
	MARKDOWN_CYCLE,
	TERMINAL_NUMBER,
	CASHIER_NUMBER,
	MANAGER_NUMBER,
	POS_DEPARTMENT_ID,
	POS_DEPARTMENT_NUMBER,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	JOURNAL_FILE_NAME,
	JOURNAL_FILE_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as
	select s.PRICE_OVERRIDE_DETAIL_ID,
	s.ORDER_HEADER_ID,
	s.ORDER_DETAIL_ID,
	s.DIVISION_NUMBER,
	s.STORE_ID,
	s.SALES_STORE_ID,
	s.STORE_NUMBER,
	s.BUSINESS_DATE,
	s.BUSINESS_FISCAL_DAY_ID,
	s.TRANSACTION_DATE,
	s.TRANSACTION_FISCAL_DAY_ID,
	s.ORDER_NUMBER,
	s.ORDER_LINE_NUMBER,
	s.PRIMARY_ITEM_ID,
	s.PRIMARY_MERCH_ITEM_ID,
	s.PRIMARY_UPC,
	s.ACTUAL_ITEM_ID,
	s.ACTUAL_MERCH_ITEM_ID,
	s.ACTUAL_UPC,
	s.TRANSACTION_TIME,
	s.ITEM_DESCRIPTION,
	s.ITEM_SHORT_DESC,
	s.MARKDOWN,
	s.ELECTRONIC_REDUCED,
	s.FORCE_PRICE,
	s.OPT_SUBTRACT,
	s.OPT_CANCEL,
	s.QTY_IF_FUEL_GALLONS,
	s.QTY_IS_WEIGHT,
	s.QTY_IS_DECIMAL_QTY,
	s.ORIGINAL_PRICE,
	s.REDUCED_PRICE,
	s.QTY,
	s.DIFFERENT_AMOUNT,
	s.CODE,
	s.TYPE,
	s.REASON_NUMBER,
	s.RETURN_TYPE,
	s.OPT_RETURN_PRICE_CONFIRM,
	s.OPT_Q_BUSTER,
	s.OPT_E_TICKET,
	s.OPT_FLAG_3,
	s.OPT_FLAG_4,
	s.OPT_FLAG_5,
	s.OPT_FLAG_6,
	s.REDUCED_TO_CLEAR_MARKDOWN,
	s.ORIGINAL_MSU,
	s.NEW_MSU,
	s.ORG_AMOUNT,
	s.FREQUENT_SHOPPER_PRICE,
	s.MARKDOWN_CYCLE,
	s.TERMINAL_NUMBER,
	s.CASHIER_NUMBER,
	s.MANAGER_NUMBER,
	s.POS_DEPARTMENT_ID,
	s.POS_DEPARTMENT_NUMBER,
	s.LINE_NUMBER,
	s.MASTER_LINE_NUMBER,
	s.JOURNAL_FILE_NAME,
	s.JOURNAL_FILE_ID,
	s.EXTRACT_DATE,
	s.SOURCE_TABLE_NAME,
	s.CREATE_DATE,
	s.MAINT_DATE,
	s.CREATE_UID,
	s.MAINT_UID,
	s.DELETE_FLAG,
	s.DELETE_DATE,
	s.DELETE_UID from EBIDW.pos.FCT_PRICE_OVERRIDE_DETAIL as s Join REPORTING.DIM_STORE_STACK_CURRENT SS on SS.SALES_STORE_NUMBER=s.STORE_NUMBER;
create or replace view FCT_RX_INVENTORY_ITEM_CURRENT(
	RX_INVENTORY_ITEM_ID,
	REPORTING_FISCAL_WEEK_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	RX_CATALOG_ID,
	NDC_NUMBER,
	INVENTORY_UNIT_DESCRIPTION,
	INVENTORY_UNITS_ON_HAND,
	ORDER_POINT,
	CASE_SIZE,
	PACKAGE_SIZE,
	LAST_ORDER_FISCAL_DAY_ID,
	LAST_ORDER_DATE,
	LAST_UNIT_QUANTITY_ORDERED,
	CURRENT_FLAG,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_RX_INVENTORY_ITEM.RX_INVENTORY_ITEM_ID, FCT_RX_INVENTORY_ITEM.REPORTING_FISCAL_WEEK_ID, FCT_RX_INVENTORY_ITEM.STORE_ID, FCT_RX_INVENTORY_ITEM.SALES_STORE_ID, FCT_RX_INVENTORY_ITEM.STORE_NUMBER, FCT_RX_INVENTORY_ITEM.RX_CATALOG_ID, FCT_RX_INVENTORY_ITEM.NDC_NUMBER, FCT_RX_INVENTORY_ITEM.INVENTORY_UNIT_DESCRIPTION, FCT_RX_INVENTORY_ITEM.INVENTORY_UNITS_ON_HAND, FCT_RX_INVENTORY_ITEM.ORDER_POINT, FCT_RX_INVENTORY_ITEM.CASE_SIZE, FCT_RX_INVENTORY_ITEM.PACKAGE_SIZE, FCT_RX_INVENTORY_ITEM.LAST_ORDER_FISCAL_DAY_ID, FCT_RX_INVENTORY_ITEM.LAST_ORDER_DATE, FCT_RX_INVENTORY_ITEM.LAST_UNIT_QUANTITY_ORDERED, FCT_RX_INVENTORY_ITEM.CURRENT_FLAG, FCT_RX_INVENTORY_ITEM.ACTIVE_FLAG, FCT_RX_INVENTORY_ITEM.EXTRACT_DATE, FCT_RX_INVENTORY_ITEM.SOURCE_TABLE_NAME, FCT_RX_INVENTORY_ITEM.CREATE_DATE, FCT_RX_INVENTORY_ITEM.MAINT_DATE, FCT_RX_INVENTORY_ITEM.CREATE_UID, FCT_RX_INVENTORY_ITEM.MAINT_UID, FCT_RX_INVENTORY_ITEM.DELETE_FLAG, FCT_RX_INVENTORY_ITEM.DELETE_DATE, FCT_RX_INVENTORY_ITEM.DELETE_UID From EBIDW.RX.FCT_RX_INVENTORY_ITEM Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_RX_INVENTORY_ITEM.STORE_NUMBER WHERE (FCT_RX_INVENTORY_ITEM.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_RX_INVENTORY_TRANSACTION_CURRENT(
	RX_INVENTORY_TRANSACTION_ID,
	RX_340B_HEADER_ID,
	RX_INVOICE_LINE_ID,
	TRANSACTION_BATCH_NUMBER,
	BATCH_SEQUENCE_NUMBER,
	REPORTING_FISCAL_WEEK_ID,
	TRANSACTION_QUANTITY,
	AVAILABLE_ALLOCATION_QUANTITY,
	RX_CATALOG_ID,
	RX_ITEM_CATALOG_ID,
	NDC_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	DIRECTION_MULTIPLIER,
	TRANSACTION_TYPE_CODE,
	TRANSACTION_REASON_CODE,
	TRANSACTION_PROCESSED,
	REPLENISHMENT_QUANTITY,
	REPLENISHMENT_STATUS,
	IS_INVOICED,
	IS_REVERSAL_INVOICED,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_RX_INVENTORY_TRANSACTION.RX_INVENTORY_TRANSACTION_ID, FCT_RX_INVENTORY_TRANSACTION.RX_340B_HEADER_ID, FCT_RX_INVENTORY_TRANSACTION.RX_INVOICE_LINE_ID, FCT_RX_INVENTORY_TRANSACTION.TRANSACTION_BATCH_NUMBER, FCT_RX_INVENTORY_TRANSACTION.BATCH_SEQUENCE_NUMBER, FCT_RX_INVENTORY_TRANSACTION.REPORTING_FISCAL_WEEK_ID, FCT_RX_INVENTORY_TRANSACTION.TRANSACTION_QUANTITY, FCT_RX_INVENTORY_TRANSACTION.AVAILABLE_ALLOCATION_QUANTITY, FCT_RX_INVENTORY_TRANSACTION.RX_CATALOG_ID, FCT_RX_INVENTORY_TRANSACTION.RX_ITEM_CATALOG_ID, FCT_RX_INVENTORY_TRANSACTION.NDC_NUMBER, FCT_RX_INVENTORY_TRANSACTION.STORE_ID, FCT_RX_INVENTORY_TRANSACTION.SALES_STORE_ID, FCT_RX_INVENTORY_TRANSACTION.STORE_NUMBER, FCT_RX_INVENTORY_TRANSACTION.DIRECTION_MULTIPLIER, FCT_RX_INVENTORY_TRANSACTION.TRANSACTION_TYPE_CODE, FCT_RX_INVENTORY_TRANSACTION.TRANSACTION_REASON_CODE, FCT_RX_INVENTORY_TRANSACTION.TRANSACTION_PROCESSED, FCT_RX_INVENTORY_TRANSACTION.REPLENISHMENT_QUANTITY, FCT_RX_INVENTORY_TRANSACTION.REPLENISHMENT_STATUS, FCT_RX_INVENTORY_TRANSACTION.IS_INVOICED, FCT_RX_INVENTORY_TRANSACTION.IS_REVERSAL_INVOICED, FCT_RX_INVENTORY_TRANSACTION.ACTIVE_FLAG, FCT_RX_INVENTORY_TRANSACTION.EXTRACT_DATE, FCT_RX_INVENTORY_TRANSACTION.SOURCE_TABLE_NAME, FCT_RX_INVENTORY_TRANSACTION.CREATE_DATE, FCT_RX_INVENTORY_TRANSACTION.MAINT_DATE, FCT_RX_INVENTORY_TRANSACTION.CREATE_UID, FCT_RX_INVENTORY_TRANSACTION.MAINT_UID, FCT_RX_INVENTORY_TRANSACTION.DELETE_FLAG, FCT_RX_INVENTORY_TRANSACTION.DELETE_DATE, FCT_RX_INVENTORY_TRANSACTION.DELETE_UID From EBIDW.RX.FCT_RX_INVENTORY_TRANSACTION Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_RX_INVENTORY_TRANSACTION.STORE_NUMBER WHERE (FCT_RX_INVENTORY_TRANSACTION.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_RX_INVENTORY_TRANSACTION_CURRENT_DECISION(
	NDC_NUMBER,
	RX_CATALOG_ID,
	RX_ITEM_CATALOG_ID,
	DETAIL_DESCRIPTION,
	EVENT_TYPE,
	RX_340B_HEADER_ID,
	RX_INVOICE_LINE_ID,
	REPORTING_FISCAL_WEEK_ID,
	EVENT_DATE,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	TRANSACTION_TYPE_CODE,
	TRANSACTION_REASON_CODE,
	TRANSACTION_PROCESSED,
	IS_INVOICED,
	IS_REVERSAL_INVOICED,
	TRANSACTION_QUANTITY,
	DIRECTION_MULTIPLIER,
	DISPENSED_QUANTITY,
	VOID_QUANTITY,
	DISPENSED_AND_VOID_QUANTITY,
	INVOICED_QUANTITY,
	CREDIT_RETURN_QUANTITY,
	INVOICE_AND_CREDIT_RETURN_QUANTITY,
	NET_QUANTITY,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	CREATE_DATE,
	MAINT_DATE
) as
(
SELECT s.NDC_NUMBER,
	s.RX_CATALOG_ID,
	s.RX_ITEM_CATALOG_ID,
	s.DETAIL_DESCRIPTION,
	s.EVENT_TYPE,
        s.RX_340B_HEADER_ID,
	s.RX_INVOICE_LINE_ID,
	s.REPORTING_FISCAL_WEEK_ID,
	s.EVENT_DATE,
	s.STORE_ID,
	s.SALES_STORE_ID,
	s.STORE_NUMBER,
	s.TRANSACTION_TYPE_CODE,
	s.TRANSACTION_REASON_CODE,
	s.TRANSACTION_PROCESSED,
	s.IS_INVOICED,
	s.IS_REVERSAL_INVOICED,
	s.TRANSACTION_QUANTITY,
	s.DIRECTION_MULTIPLIER,
	s.DISPENSED_QUANTITY,
	s.VOID_QUANTITY,
	s.DISPENSED_AND_VOID_QUANTITY,
	s.INVOICED_QUANTITY,
	s.CREDIT_RETURN_QUANTITY,
	s.INVOICE_AND_CREDIT_RETURN_QUANTITY,
	s.NET_QUANTITY,
	s.ACTIVE_FLAG,
	s.EXTRACT_DATE,
	s.CREATE_DATE,
	s.MAINT_DATE FROM EBIDW.REPORTING.FCT_RX_INVENTORY_TRANSACTION_CURRENT_DECISION AS S Join REPORTING.DIM_STORE_STACK_CURRENT SS on SS.SALES_STORE_NUMBER=s.STORE_NUMBER
);
create or replace view FCT_RX_INVOICE_LINE_ITEM_CURRENT(
	RX_INVOICE_LINE_ID,
	INVOICE_NUMBER,
	INVOICE_DATE_FISCAL_DAY_ID,
	INVOICE_DATE,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	CUSTOMER_NUMBER,
	PO_NUMBER,
	PO_FISCAL_DAY_ID,
	PO_DATE,
	CORPORATE_DESC,
	RX_CATALOG_ID,
	RX_ITEM_CATALOG_ID,
	NDC_NUMBER,
	INVOICE_QTY,
	UNIT_PRICE,
	TRANSACTION_TYPE,
	INVENTORY_PROCESSED_FLAG,
	ENTITY_340B_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as 
SELECT
		S.RX_INVOICE_LINE_ID
		, S.INVOICE_NUMBER
		, S.INVOICE_DATE_FISCAL_DAY_ID
		, S.INVOICE_DATE
		, S.STORE_ID
		, S.SALES_STORE_ID
		, S.STORE_NUMBER
		, S.CUSTOMER_NUMBER
		, S.PO_NUMBER
		, S.PO_FISCAL_DAY_ID
		, S.PO_DATE
		, S.CORPORATE_DESC
		, S.RX_CATALOG_ID
		, S.RX_ITEM_CATALOG_ID
		, S.NDC_NUMBER
		, S.INVOICE_QTY
		, S.UNIT_PRICE
		, S.TRANSACTION_TYPE
		, S.INVENTORY_PROCESSED_FLAG
		, S.ENTITY_340B_ID
		, S.EXTRACT_DATE
		, S.SOURCE_TABLE_NAME
		, S.CREATE_DATE
		, S.MAINT_DATE
		, S.CREATE_UID
		, S.MAINT_UID
		, S.DELETE_FLAG
		, S.DELETE_DATE
		, S.DELETE_UID
FROM
		EBIDW.RX.FCT_RX_INVOICE_LINE_ITEM AS S 
        Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=S.STORE_NUMBER;
create or replace view FCT_RX_PO_HEADER_CURRENT(
	RX_PO_HEADER_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	PO_STATUS,
	RX_VENDOR_ID,
	RX_VENDOR_NUMBER,
	RX_PO_APPROVAL_USER_ID,
	RX_PO_APPROVAL_USER_NUMBER,
	PO_CREATE_FISCAL_DAY_ID,
	PO_CREATE_DATE,
	PO_APPROVED_FISCAL_DAY_ID,
	PO_APPROVED_DATE,
	PO_ORDERED_FISCAL_DAY_ID,
	PO_ORDERED_DATE,
	PO_RECEIVED_FISCAL_DAY_ID,
	PO_RECEIVED_DATE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELTE_UID
) as SELECT FCT_RX_PO_HEADER.RX_PO_HEADER_ID, FCT_RX_PO_HEADER.STORE_ID, FCT_RX_PO_HEADER.SALES_STORE_ID, FCT_RX_PO_HEADER.STORE_NUMBER, FCT_RX_PO_HEADER.PO_STATUS, FCT_RX_PO_HEADER.RX_VENDOR_ID, FCT_RX_PO_HEADER.RX_VENDOR_NUMBER, FCT_RX_PO_HEADER.RX_PO_APPROVAL_USER_ID, FCT_RX_PO_HEADER.RX_PO_APPROVAL_USER_NUMBER, FCT_RX_PO_HEADER.PO_CREATE_FISCAL_DAY_ID, FCT_RX_PO_HEADER.PO_CREATE_DATE, FCT_RX_PO_HEADER.PO_APPROVED_FISCAL_DAY_ID, FCT_RX_PO_HEADER.PO_APPROVED_DATE, FCT_RX_PO_HEADER.PO_ORDERED_FISCAL_DAY_ID, FCT_RX_PO_HEADER.PO_ORDERED_DATE, FCT_RX_PO_HEADER.PO_RECEIVED_FISCAL_DAY_ID, FCT_RX_PO_HEADER.PO_RECEIVED_DATE, FCT_RX_PO_HEADER.ACTIVE_FLAG, FCT_RX_PO_HEADER.EXTRACT_DATE, FCT_RX_PO_HEADER.SOURCE_TABLE_NAME, FCT_RX_PO_HEADER.CREATE_DATE, FCT_RX_PO_HEADER.MAINT_DATE, FCT_RX_PO_HEADER.CREATE_UID, FCT_RX_PO_HEADER.MAINT_UID, FCT_RX_PO_HEADER.DELETE_FLAG, FCT_RX_PO_HEADER.DELETE_DATE, FCT_RX_PO_HEADER.DELTE_UID From EBIDW.RX.FCT_RX_PO_HEADER 
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_RX_PO_HEADER.STORE_NUMBER;
create or replace view FCT_RX_PO_LINE_CURRENT(
	RX_PO_LINE_ID,
	RX_PO_HEADER_ID,
	RX_INVENTORY_ITEM_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	CUSTOMER_NUMBER,
	ORDER_CODE,
	ORDER_QUANTITY,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELTE_UID
) as SELECT FCT_RX_PO_LINE.RX_PO_LINE_ID, FCT_RX_PO_LINE.RX_PO_HEADER_ID, FCT_RX_PO_LINE.RX_INVENTORY_ITEM_ID, FCT_RX_PO_LINE.STORE_ID, FCT_RX_PO_LINE.SALES_STORE_ID, FCT_RX_PO_LINE.STORE_NUMBER, FCT_RX_PO_LINE.CUSTOMER_NUMBER, FCT_RX_PO_LINE.ORDER_CODE, FCT_RX_PO_LINE.ORDER_QUANTITY, FCT_RX_PO_LINE.ACTIVE_FLAG, FCT_RX_PO_LINE.EXTRACT_DATE, FCT_RX_PO_LINE.SOURCE_TABLE_NAME, FCT_RX_PO_LINE.CREATE_DATE, FCT_RX_PO_LINE.MAINT_DATE, FCT_RX_PO_LINE.CREATE_UID, FCT_RX_PO_LINE.MAINT_UID, FCT_RX_PO_LINE.DELETE_FLAG, FCT_RX_PO_LINE.DELETE_DATE, FCT_RX_PO_LINE.DELTE_UID From EBIDW.RX.FCT_RX_PO_LINE 
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_RX_PO_LINE.STORE_NUMBER;
create or replace view FCT_SCAN_SUMMARY_CURRENT(
	ROW_ID,
	ITEM_ID,
	MERCH_ITEM_ID,
	UPC_NUMBER,
	WEEK_ENDING_DAY_KEY,
	FISCAL_WEEK_ID,
	WEEK_ENDING_DATE,
	STORE_ID,
	SALES_STORE_ID,
	STORE_ATTRIBUTE_ID,
	STORE_NUMBER,
	QUANTITY,
	RETAIL_AMOUNT,
	COST_AMOUNT,
	RETAIL_ADV,
	COST_ADV,
	PROMOTION_TYPE_ID,
	PROMOTION_TYPE_CODE,
	JUNK,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_SCAN_SUMMARY2.ROW_ID, FCT_SCAN_SUMMARY2.ITEM_ID, FCT_SCAN_SUMMARY2.MERCH_ITEM_ID, FCT_SCAN_SUMMARY2.UPC_NUMBER, FCT_SCAN_SUMMARY2.WEEK_ENDING_DAY_KEY, FCT_SCAN_SUMMARY2.FISCAL_WEEK_ID, FCT_SCAN_SUMMARY2.WEEK_ENDING_DATE, FCT_SCAN_SUMMARY2.STORE_ID, FCT_SCAN_SUMMARY2.SALES_STORE_ID, FCT_SCAN_SUMMARY2.STORE_ATTRIBUTE_ID, FCT_SCAN_SUMMARY2.STORE_NUMBER, FCT_SCAN_SUMMARY2.QUANTITY, FCT_SCAN_SUMMARY2.RETAIL_AMOUNT, FCT_SCAN_SUMMARY2.COST_AMOUNT, FCT_SCAN_SUMMARY2.RETAIL_ADV, FCT_SCAN_SUMMARY2.COST_ADV, FCT_SCAN_SUMMARY2.PROMOTION_TYPE_ID, FCT_SCAN_SUMMARY2.PROMOTION_TYPE_CODE, FCT_SCAN_SUMMARY2.JUNK, FCT_SCAN_SUMMARY2.EXTRACT_DATE, FCT_SCAN_SUMMARY2.SOURCE_TABLE_NAME, FCT_SCAN_SUMMARY2.CREATE_DATE, FCT_SCAN_SUMMARY2.MAINT_DATE, FCT_SCAN_SUMMARY2.CREATE_UID, FCT_SCAN_SUMMARY2.MAINT_UID, FCT_SCAN_SUMMARY2.DELETE_FLAG, FCT_SCAN_SUMMARY2.DELETE_DATE, FCT_SCAN_SUMMARY2.DELETE_UID From EBIDW.MERCH.FCT_SCAN_SUMMARY FCT_SCAN_SUMMARY2 Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_SCAN_SUMMARY2.STORE_NUMBER WHERE ((FCT_SCAN_SUMMARY2.DELETE_FLAG = 'f'::BOOLEAN));
create or replace view FCT_SKUS_NOT_COUNTED_PERCENTAGE_CURRENT(
	SKUS_NOT_COUNTED_PERCENTAGE_ID,
	INVENTORY_COUNT_SCHEDULE_ID,
	FISCAL_YEAR_ID,
	FISCAL_YEAR,
	FISCAL_WEEK_ID,
	CYCLE_NUMBER,
	CYCLE_SCHEDULE_LABEL,
	CYCLE_SCHEDULE_DESC,
	CYCLE_START_FISCAL_DAY_ID,
	CYCLE_START_DATE,
	CYCLE_END_FISCAL_DAY_ID,
	CYCLE_END_DATE,
	REGION_NUMBER,
	REGION_LABEL,
	ZONE_NUMBER,
	ZONE_LABEL,
	SALES_STORE_ID,
	STORE_ID,
	STORE_NUMBER,
	TOTAL_SKUS_COUNTED,
	TOTAL_SKUS_AVAILABLE,
	PERCENT_OF_INVENTORY_COUNTED,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	CREATE_UID,
	MAINT_DATE,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_SKUS_NOT_COUNTED_PERCENTAGE.SKUS_NOT_COUNTED_PERCENTAGE_ID, FCT_SKUS_NOT_COUNTED_PERCENTAGE.INVENTORY_COUNT_SCHEDULE_ID, FCT_SKUS_NOT_COUNTED_PERCENTAGE.FISCAL_YEAR_ID, FCT_SKUS_NOT_COUNTED_PERCENTAGE.FISCAL_YEAR, FCT_SKUS_NOT_COUNTED_PERCENTAGE.FISCAL_WEEK_ID, FCT_SKUS_NOT_COUNTED_PERCENTAGE.CYCLE_NUMBER, FCT_SKUS_NOT_COUNTED_PERCENTAGE.CYCLE_SCHEDULE_LABEL, FCT_SKUS_NOT_COUNTED_PERCENTAGE.CYCLE_SCHEDULE_DESC, FCT_SKUS_NOT_COUNTED_PERCENTAGE.CYCLE_START_FISCAL_DAY_ID, FCT_SKUS_NOT_COUNTED_PERCENTAGE.CYCLE_START_DATE, FCT_SKUS_NOT_COUNTED_PERCENTAGE.CYCLE_END_FISCAL_DAY_ID, FCT_SKUS_NOT_COUNTED_PERCENTAGE.CYCLE_END_DATE, FCT_SKUS_NOT_COUNTED_PERCENTAGE.REGION_NUMBER, FCT_SKUS_NOT_COUNTED_PERCENTAGE.REGION_LABEL, FCT_SKUS_NOT_COUNTED_PERCENTAGE.ZONE_NUMBER, FCT_SKUS_NOT_COUNTED_PERCENTAGE.ZONE_LABEL, FCT_SKUS_NOT_COUNTED_PERCENTAGE.SALES_STORE_ID, FCT_SKUS_NOT_COUNTED_PERCENTAGE.STORE_ID, FCT_SKUS_NOT_COUNTED_PERCENTAGE.STORE_NUMBER, FCT_SKUS_NOT_COUNTED_PERCENTAGE.TOTAL_SKUS_COUNTED, FCT_SKUS_NOT_COUNTED_PERCENTAGE.TOTAL_SKUS_AVAILABLE, FCT_SKUS_NOT_COUNTED_PERCENTAGE.PERCENT_OF_INVENTORY_COUNTED, FCT_SKUS_NOT_COUNTED_PERCENTAGE.ACTIVE_FLAG, FCT_SKUS_NOT_COUNTED_PERCENTAGE.EXTRACT_DATE, FCT_SKUS_NOT_COUNTED_PERCENTAGE.SOURCE_TABLE_NAME, FCT_SKUS_NOT_COUNTED_PERCENTAGE.CREATE_DATE, FCT_SKUS_NOT_COUNTED_PERCENTAGE.CREATE_UID, FCT_SKUS_NOT_COUNTED_PERCENTAGE.MAINT_DATE, FCT_SKUS_NOT_COUNTED_PERCENTAGE.MAINT_UID, FCT_SKUS_NOT_COUNTED_PERCENTAGE.DELETE_FLAG, FCT_SKUS_NOT_COUNTED_PERCENTAGE.DELETE_DATE, FCT_SKUS_NOT_COUNTED_PERCENTAGE.DELETE_UID From EBIDW.PI.FCT_SKUS_NOT_COUNTED_PERCENTAGE Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_SKUS_NOT_COUNTED_PERCENTAGE.STORE_NUMBER;
create or replace view FCT_SKUS_NOT_COUNTED_SUMMARY_CURRENT(
	SKUS_NOT_COUNTED_ID,
	INVENTORY_COUNT_SCHEDULE_ID,
	FISCAL_YEAR_ID,
	FISCAL_YEAR,
	FISCAL_WEEK_ID,
	CYCLE_NUMBER,
	CYCLE_SCHEDULE_LABEL,
	CYCLE_SCHEDULE_DESC,
	CYCLE_START_FISCAL_DAY_ID,
	CYCLE_START_DATE,
	CYCLE_END_FISCAL_DAY_ID,
	CYCLE_END_DATE,
	REGION_NUMBER,
	REGION_LABEL,
	ZONE_NUMBER,
	ZONE_LABEL,
	SALES_STORE_ID,
	STORE_ID,
	STORE_NUMBER,
	MERCH_ITEM_ID,
	ITEM_ID,
	UPC_NUMBER,
	SKU_NUMBER,
	ITEM_LABEL,
	ITEM_PACK,
	ITEM_SIZE,
	SALES_DEPARTMENT_ID,
	SALES_DEPARTMENT_NUMBER,
	SALES_DEPARTMENT_LABEL,
	CATEGORY_ID,
	CATEGORY_NUMBER,
	CATEGORY_LABEL,
	COMMODITY_ID,
	COMMODITY_NUMBER,
	COMMODITY_LABEL,
	QUANTITY,
	EXTENDED_VALUE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	CREATE_UID,
	MAINT_DATE,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_SKUS_NOT_COUNTED_SUMMARY.SKUS_NOT_COUNTED_ID, FCT_SKUS_NOT_COUNTED_SUMMARY.INVENTORY_COUNT_SCHEDULE_ID, FCT_SKUS_NOT_COUNTED_SUMMARY.FISCAL_YEAR_ID, FCT_SKUS_NOT_COUNTED_SUMMARY.FISCAL_YEAR, FCT_SKUS_NOT_COUNTED_SUMMARY.FISCAL_WEEK_ID, FCT_SKUS_NOT_COUNTED_SUMMARY.CYCLE_NUMBER, FCT_SKUS_NOT_COUNTED_SUMMARY.CYCLE_SCHEDULE_LABEL, FCT_SKUS_NOT_COUNTED_SUMMARY.CYCLE_SCHEDULE_DESC, FCT_SKUS_NOT_COUNTED_SUMMARY.CYCLE_START_FISCAL_DAY_ID, FCT_SKUS_NOT_COUNTED_SUMMARY.CYCLE_START_DATE, FCT_SKUS_NOT_COUNTED_SUMMARY.CYCLE_END_FISCAL_DAY_ID, FCT_SKUS_NOT_COUNTED_SUMMARY.CYCLE_END_DATE, FCT_SKUS_NOT_COUNTED_SUMMARY.REGION_NUMBER, FCT_SKUS_NOT_COUNTED_SUMMARY.REGION_LABEL, FCT_SKUS_NOT_COUNTED_SUMMARY.ZONE_NUMBER, FCT_SKUS_NOT_COUNTED_SUMMARY.ZONE_LABEL, FCT_SKUS_NOT_COUNTED_SUMMARY.SALES_STORE_ID, FCT_SKUS_NOT_COUNTED_SUMMARY.STORE_ID, FCT_SKUS_NOT_COUNTED_SUMMARY.STORE_NUMBER, FCT_SKUS_NOT_COUNTED_SUMMARY.MERCH_ITEM_ID, FCT_SKUS_NOT_COUNTED_SUMMARY.ITEM_ID, FCT_SKUS_NOT_COUNTED_SUMMARY.UPC_NUMBER, FCT_SKUS_NOT_COUNTED_SUMMARY.SKU_NUMBER, FCT_SKUS_NOT_COUNTED_SUMMARY.ITEM_LABEL, FCT_SKUS_NOT_COUNTED_SUMMARY.ITEM_PACK, FCT_SKUS_NOT_COUNTED_SUMMARY.ITEM_SIZE, FCT_SKUS_NOT_COUNTED_SUMMARY.SALES_DEPARTMENT_ID, FCT_SKUS_NOT_COUNTED_SUMMARY.SALES_DEPARTMENT_NUMBER, FCT_SKUS_NOT_COUNTED_SUMMARY.SALES_DEPARTMENT_LABEL, FCT_SKUS_NOT_COUNTED_SUMMARY.CATEGORY_ID, FCT_SKUS_NOT_COUNTED_SUMMARY.CATEGORY_NUMBER, FCT_SKUS_NOT_COUNTED_SUMMARY.CATEGORY_LABEL, FCT_SKUS_NOT_COUNTED_SUMMARY.COMMODITY_ID, FCT_SKUS_NOT_COUNTED_SUMMARY.COMMODITY_NUMBER, FCT_SKUS_NOT_COUNTED_SUMMARY.COMMODITY_LABEL, FCT_SKUS_NOT_COUNTED_SUMMARY.QUANTITY, FCT_SKUS_NOT_COUNTED_SUMMARY.EXTENDED_VALUE, FCT_SKUS_NOT_COUNTED_SUMMARY.ACTIVE_FLAG, FCT_SKUS_NOT_COUNTED_SUMMARY.EXTRACT_DATE, FCT_SKUS_NOT_COUNTED_SUMMARY.SOURCE_TABLE_NAME, FCT_SKUS_NOT_COUNTED_SUMMARY.CREATE_DATE, FCT_SKUS_NOT_COUNTED_SUMMARY.CREATE_UID, FCT_SKUS_NOT_COUNTED_SUMMARY.MAINT_DATE, FCT_SKUS_NOT_COUNTED_SUMMARY.MAINT_UID, FCT_SKUS_NOT_COUNTED_SUMMARY.DELETE_FLAG, FCT_SKUS_NOT_COUNTED_SUMMARY.DELETE_DATE, FCT_SKUS_NOT_COUNTED_SUMMARY.DELETE_UID From EBIDW.PI.FCT_SKUS_NOT_COUNTED_SUMMARY Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_SKUS_NOT_COUNTED_SUMMARY.STORE_NUMBER;
create or replace view FCT_STORE_BUDGET_CURRENT(
	STORE_BUDGET_ID,
	STORE_NUMBER,
	STORE_ID,
	SALES_DEPARTMENT_NUMBER,
	SALES_DEPARTMENT_ID,
	DEPARTMENT_NAME,
	FISCAL_WEEK_ID,
	BUDGETED_SALES,
	MARGIN_AMOUNT,
	PERIOD_MARGIN_RATE,
	PERIOD_MARGIN_TOTAL,
	BUDGET_VERSION,
	CURRENT_FLAG,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_STORE_BUDGET2.STORE_BUDGET_ID, FCT_STORE_BUDGET2.STORE_NUMBER, FCT_STORE_BUDGET2.STORE_ID, FCT_STORE_BUDGET2.SALES_DEPARTMENT_NUMBER, FCT_STORE_BUDGET2.SALES_DEPARTMENT_ID, FCT_STORE_BUDGET2.DEPARTMENT_NAME, FCT_STORE_BUDGET2.FISCAL_WEEK_ID, FCT_STORE_BUDGET2.BUDGETED_SALES, FCT_STORE_BUDGET2.MARGIN_AMOUNT, FCT_STORE_BUDGET2.PERIOD_MARGIN_RATE, FCT_STORE_BUDGET2.PERIOD_MARGIN_TOTAL, FCT_STORE_BUDGET2.BUDGET_VERSION, FCT_STORE_BUDGET2.CURRENT_FLAG, FCT_STORE_BUDGET2.ACTIVE_FLAG, FCT_STORE_BUDGET2.EXTRACT_DATE, FCT_STORE_BUDGET2.SOURCE_TABLE_NAME, FCT_STORE_BUDGET2.CREATE_DATE, FCT_STORE_BUDGET2.MAINT_DATE, FCT_STORE_BUDGET2.CREATE_UID, FCT_STORE_BUDGET2.MAINT_UID, FCT_STORE_BUDGET2.DELETE_FLAG, FCT_STORE_BUDGET2.DELETE_DATE, FCT_STORE_BUDGET2.DELETE_UID From EBIDW.SALES.FCT_STORE_BUDGET FCT_STORE_BUDGET2 Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_STORE_BUDGET2.STORE_NUMBER WHERE ((FCT_STORE_BUDGET2.DELETE_FLAG = 'f'::BOOLEAN) AND (FCT_STORE_BUDGET2.CURRENT_FLAG = 't'::BOOLEAN));
create or replace view FCT_STORE_DAY_SALES_CURRENT(
	STORE_ID,
	STORE_NUMBER,
	INVENTORY_DEPARTMENT_ID,
	INVENTORY_DEPARTMENT_NUMBER,
	SALES_DEPARTMENT_ID,
	SALES_DEPARTMENT_NUMBER,
	FISCAL_DAY_ID,
	CALENDAR_DATE,
	FISCAL_DAY_LAST_YEAR_ID,
	GROSS_SALES,
	LFY_GROSS_SALES,
	LCY_GROSS_SALES,
	NET_SALES,
	LFY_NET_SALES,
	LCY_NET_SALES,
	PROJ_SALES,
	LFY_PROJ_SALES,
	LCY_PROJ_SALES,
	BUDG_SALES,
	LFY_BUDG_SALES,
	LCY_BUDG_SALES,
	ADV_DISC_AMT,
	LFY_ADV_DISC_AMT,
	LCY_ADV_DISC_AMT,
	GOLUB_SUPP_AMT,
	LFY_GOLUB_SUPP_AMT,
	LCY_GOLUB_SUPP_AMT,
	EXTENDED_COST,
	LFY_EXTENDED_COST,
	LCY_EXTENDED_COST,
	GROSS_MARGIN,
	LFY_GROSS_MARGIN,
	LCY_GROSS_MARGIN,
	NET_MARGIN,
	LFY_NET_MARGIN,
	LCY_NET_MARGIN,
	CREATE_DATE,
	CREATE_UID
) as SELECT FCT_STORE_DAILY_FACT_SALES.STORE_ID, FCT_STORE_DAILY_FACT_SALES.STORE_NUMBER, FCT_STORE_DAILY_FACT_SALES.INVENTORY_DEPARTMENT_ID, FCT_STORE_DAILY_FACT_SALES.INVENTORY_DEPARTMENT_NUMBER, FCT_STORE_DAILY_FACT_SALES.SALES_DEPARTMENT_ID, FCT_STORE_DAILY_FACT_SALES.SALES_DEPARTMENT_NUMBER, FCT_STORE_DAILY_FACT_SALES.FISCAL_DAY_ID, FCT_STORE_DAILY_FACT_SALES.CALENDAR_DATE, FCT_STORE_DAILY_FACT_SALES.FISCAL_DAY_LAST_YEAR_ID, FCT_STORE_DAILY_FACT_SALES.GROSS_SALES, FCT_STORE_DAILY_FACT_SALES.LFY_GROSS_SALES, FCT_STORE_DAILY_FACT_SALES.LCY_GROSS_SALES, FCT_STORE_DAILY_FACT_SALES.NET_SALES, FCT_STORE_DAILY_FACT_SALES.LFY_NET_SALES, FCT_STORE_DAILY_FACT_SALES.LCY_NET_SALES, FCT_STORE_DAILY_FACT_SALES.PROJ_SALES, FCT_STORE_DAILY_FACT_SALES.LFY_PROJ_SALES, FCT_STORE_DAILY_FACT_SALES.LCY_PROJ_SALES, FCT_STORE_DAILY_FACT_SALES.BUDG_SALES, FCT_STORE_DAILY_FACT_SALES.LFY_BUDG_SALES, FCT_STORE_DAILY_FACT_SALES.LCY_BUDG_SALES, FCT_STORE_DAILY_FACT_SALES.ADV_DISC_AMT, FCT_STORE_DAILY_FACT_SALES.LFY_ADV_DISC_AMT, FCT_STORE_DAILY_FACT_SALES.LCY_ADV_DISC_AMT, FCT_STORE_DAILY_FACT_SALES.GOLUB_SUPP_AMT, FCT_STORE_DAILY_FACT_SALES.LFY_GOLUB_SUPP_AMT, FCT_STORE_DAILY_FACT_SALES.LCY_GOLUB_SUPP_AMT, FCT_STORE_DAILY_FACT_SALES.EXTENDED_COST, FCT_STORE_DAILY_FACT_SALES.LFY_EXTENDED_COST, FCT_STORE_DAILY_FACT_SALES.LCY_EXTENDED_COST, FCT_STORE_DAILY_FACT_SALES.GROSS_MARGIN, FCT_STORE_DAILY_FACT_SALES.LFY_GROSS_MARGIN, FCT_STORE_DAILY_FACT_SALES.LCY_GROSS_MARGIN, FCT_STORE_DAILY_FACT_SALES.NET_MARGIN, FCT_STORE_DAILY_FACT_SALES.LFY_NET_MARGIN, FCT_STORE_DAILY_FACT_SALES.LCY_NET_MARGIN, FCT_STORE_DAILY_FACT_SALES.CREATE_DATE, FCT_STORE_DAILY_FACT_SALES.CREATE_UID From EBIDW.SALES.FCT_STORE_DAILY_FACT_SALES Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER= FCT_STORE_DAILY_FACT_SALES.STORE_NUMBER;
create or replace view FCT_STORE_DAY_SHRINK_CURRENT(
	STORE_ID,
	INVENTORY_DEPARTMENT_ID,
	SALES_DEPARTMENT_ID,
	FISCAL_WEEK_ID,
	FISCAL_WEEK_END_DAY_ID,
	SALES_DEPARTMENT_LABEL,
	INVENTORY_DEPARTMENT_LABEL,
	SALES_DEPARTMENT_GROUP_ID,
	SALES_DEPARTMENT_GROUP_LABEL,
	FISCAL_WEEK_OF_PERIOD_LABEL,
	FISCAL_PERIOD_OF_YEAR_LABEL,
	FISCAL_PERIOD_ID,
	FISCAL_DAY_LAST_YEAR_ID,
	AR_TOTALSHRINK_AMT,
	AR_SYSTEM_UNK_NEG1_AMT,
	AR_AUTOADJ0_AMT,
	AR_CODEDUNK1_AMT,
	AR_CODEDUNK2_AMT,
	AR_DAMAGED3_AMT,
	AR_OUTOFCODE4_AMT,
	AR_LOADSHORT5_AMT,
	AR_TRANSFEROUT6_AMT,
	AR_LOADOVER7_AMT,
	AR_TRANSFERIN8_AMT,
	AR_OUTTOAPPLE9_AMT,
	AR_INFROMAPPLE10_AMT,
	AR_RECALL11_AMT,
	AR_SAMPLENSALES12_AMT,
	AR_VENDORCREDIT13_AMT,
	AR_RETURNTOWHSE14_AMT,
	AR_DONATION15_AMT,
	AR_STORMDAMAGE16_AMT,
	AR_EQUIPMENTFAILURE17_AMT,
	AR_DISCONTINUED18_AMT,
	AR_THEFT19_AMT,
	AR_COUNTSHRINK1001AMT,
	AR_COUNTGAIN1002_AMT,
	AR_SKIPPEDTICKET1003_AMT,
	AR_FORCECLOSELOSS1004_AMT,
	AR_FORCECLOSEGAIN1005_AMT,
	AR_RECLAIM1006_AMT,
	AR_DENIEDLOADSHORTSHRINK2005_AMT,
	AR_DENIEDLOADSHORTGAIN2007_AMT,
	AR_DENIEDRECALL2011_AMT,
	AR_DENIEDSAMPLESNSALESSHRINK2012_AMT,
	AR_DENIEDVENDORCREDITSHRINK2013_AMT,
	AR_DENIEDRETURNTOWHSESHRINK2014_AMT,
	AR_DENIEDDONATION2015_AMT,
	AR_DENIEDSTORMDAMAGE2016_AMT,
	AR_DENIEDEQUIPMENTFAILURE2017_AMT,
	AR_3PLUS4_AMT,
	AR_1001PLUS1002_AMT,
	AR_1004PLUS1005_AMT,
	AR_VALUEADJUSTMENTWRITEDOWN_AMT
) as SELECT SNW_STORE_WEEK_FACT_SCALAR.STORE_ID, SNW_STORE_WEEK_FACT_SCALAR.INVENTORY_DEPARTMENT_ID, SNW_STORE_WEEK_FACT_SCALAR.SALES_DEPARTMENT_ID, SNW_STORE_WEEK_FACT_SCALAR.FISCAL_WEEK_ID, SNW_STORE_WEEK_FACT_SCALAR.FISCAL_WEEK_END_DAY_ID, SNW_STORE_WEEK_FACT_SCALAR.SALES_DEPARTMENT_LABEL, SNW_STORE_WEEK_FACT_SCALAR.INVENTORY_DEPARTMENT_LABEL, SNW_STORE_WEEK_FACT_SCALAR.SALES_DEPARTMENT_GROUP_ID, SNW_STORE_WEEK_FACT_SCALAR.SALES_DEPARTMENT_GROUP_LABEL, SNW_STORE_WEEK_FACT_SCALAR.FISCAL_WEEK_OF_PERIOD_LABEL, SNW_STORE_WEEK_FACT_SCALAR.FISCAL_PERIOD_OF_YEAR_LABEL, SNW_STORE_WEEK_FACT_SCALAR.FISCAL_PERIOD_ID, SNW_STORE_WEEK_FACT_SCALAR.FISCAL_DAY_LAST_YEAR_ID, ((((((((((((((((((SNW_STORE_WEEK_FACT_SCALAR.AR_3PLUS4_AMT + SNW_STORE_WEEK_FACT_SCALAR.AR_DONATION15_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_STORMDAMAGE16_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_EQUIPMENTFAILURE17_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DISCONTINUED18_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_THEFT19_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_COUNTSHRINK1001AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_COUNTGAIN1002_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_1004PLUS1005_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDLOADSHORTSHRINK2005_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDLOADSHORTGAIN2007_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDRECALL2011_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDSAMPLESNSALESSHRINK2012_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDVENDORCREDITSHRINK2013_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDRETURNTOWHSESHRINK2014_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDDONATION2015_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDSTORMDAMAGE2016_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDEQUIPMENTFAILURE2017_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_VALUEADJUSTMENTWRITEDOWN_AMT) AS AR_TOTALSHRINK_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_SYSTEM_UNK_NEG1_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_AUTOADJ0_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_CODEDUNK1_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_CODEDUNK2_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DAMAGED3_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_OUTOFCODE4_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_LOADSHORT5_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_TRANSFEROUT6_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_LOADOVER7_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_TRANSFERIN8_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_OUTTOAPPLE9_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_INFROMAPPLE10_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_RECALL11_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_SAMPLENSALES12_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_VENDORCREDIT13_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_RETURNTOWHSE14_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DONATION15_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_STORMDAMAGE16_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_EQUIPMENTFAILURE17_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DISCONTINUED18_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_THEFT19_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_COUNTSHRINK1001AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_COUNTGAIN1002_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_SKIPPEDTICKET1003_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_FORCECLOSELOSS1004_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_FORCECLOSEGAIN1005_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_RECLAIM1006_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDLOADSHORTSHRINK2005_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDLOADSHORTGAIN2007_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDRECALL2011_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDSAMPLESNSALESSHRINK2012_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDVENDORCREDITSHRINK2013_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDRETURNTOWHSESHRINK2014_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDDONATION2015_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDSTORMDAMAGE2016_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDEQUIPMENTFAILURE2017_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_3PLUS4_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_1001PLUS1002_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_1004PLUS1005_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_VALUEADJUSTMENTWRITEDOWN_AMT From EBIDW.PI.SNW_STORE_WEEK_FACT_SCALAR 
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.STORE_ID=SNW_STORE_WEEK_FACT_SCALAR.STORE_ID;
create or replace view FCT_STORE_DEPARTMENT_SHRINK_ACCRUAL_CURRENT(
	STORE_ID,
	STORE_NUMBER,
	SALES_DEPARTMENT_ID,
	SALES_DEPARTMENT_NUMBER,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	BUDGET_TYPE_ID,
	BUDGET_TYPE_LABEL,
	AMOUNT,
	CURRENT_FLAG,
	VERSION_NUMBER,
	EXTRACT_DATE,
	SOURCE_FILE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_STORE_DEPARTMENT_BUDGET.STORE_ID, FCT_STORE_DEPARTMENT_BUDGET.STORE_NUMBER, FCT_STORE_DEPARTMENT_BUDGET.SALES_DEPARTMENT_ID, FCT_STORE_DEPARTMENT_BUDGET.SALES_DEPARTMENT_NUMBER, FCT_STORE_DEPARTMENT_BUDGET.BUSINESS_FISCAL_DAY_ID, FCT_STORE_DEPARTMENT_BUDGET.BUSINESS_DATE, FCT_STORE_DEPARTMENT_BUDGET.BUDGET_TYPE_ID, FCT_STORE_DEPARTMENT_BUDGET.BUDGET_TYPE_LABEL, FCT_STORE_DEPARTMENT_BUDGET.AMOUNT, FCT_STORE_DEPARTMENT_BUDGET.CURRENT_FLAG, FCT_STORE_DEPARTMENT_BUDGET.VERSION_NUMBER, FCT_STORE_DEPARTMENT_BUDGET.EXTRACT_DATE, FCT_STORE_DEPARTMENT_BUDGET.SOURCE_FILE_NAME, FCT_STORE_DEPARTMENT_BUDGET.CREATE_DATE, FCT_STORE_DEPARTMENT_BUDGET.MAINT_DATE, FCT_STORE_DEPARTMENT_BUDGET.CREATE_UID, FCT_STORE_DEPARTMENT_BUDGET.MAINT_UID, FCT_STORE_DEPARTMENT_BUDGET.DELETE_FLAG, FCT_STORE_DEPARTMENT_BUDGET.DELETE_DATE, FCT_STORE_DEPARTMENT_BUDGET.DELETE_UID From EBIDW.COMMON.FCT_STORE_DEPARTMENT_BUDGET Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_STORE_DEPARTMENT_BUDGET.STORE_NUMBER WHERE ((FCT_STORE_DEPARTMENT_BUDGET.CURRENT_FLAG = 't'::BOOLEAN) AND (FCT_STORE_DEPARTMENT_BUDGET.BUDGET_TYPE_LABEL = 'Shrink Accrual'));
create or replace view FCT_STORE_DEPARTMENT_SHRINK_BUDGET_CURRENT(
	STORE_ID,
	STORE_NUMBER,
	SALES_DEPARTMENT_ID,
	SALES_DEPARTMENT_NUMBER,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	BUDGET_TYPE_ID,
	BUDGET_TYPE_LABEL,
	AMOUNT,
	CURRENT_FLAG,
	VERSION_NUMBER,
	EXTRACT_DATE,
	SOURCE_FILE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_STORE_DEPARTMENT_BUDGET.STORE_ID, FCT_STORE_DEPARTMENT_BUDGET.STORE_NUMBER, FCT_STORE_DEPARTMENT_BUDGET.SALES_DEPARTMENT_ID, FCT_STORE_DEPARTMENT_BUDGET.SALES_DEPARTMENT_NUMBER, FCT_STORE_DEPARTMENT_BUDGET.BUSINESS_FISCAL_DAY_ID, FCT_STORE_DEPARTMENT_BUDGET.BUSINESS_DATE, FCT_STORE_DEPARTMENT_BUDGET.BUDGET_TYPE_ID, FCT_STORE_DEPARTMENT_BUDGET.BUDGET_TYPE_LABEL, FCT_STORE_DEPARTMENT_BUDGET.AMOUNT, FCT_STORE_DEPARTMENT_BUDGET.CURRENT_FLAG, FCT_STORE_DEPARTMENT_BUDGET.VERSION_NUMBER, FCT_STORE_DEPARTMENT_BUDGET.EXTRACT_DATE, FCT_STORE_DEPARTMENT_BUDGET.SOURCE_FILE_NAME, FCT_STORE_DEPARTMENT_BUDGET.CREATE_DATE, FCT_STORE_DEPARTMENT_BUDGET.MAINT_DATE, FCT_STORE_DEPARTMENT_BUDGET.CREATE_UID, FCT_STORE_DEPARTMENT_BUDGET.MAINT_UID, FCT_STORE_DEPARTMENT_BUDGET.DELETE_FLAG, FCT_STORE_DEPARTMENT_BUDGET.DELETE_DATE, FCT_STORE_DEPARTMENT_BUDGET.DELETE_UID From EBIDW.
COMMON.FCT_STORE_DEPARTMENT_BUDGET Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER= FCT_STORE_DEPARTMENT_BUDGET.STORE_NUMBER WHERE ((FCT_STORE_DEPARTMENT_BUDGET.CURRENT_FLAG = 't'::BOOLEAN) AND (FCT_STORE_DEPARTMENT_BUDGET.BUDGET_TYPE_LABEL = 'Budgeted Shrink'));
create or replace view FCT_STORE_INVENTORY_CURRENT(
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	ITEM_ID,
	MERCH_ITEM_ID,
	PRIMARY_UPC,
	INVENTORY_FISCAL_DAY_ID,
	INVENTORY_DATE,
	BEGIN_QUANTITY,
	BEGIN_SKU_QUANTITY,
	BEGIN_EXTENDED_VALUE,
	BEGIN_AVERAGE_UNIT_VALUE,
	BEGIN_AVERAGE_SKU_UNIT_VALUE,
	END_QUANTITY,
	END_SKU_QUANTITY,
	END_EXTENDED_VALUE,
	END_AVERAGE_UNIT_VALUE,
	END_AVERAGE_SKU_UNIT_VALUE,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID
) as SELECT FCT_STORE_INVENTORY.STORE_ID, FCT_STORE_INVENTORY.SALES_STORE_ID, FCT_STORE_INVENTORY.STORE_NUMBER, FCT_STORE_INVENTORY.ITEM_ID, FCT_STORE_INVENTORY.MERCH_ITEM_ID, FCT_STORE_INVENTORY.PRIMARY_UPC, FCT_STORE_INVENTORY.INVENTORY_FISCAL_DAY_ID, FCT_STORE_INVENTORY.INVENTORY_DATE, FCT_STORE_INVENTORY.BEGIN_QUANTITY, FCT_STORE_INVENTORY.BEGIN_SKU_QUANTITY, FCT_STORE_INVENTORY.BEGIN_EXTENDED_VALUE, FCT_STORE_INVENTORY.BEGIN_AVERAGE_UNIT_VALUE, FCT_STORE_INVENTORY.BEGIN_AVERAGE_SKU_UNIT_VALUE, FCT_STORE_INVENTORY.END_QUANTITY, FCT_STORE_INVENTORY.END_SKU_QUANTITY, FCT_STORE_INVENTORY.END_EXTENDED_VALUE, FCT_STORE_INVENTORY.END_AVERAGE_UNIT_VALUE, FCT_STORE_INVENTORY.END_AVERAGE_SKU_UNIT_VALUE, FCT_STORE_INVENTORY.CREATE_DATE, FCT_STORE_INVENTORY.MAINT_DATE, FCT_STORE_INVENTORY.CREATE_UID, FCT_STORE_INVENTORY.MAINT_UID From EBIDW.PI.FCT_STORE_INVENTORY Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_STORE_INVENTORY.STORE_NUMBER;
create or replace view FCT_STORE_INVENTORY_LIFO_CURRENT(
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	ITEM_ID,
	MERCH_ITEM_ID,
	PRIMARY_UPC,
	INVENTORY_FISCAL_DAY_ID,
	INVENTORY_DATE,
	BEGIN_QUANTITY,
	BEGIN_SKU_QUANTITY,
	BEGIN_EXTENDED_VALUE,
	BEGIN_AVERAGE_UNIT_VALUE,
	BEGIN_AVERAGE_SKU_UNIT_VALUE,
	END_QUANTITY,
	END_SKU_QUANTITY,
	END_EXTENDED_VALUE,
	END_AVERAGE_UNIT_VALUE,
	END_AVERAGE_SKU_UNIT_VALUE,
	ITEM_CHANGE_FLAG,
	DEAL_FLAG,
	OFF_INVOICE_ALLOWANCE,
	BILLBACK_ALLOWANCE,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID
) as SELECT FCT_STORE_INVENTORY_LIFO.STORE_ID, FCT_STORE_INVENTORY_LIFO.SALES_STORE_ID, FCT_STORE_INVENTORY_LIFO.STORE_NUMBER, FCT_STORE_INVENTORY_LIFO.ITEM_ID, FCT_STORE_INVENTORY_LIFO.MERCH_ITEM_ID, FCT_STORE_INVENTORY_LIFO.PRIMARY_UPC, FCT_STORE_INVENTORY_LIFO.INVENTORY_FISCAL_DAY_ID, FCT_STORE_INVENTORY_LIFO.INVENTORY_DATE, FCT_STORE_INVENTORY_LIFO.BEGIN_QUANTITY, FCT_STORE_INVENTORY_LIFO.BEGIN_SKU_QUANTITY, FCT_STORE_INVENTORY_LIFO.BEGIN_EXTENDED_VALUE, FCT_STORE_INVENTORY_LIFO.BEGIN_AVERAGE_UNIT_VALUE, FCT_STORE_INVENTORY_LIFO.BEGIN_AVERAGE_SKU_UNIT_VALUE, FCT_STORE_INVENTORY_LIFO.END_QUANTITY, FCT_STORE_INVENTORY_LIFO.END_SKU_QUANTITY, FCT_STORE_INVENTORY_LIFO.END_EXTENDED_VALUE, FCT_STORE_INVENTORY_LIFO.END_AVERAGE_UNIT_VALUE, FCT_STORE_INVENTORY_LIFO.END_AVERAGE_SKU_UNIT_VALUE, FCT_STORE_INVENTORY_LIFO.ITEM_CHANGE_FLAG, FCT_STORE_INVENTORY_LIFO.DEAL_FLAG, FCT_STORE_INVENTORY_LIFO.OFF_INVOICE_ALLOWANCE, FCT_STORE_INVENTORY_LIFO.BILLBACK_ALLOWANCE, FCT_STORE_INVENTORY_LIFO.CREATE_DATE, FCT_STORE_INVENTORY_LIFO.MAINT_DATE, FCT_STORE_INVENTORY_LIFO.CREATE_UID, FCT_STORE_INVENTORY_LIFO.MAINT_UID From EBIDW.PI.FCT_STORE_INVENTORY_LIFO 
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_STORE_INVENTORY_LIFO.STORE_NUMBER;
create or replace view FCT_STORE_PROJECTION_CURRENT(
	STORE_NUMBER,
	STORE_PROJECTION_ID,
	STORE_ID,
	SALES_DEPARTMENT_ID,
	FISCAL_WEEK_ID,
	PROJECTED_SALES,
	PROJECTION_VERSION,
	ACTIVE_FLAG
) as SELECT FCT_STORE_PROJECTION.STORE_NUMBER, FCT_STORE_PROJECTION.STORE_PROJECTION_ID, FCT_STORE_PROJECTION.STORE_ID, FCT_STORE_PROJECTION.SALES_DEPARTMENT_ID, FCT_STORE_PROJECTION.FISCAL_WEEK_ID, FCT_STORE_PROJECTION.PROJECTED_SALES, FCT_STORE_PROJECTION.PROJECTION_VERSION, FCT_STORE_PROJECTION.ACTIVE_FLAG From EBIDW.SALES.FCT_STORE_PROJECTION Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_STORE_PROJECTION.STORE_NUMBER WHERE ((FCT_STORE_PROJECTION.DELETE_FLAG = 'f'::BOOLEAN) AND (FCT_STORE_PROJECTION.CURRENT_FLAG = 't'::BOOLEAN));
create or replace view FCT_STORE_WEEK_SHRINK_CURRENT(
	STORE_ID,
	INVENTORY_DEPARTMENT_ID,
	SALES_DEPARTMENT_ID,
	FISCAL_WEEK_ID,
	FISCAL_WEEK_END_DAY_ID,
	SALES_DEPARTMENT_LABEL,
	INVENTORY_DEPARTMENT_LABEL,
	SALES_DEPARTMENT_GROUP_ID,
	SALES_DEPARTMENT_GROUP_LABEL,
	FISCAL_WEEK_OF_PERIOD_LABEL,
	FISCAL_PERIOD_OF_YEAR_LABEL,
	FISCAL_PERIOD_ID,
	FISCAL_DAY_LAST_YEAR_ID,
	AR_TOTALSHRINK_AMT,
	AR_SYSTEM_UNK_NEG1_AMT,
	AR_AUTOADJ0_AMT,
	AR_CODEDUNK1_AMT,
	AR_CODEDUNK2_AMT,
	AR_DAMAGED3_AMT,
	AR_OUTOFCODE4_AMT,
	AR_LOADSHORT5_AMT,
	AR_TRANSFEROUT6_AMT,
	AR_LOADOVER7_AMT,
	AR_TRANSFERIN8_AMT,
	AR_OUTTOAPPLE9_AMT,
	AR_INFROMAPPLE10_AMT,
	AR_RECALL11_AMT,
	AR_SAMPLENSALES12_AMT,
	AR_VENDORCREDIT13_AMT,
	AR_RETURNTOWHSE14_AMT,
	AR_DONATION15_AMT,
	AR_STORMDAMAGE16_AMT,
	AR_EQUIPMENTFAILURE17_AMT,
	AR_DISCONTINUED18_AMT,
	AR_THEFT19_AMT,
	AR_COUNTSHRINK1001AMT,
	AR_COUNTGAIN1002_AMT,
	AR_SKIPPEDTICKET1003_AMT,
	AR_FORCECLOSELOSS1004_AMT,
	AR_FORCECLOSEGAIN1005_AMT,
	AR_RECLAIM1006_AMT,
	AR_DENIEDLOADSHORTSHRINK2005_AMT,
	AR_DENIEDLOADSHORTGAIN2007_AMT,
	AR_DENIEDRECALL2011_AMT,
	AR_DENIEDSAMPLESNSALESSHRINK2012_AMT,
	AR_DENIEDVENDORCREDITSHRINK2013_AMT,
	AR_DENIEDRETURNTOWHSESHRINK2014_AMT,
	AR_DENIEDDONATION2015_AMT,
	AR_DENIEDSTORMDAMAGE2016_AMT,
	AR_DENIEDEQUIPMENTFAILURE2017_AMT,
	AR_3PLUS4_AMT,
	AR_1001PLUS1002_AMT,
	AR_1004PLUS1005_AMT,
	AR_VALUEADJUSTMENTWRITEDOWN_AMT
) as SELECT SNW_STORE_WEEK_FACT_SCALAR.STORE_ID, SNW_STORE_WEEK_FACT_SCALAR.INVENTORY_DEPARTMENT_ID, SNW_STORE_WEEK_FACT_SCALAR.SALES_DEPARTMENT_ID, SNW_STORE_WEEK_FACT_SCALAR.FISCAL_WEEK_ID, SNW_STORE_WEEK_FACT_SCALAR.FISCAL_WEEK_END_DAY_ID, SNW_STORE_WEEK_FACT_SCALAR.SALES_DEPARTMENT_LABEL, SNW_STORE_WEEK_FACT_SCALAR.INVENTORY_DEPARTMENT_LABEL, SNW_STORE_WEEK_FACT_SCALAR.SALES_DEPARTMENT_GROUP_ID, SNW_STORE_WEEK_FACT_SCALAR.SALES_DEPARTMENT_GROUP_LABEL, SNW_STORE_WEEK_FACT_SCALAR.FISCAL_WEEK_OF_PERIOD_LABEL, SNW_STORE_WEEK_FACT_SCALAR.FISCAL_PERIOD_OF_YEAR_LABEL, SNW_STORE_WEEK_FACT_SCALAR.FISCAL_PERIOD_ID, SNW_STORE_WEEK_FACT_SCALAR.FISCAL_DAY_LAST_YEAR_ID, ((((((((((((((((((SNW_STORE_WEEK_FACT_SCALAR.AR_3PLUS4_AMT + SNW_STORE_WEEK_FACT_SCALAR.AR_DONATION15_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_STORMDAMAGE16_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_EQUIPMENTFAILURE17_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DISCONTINUED18_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_THEFT19_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_COUNTSHRINK1001AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_COUNTGAIN1002_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_1004PLUS1005_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDLOADSHORTSHRINK2005_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDLOADSHORTGAIN2007_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDRECALL2011_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDSAMPLESNSALESSHRINK2012_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDVENDORCREDITSHRINK2013_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDRETURNTOWHSESHRINK2014_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDDONATION2015_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDSTORMDAMAGE2016_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDEQUIPMENTFAILURE2017_AMT) + SNW_STORE_WEEK_FACT_SCALAR.AR_VALUEADJUSTMENTWRITEDOWN_AMT) AS AR_TOTALSHRINK_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_SYSTEM_UNK_NEG1_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_AUTOADJ0_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_CODEDUNK1_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_CODEDUNK2_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DAMAGED3_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_OUTOFCODE4_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_LOADSHORT5_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_TRANSFEROUT6_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_LOADOVER7_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_TRANSFERIN8_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_OUTTOAPPLE9_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_INFROMAPPLE10_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_RECALL11_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_SAMPLENSALES12_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_VENDORCREDIT13_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_RETURNTOWHSE14_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DONATION15_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_STORMDAMAGE16_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_EQUIPMENTFAILURE17_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DISCONTINUED18_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_THEFT19_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_COUNTSHRINK1001AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_COUNTGAIN1002_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_SKIPPEDTICKET1003_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_FORCECLOSELOSS1004_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_FORCECLOSEGAIN1005_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_RECLAIM1006_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDLOADSHORTSHRINK2005_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDLOADSHORTGAIN2007_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDRECALL2011_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDSAMPLESNSALESSHRINK2012_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDVENDORCREDITSHRINK2013_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDRETURNTOWHSESHRINK2014_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDDONATION2015_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDSTORMDAMAGE2016_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_DENIEDEQUIPMENTFAILURE2017_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_3PLUS4_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_1001PLUS1002_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_1004PLUS1005_AMT, SNW_STORE_WEEK_FACT_SCALAR.AR_VALUEADJUSTMENTWRITEDOWN_AMT From EBIDW.PI.SNW_STORE_WEEK_FACT_SCALAR Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.STORE_ID=SNW_STORE_WEEK_FACT_SCALAR.STORE_ID;
create or replace view FCT_TENDER_DETAIL_CURRENT(
	TENDER_DETAIL_ID,
	TENDER_MEDIA_TYPE_ID,
	ORDER_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	SETTLEMENT_DATE,
	SETTLEMENT_FISCAL_DAY_ID,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	TRANSACTION_DATE,
	TRANSACTION_TIME,
	TRANSACTION_FISCAL_DAY_ID,
	STAN,
	ORDER_NUMBER,
	TENDER_ENTRY_TYPE_CODE,
	TENDER_ENTRY_TYPE_ID,
	TERMINAL_NUMBER,
	EASY_SCAN_RECORD,
	SPECIAL_ITEM_CODE_1,
	SPECIAL_ITEM_CODE_2,
	SPECIAL_ITEM_CODE_3,
	ITEM_DESCRIPTION,
	WIC_FRUIT_VEG_FLAG,
	WIC_AMOUNT_PRINT_FLAG,
	WIC_AMOUNT_NOT_TO_EXCEED,
	ACCOUNT_NUMBER,
	VERIFONE_PROMPT,
	QUANTITY,
	FOOD_STAMPS_PAID,
	TENDER_CARD_TYPE_CODE,
	TENDER_CARD_TYPE_ID,
	SCALE_ITEM_CODE,
	SEQUENCE_NUMBER,
	AMOUNT_OF_ITEM,
	EXTENDED_TENDER_AMOUNT,
	FOOD_STAMPS_OWED,
	TAX_LEVEL_FLAG,
	TENDER_MICR_STATUS_TYPE_CODE,
	TENDER_MICR_STATUS_TYPE_ID,
	CASHIER_NUMBER,
	MANAGER_NUMBER,
	ORIGINAL_TENDER_DEPARTMENT_NUMBER,
	ORIGINAL_TENDER_DEPARTMENT_ID,
	TENDER_DEPARTMENT_NUMBER,
	TENDER_DEPARTMENT_ID,
	SPLIT_PRICE_FRACTION,
	TENDER_PAYMENT_STATUS_CODE,
	TENDER_PAYMENT_STATUS_ID,
	PRICE_FROM_INVENTORY_DB,
	AUTHORIZATION_CODE,
	TENDER_DECLINE_CODE,
	TENDER_DECLINE_ID,
	EBT_CASH_BENEFIT_BALANCE,
	HSA_ELIBIBLE_ITEMS_TOTAL,
	STARBUCKS_TOTAL,
	TENDER_SPECIAL_STATUS_CODE_ID,
	TENDER_SPECIAL_STATUS_CODE,
	EBT_FOODSTAMP_BENIFITS_BALANCE,
	RX_ELIGIBLE_ITEM_TOTAL,
	TENDER_DIRECTION_MULTIPLIER,
	SETTLEMENT_DATE_UPDATED_FLAG,
	SETTLEMENT_DATE_UPDATED_TIMESTAMP,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	JOURNAL_FILE_NAME,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_TENDER_DETAIL.TENDER_DETAIL_ID, FCT_TENDER_DETAIL.TENDER_MEDIA_TYPE_ID, FCT_TENDER_DETAIL.ORDER_HEADER_ID, FCT_TENDER_DETAIL.DIVISION_NUMBER, FCT_TENDER_DETAIL.STORE_ID, FCT_TENDER_DETAIL.SALES_STORE_ID, FCT_TENDER_DETAIL.STORE_NUMBER, FCT_TENDER_DETAIL.SETTLEMENT_DATE, FCT_TENDER_DETAIL.SETTLEMENT_FISCAL_DAY_ID, FCT_TENDER_DETAIL.BUSINESS_DATE, FCT_TENDER_DETAIL.BUSINESS_FISCAL_DAY_ID, FCT_TENDER_DETAIL.TRANSACTION_DATE, FCT_TENDER_DETAIL.TRANSACTION_TIME, FCT_TENDER_DETAIL.TRANSACTION_FISCAL_DAY_ID, FCT_TENDER_DETAIL.STAN, FCT_TENDER_DETAIL.ORDER_NUMBER, FCT_TENDER_DETAIL.TENDER_ENTRY_TYPE_CODE, FCT_TENDER_DETAIL.TENDER_ENTRY_TYPE_ID, FCT_TENDER_DETAIL.TERMINAL_NUMBER, FCT_TENDER_DETAIL.EASY_SCAN_RECORD, FCT_TENDER_DETAIL.SPECIAL_ITEM_CODE_1, FCT_TENDER_DETAIL.SPECIAL_ITEM_CODE_2, FCT_TENDER_DETAIL.SPECIAL_ITEM_CODE_3, FCT_TENDER_DETAIL.ITEM_DESCRIPTION, FCT_TENDER_DETAIL.WIC_FRUIT_VEG_FLAG, FCT_TENDER_DETAIL.WIC_AMOUNT_PRINT_FLAG, FCT_TENDER_DETAIL.WIC_AMOUNT_NOT_TO_EXCEED, FCT_TENDER_DETAIL.ACCOUNT_NUMBER, FCT_TENDER_DETAIL.VERIFONE_PROMPT, FCT_TENDER_DETAIL.QUANTITY, FCT_TENDER_DETAIL.FOOD_STAMPS_PAID, FCT_TENDER_DETAIL.TENDER_CARD_TYPE_CODE, FCT_TENDER_DETAIL.TENDER_CARD_TYPE_ID, FCT_TENDER_DETAIL.SCALE_ITEM_CODE, FCT_TENDER_DETAIL.SEQUENCE_NUMBER, FCT_TENDER_DETAIL.AMOUNT_OF_ITEM, (FCT_TENDER_DETAIL.AMOUNT_OF_ITEM * TO_NUMBER(FCT_TENDER_DETAIL.TENDER_DIRECTION_MULTIPLIER)) AS EXTENDED_TENDER_AMOUNT, FCT_TENDER_DETAIL.FOOD_STAMPS_OWED, FCT_TENDER_DETAIL.TAX_LEVEL_FLAG, FCT_TENDER_DETAIL.TENDER_MICR_STATUS_TYPE_CODE, FCT_TENDER_DETAIL.TENDER_MICR_STATUS_TYPE_ID, FCT_TENDER_DETAIL.CASHIER_NUMBER, FCT_TENDER_DETAIL.MANAGER_NUMBER, FCT_TENDER_DETAIL.ORIGINAL_TENDER_DEPARTMENT_NUMBER, FCT_TENDER_DETAIL.ORIGINAL_TENDER_DEPARTMENT_ID, FCT_TENDER_DETAIL.TENDER_DEPARTMENT_NUMBER, FCT_TENDER_DETAIL.TENDER_DEPARTMENT_ID, FCT_TENDER_DETAIL.SPLIT_PRICE_FRACTION, FCT_TENDER_DETAIL.TENDER_PAYMENT_STATUS_CODE, FCT_TENDER_DETAIL.TENDER_PAYMENT_STATUS_ID, FCT_TENDER_DETAIL.PRICE_FROM_INVENTORY_DB, FCT_TENDER_DETAIL.AUTHORIZATION_CODE, FCT_TENDER_DETAIL.TENDER_DECLINE_CODE, FCT_TENDER_DETAIL.TENDER_DECLINE_ID, FCT_TENDER_DETAIL.EBT_CASH_BENEFIT_BALANCE, FCT_TENDER_DETAIL.HSA_ELIBIBLE_ITEMS_TOTAL, FCT_TENDER_DETAIL.STARBUCKS_TOTAL, FCT_TENDER_DETAIL.TENDER_SPECIAL_STATUS_CODE_ID, FCT_TENDER_DETAIL.TENDER_SPECIAL_STATUS_CODE, FCT_TENDER_DETAIL.EBT_FOODSTAMP_BENIFITS_BALANCE, FCT_TENDER_DETAIL.RX_ELIGIBLE_ITEM_TOTAL, FCT_TENDER_DETAIL.TENDER_DIRECTION_MULTIPLIER, FCT_TENDER_DETAIL.SETTLEMENT_DATE_UPDATED_FLAG, FCT_TENDER_DETAIL.SETTLEMENT_DATE_UPDATED_TIMESTAMP, FCT_TENDER_DETAIL.LINE_NUMBER, FCT_TENDER_DETAIL.MASTER_LINE_NUMBER, FCT_TENDER_DETAIL.JOURNAL_FILE_NAME, FCT_TENDER_DETAIL.EXTRACT_DATE, FCT_TENDER_DETAIL.SOURCE_TABLE_NAME, FCT_TENDER_DETAIL.CREATE_DATE, FCT_TENDER_DETAIL.MAINT_DATE, FCT_TENDER_DETAIL.CREATE_UID, FCT_TENDER_DETAIL.MAINT_UID, FCT_TENDER_DETAIL.DELETE_FLAG, FCT_TENDER_DETAIL.DELETE_DATE, FCT_TENDER_DETAIL.DELETE_UID From EBIDW.PI.FCT_TENDER_DETAIL Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_TENDER_DETAIL.STORE_NUMBER;
create or replace view FCT_TENDER_DETAIL_TO_SQL(
	TENDER_DETAIL_ID,
	TENDER_MEDIA_TYPE_ID,
	ORDER_HEADER_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	TRANSACTION_DATE,
	TRANSACTION_TIME,
	TRANSACTION_FISCAL_DAY_ID,
	ORDER_NUMBER,
	TENDER_ENTRY_TYPE_CODE,
	TENDER_ENTRY_TYPE_ID,
	TERMINAL_NUMBER,
	ACCOUNT_NUMBER,
	TENDER_CARD_TYPE_CODE,
	TENDER_CARD_TYPE_ID,
	SEQUENCE_NUMBER,
	AMOUNT_OF_ITEM,
	EXTENDED_TENDER_AMOUNT,
	TENDER_MICR_STATUS_TYPE_CODE,
	TENDER_MICR_STATUS_TYPE_ID,
	CASHIER_NUMBER,
	MANAGER_NUMBER,
	ORIGINAL_TENDER_DEPARTMENT_NUMBER,
	ORIGINAL_TENDER_DEPARTMENT_ID,
	TENDER_PAYMENT_STATUS_CODE,
	TENDER_PAYMENT_STATUS_ID,
	AUTHORIZATION_CODE,
	TENDER_DECLINE_CODE,
	TENDER_DECLINE_ID,
	TENDER_SPECIAL_STATUS_CODE_ID,
	TENDER_SPECIAL_STATUS_CODE,
	TENDER_DIRECTION_MULTIPLIER
) as SELECT FCT_TENDER_DETAIL.TENDER_DETAIL_ID, FCT_TENDER_DETAIL.TENDER_MEDIA_TYPE_ID, FCT_TENDER_DETAIL.ORDER_HEADER_ID, FCT_TENDER_DETAIL.STORE_ID, FCT_TENDER_DETAIL.SALES_STORE_ID, FCT_TENDER_DETAIL.STORE_NUMBER, FCT_TENDER_DETAIL.BUSINESS_DATE, FCT_TENDER_DETAIL.BUSINESS_FISCAL_DAY_ID, FCT_TENDER_DETAIL.TRANSACTION_DATE, FCT_TENDER_DETAIL.TRANSACTION_TIME, FCT_TENDER_DETAIL.TRANSACTION_FISCAL_DAY_ID, FCT_TENDER_DETAIL.ORDER_NUMBER, FCT_TENDER_DETAIL.TENDER_ENTRY_TYPE_CODE, FCT_TENDER_DETAIL.TENDER_ENTRY_TYPE_ID, FCT_TENDER_DETAIL.TERMINAL_NUMBER, FCT_TENDER_DETAIL.ACCOUNT_NUMBER, FCT_TENDER_DETAIL.TENDER_CARD_TYPE_CODE, FCT_TENDER_DETAIL.TENDER_CARD_TYPE_ID, FCT_TENDER_DETAIL.SEQUENCE_NUMBER, FCT_TENDER_DETAIL.AMOUNT_OF_ITEM, (FCT_TENDER_DETAIL.AMOUNT_OF_ITEM * TO_NUMBER(FCT_TENDER_DETAIL.TENDER_DIRECTION_MULTIPLIER)) AS EXTENDED_TENDER_AMOUNT, FCT_TENDER_DETAIL.TENDER_MICR_STATUS_TYPE_CODE, FCT_TENDER_DETAIL.TENDER_MICR_STATUS_TYPE_ID, FCT_TENDER_DETAIL.CASHIER_NUMBER, FCT_TENDER_DETAIL.MANAGER_NUMBER, FCT_TENDER_DETAIL.ORIGINAL_TENDER_DEPARTMENT_NUMBER, FCT_TENDER_DETAIL.ORIGINAL_TENDER_DEPARTMENT_ID, FCT_TENDER_DETAIL.TENDER_PAYMENT_STATUS_CODE, FCT_TENDER_DETAIL.TENDER_PAYMENT_STATUS_ID, FCT_TENDER_DETAIL.AUTHORIZATION_CODE, FCT_TENDER_DETAIL.TENDER_DECLINE_CODE, FCT_TENDER_DETAIL.TENDER_DECLINE_ID, FCT_TENDER_DETAIL.TENDER_SPECIAL_STATUS_CODE_ID, FCT_TENDER_DETAIL.TENDER_SPECIAL_STATUS_CODE, FCT_TENDER_DETAIL.TENDER_DIRECTION_MULTIPLIER From EBIDW.PI.FCT_TENDER_DETAIL Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_TENDER_DETAIL.STORE_NUMBER WHERE (FCT_TENDER_DETAIL.BUSINESS_DATE > (TO_DATE(CURRENT_DATE()) - 365));
create or replace view FCT_TENDER_SUMMARY_CURRENT(
	ORDER_HEADER_ID,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	STORE_NUMBER,
	STORE_ID,
	TERMINAL_NUMBER,
	ORDER_NUMBER,
	TRANSACTION_DATE,
	TRANSACTION_FISCAL_DAY_ID,
	TRANSACTION_TIME,
	TENDERS_COUNT,
	GROSS_CASH_COUNT,
	REGULAR_CASH_COUNT,
	CANADIAN_CASH_COUNT,
	CANADIAN_DESCREP_COUNT,
	REBATES_COUNT,
	ONLINE_CHECKS_COUNT,
	ONLINE_MGRCHECKS_COUNT,
	WIC_CHECKS_COUNT,
	TRVL_CHECKS_COUNT,
	FOODSTAMPS_COUNT,
	MISC_MASTERCARD_COUNT,
	MISC_VISA_COUNT,
	MISC_DISCOVER_COUNT,
	MISC_AMEX_COUNT,
	MISC_DEBIT_COUNT,
	MISC_TENDER_COUNT,
	MFG_ELECTRONIC_COUPONS_COUNT,
	MFG_PAPER_COUPONS_COUNT,
	EFT_ONLINE_MASTERCARD_COUNT,
	EFT_ONLINE_VISA_COUNT,
	EFT_ONLINE_DISCOVER_COUNT,
	EFT_ONLINE_AMEX_COUNT,
	EFT_ONLINE_DEBIT_COUNT,
	EFT_ONLINE_GIFTCARD_COUNT,
	EFT_ONLINE_STARBUCKS_COUNT,
	EFT_ONLINE_EBT_FOODSTAMP_COUNT,
	EFT_ONLINE_CASH_BENEFIT_COUNT,
	EFT_OFFLINE_MASTERCARD_COUNT,
	EFT_OFFLINE_VISA_COUNT,
	EFT_OFFLINE_DISCOVER_COUNT,
	EFT_OFFLINE_AMEX_COUNT,
	EFT_OFFLINE_DEBIT_COUNT,
	EFT_OFFLINE_EBT_FOODSTAMP_COUNT,
	EFT_OFFLINE_CASH_BENEFIT_COUNT,
	EFT_OFFLINE_CHECKS_COUNT,
	EFT_OFFLINE_MGRCHECKS_COUNT,
	ADV_VENDOR_COUNT,
	FQ_SHOPPER_12_COUNT,
	FQ_SHOPPER_98_COUNT,
	PC_CHARGE_COUNT,
	SENIOR_DISCOUNT_COUNT,
	BOTTLE_SLIPS_COUNT,
	BAGS_COUNT,
	GIFT_CERTIFICATE_COUNT,
	VOID_TENDERS_COUNT,
	VOIDEDRFND_TENDERS_COUNT,
	REFUND_TENDERS_COUNT,
	CANCELED_TENDERS_COUNT,
	DECLINED_TENDERS_COUNT,
	APPROVED_TENDERS_COUNT,
	MANUAL_TENDERS_COUNT,
	MGR_CHECKS_APPROVED_COUNT,
	TVL_CHECKS_APPROVED_COUNT,
	EFT_OFFLINES_APPROVED_COUNT,
	SCAN_GUAR_COUNT,
	WIC_OVERAGE_COUNT,
	UNKN_TENDERS_COUNT,
	CASH_BACK_TOTAL,
	GROSS_CASH_TOTAL,
	REGULAR_CASH_TOTAL,
	CANADIAN_CASH_TOTAL,
	CANADIAN_DESCREP_TOTAL,
	REBATES_TOTAL,
	ONLINE_CHECKS_TOTAL,
	ONLINE_MGRCHECKS_TOTAL,
	WIC_CHECKS_TOTAL,
	TRVL_CHECKS_TOTAL,
	FOODSTAMPS_TOTAL,
	MISC_MASTERCARD_TOTAL,
	MISC_VISA_TOTAL,
	MISC_DISCOVER_TOTAL,
	MISC_AMEX_TOTAL,
	MISC_DEBIT_TOTAL,
	MISC_TENDER_TOTAL,
	MFG_ELECTRONIC_COUPONS_TOTAL,
	MFG_PAPER_COUPONS_TOTAL,
	EFT_ONLINE_MASTERCARD_TOTAL,
	EFT_ONLINE_VISA_TOTAL,
	EFT_ONLINE_DISCOVER_TOTAL,
	EFT_ONLINE_AMEX_TOTAL,
	EFT_ONLINE_DEBIT_TOTAL,
	EFT_ONLINE_GIFTCARD_TOTAL,
	EFT_ONLINE_STARBUCKS_TOTAL,
	EFT_ONLINE_EBT_FOODSTAMP_TOTAL,
	EFT_ONLINE_CASH_BENEFIT_TOTAL,
	EFT_OFFLINE_MASTERCARD_TOTAL,
	EFT_OFFLINE_VISA_TOTAL,
	EFT_OFFLINE_DISCOVER_TOTAL,
	EFT_OFFLINE_AMEX_TOTAL,
	EFT_OFFLINE_DEBIT_TOTAL,
	EFT_OFFLINE_EBT_FOODSTAMP_TOTAL,
	EFT_OFFLINE_CASH_BENEFIT_TOTAL,
	EFT_OFFLINE_CHECKS_TOTAL,
	EFT_OFFLINE_MGRCHECKS_TOTAL,
	ADV_VENDOR_TOTAL,
	FQ_SHOPPER_12_TOTAL,
	FQ_SHOPPER_98_TOTAL,
	SENIOR_DISCOUNT_TOTAL,
	BOTTLE_SLIPS_TOTAL,
	BAGS_TOTAL,
	PC_CHARGE_TOTAL,
	GIFT_CERTIFICATE_TOTAL,
	SCAN_GUAR_TOTAL,
	WIC_OVERAGE_TOTAL,
	UNKN_TENDERS_TOTAL,
	EXTENDED_TENDER_TOTAL,
	JOURNAL_FILE_NAME,
	CREATE_DATE,
	MAINT_DATE
) as SELECT FCT_TENDER_SUMMARY.ORDER_HEADER_ID, FCT_TENDER_SUMMARY.BUSINESS_DATE, FCT_TENDER_SUMMARY.BUSINESS_FISCAL_DAY_ID, FCT_TENDER_SUMMARY.STORE_NUMBER, FCT_TENDER_SUMMARY.STORE_ID, FCT_TENDER_SUMMARY.TERMINAL_NUMBER, FCT_TENDER_SUMMARY.ORDER_NUMBER, FCT_TENDER_SUMMARY.TRANSACTION_DATE, FCT_TENDER_SUMMARY.TRANSACTION_FISCAL_DAY_ID, FCT_TENDER_SUMMARY.TRANSACTION_TIME, FCT_TENDER_SUMMARY.TENDERS_COUNT, FCT_TENDER_SUMMARY.GROSS_CASH_COUNT, FCT_TENDER_SUMMARY.REGULAR_CASH_COUNT, FCT_TENDER_SUMMARY.CANADIAN_CASH_COUNT, FCT_TENDER_SUMMARY.CANADIAN_DESCREP_COUNT, FCT_TENDER_SUMMARY.REBATES_COUNT, FCT_TENDER_SUMMARY.ONLINE_CHECKS_COUNT, FCT_TENDER_SUMMARY.ONLINE_MGRCHECKS_COUNT, FCT_TENDER_SUMMARY.WIC_CHECKS_COUNT, FCT_TENDER_SUMMARY.TRVL_CHECKS_COUNT, FCT_TENDER_SUMMARY.FOODSTAMPS_COUNT, FCT_TENDER_SUMMARY.MISC_MASTERCARD_COUNT, FCT_TENDER_SUMMARY.MISC_VISA_COUNT, FCT_TENDER_SUMMARY.MISC_DISCOVER_COUNT, FCT_TENDER_SUMMARY.MISC_AMEX_COUNT, FCT_TENDER_SUMMARY.MISC_DEBIT_COUNT, FCT_TENDER_SUMMARY.MISC_TENDER_COUNT, FCT_TENDER_SUMMARY.MFG_ELECTRONIC_COUPONS_COUNT, FCT_TENDER_SUMMARY.MFG_PAPER_COUPONS_COUNT, FCT_TENDER_SUMMARY.EFT_ONLINE_MASTERCARD_COUNT, FCT_TENDER_SUMMARY.EFT_ONLINE_VISA_COUNT, FCT_TENDER_SUMMARY.EFT_ONLINE_DISCOVER_COUNT, FCT_TENDER_SUMMARY.EFT_ONLINE_AMEX_COUNT, FCT_TENDER_SUMMARY.EFT_ONLINE_DEBIT_COUNT, FCT_TENDER_SUMMARY.EFT_ONLINE_GIFTCARD_COUNT, FCT_TENDER_SUMMARY.EFT_ONLINE_STARBUCKS_COUNT, FCT_TENDER_SUMMARY.EFT_ONLINE_EBT_FOODSTAMP_COUNT, FCT_TENDER_SUMMARY.EFT_ONLINE_CASH_BENEFIT_COUNT, FCT_TENDER_SUMMARY.EFT_OFFLINE_MASTERCARD_COUNT, FCT_TENDER_SUMMARY.EFT_OFFLINE_VISA_COUNT, FCT_TENDER_SUMMARY.EFT_OFFLINE_DISCOVER_COUNT, FCT_TENDER_SUMMARY.EFT_OFFLINE_AMEX_COUNT, FCT_TENDER_SUMMARY.EFT_OFFLINE_DEBIT_COUNT, FCT_TENDER_SUMMARY.EFT_OFFLINE_EBT_FOODSTAMP_COUNT, FCT_TENDER_SUMMARY.EFT_OFFLINE_CASH_BENEFIT_COUNT, FCT_TENDER_SUMMARY.EFT_OFFLINE_CHECKS_COUNT, FCT_TENDER_SUMMARY.EFT_OFFLINE_MGRCHECKS_COUNT, FCT_TENDER_SUMMARY.ADV_VENDOR_COUNT, FCT_TENDER_SUMMARY.FQ_SHOPPER_12_COUNT, FCT_TENDER_SUMMARY.FQ_SHOPPER_98_COUNT, FCT_TENDER_SUMMARY.PC_CHARGE_COUNT, FCT_TENDER_SUMMARY.SENIOR_DISCOUNT_COUNT, FCT_TENDER_SUMMARY.BOTTLE_SLIPS_COUNT, FCT_TENDER_SUMMARY.BAGS_COUNT, FCT_TENDER_SUMMARY.GIFT_CERTIFICATE_COUNT, FCT_TENDER_SUMMARY.VOID_TENDERS_COUNT, FCT_TENDER_SUMMARY.VOIDEDRFND_TENDERS_COUNT, FCT_TENDER_SUMMARY.REFUND_TENDERS_COUNT, FCT_TENDER_SUMMARY.CANCELED_TENDERS_COUNT, FCT_TENDER_SUMMARY.DECLINED_TENDERS_COUNT, FCT_TENDER_SUMMARY.APPROVED_TENDERS_COUNT, FCT_TENDER_SUMMARY.MANUAL_TENDERS_COUNT, FCT_TENDER_SUMMARY.MGR_CHECKS_APPROVED_COUNT, FCT_TENDER_SUMMARY.TVL_CHECKS_APPROVED_COUNT, FCT_TENDER_SUMMARY.EFT_OFFLINES_APPROVED_COUNT, FCT_TENDER_SUMMARY.SCAN_GUAR_COUNT, FCT_TENDER_SUMMARY.WIC_OVERAGE_COUNT, FCT_TENDER_SUMMARY.UNKN_TENDERS_COUNT, FCT_TENDER_SUMMARY.CASH_BACK_TOTAL, FCT_TENDER_SUMMARY.GROSS_CASH_TOTAL, FCT_TENDER_SUMMARY.REGULAR_CASH_TOTAL, FCT_TENDER_SUMMARY.CANADIAN_CASH_TOTAL, FCT_TENDER_SUMMARY.CANADIAN_DESCREP_TOTAL, FCT_TENDER_SUMMARY.REBATES_TOTAL, FCT_TENDER_SUMMARY.ONLINE_CHECKS_TOTAL, FCT_TENDER_SUMMARY.ONLINE_MGRCHECKS_TOTAL, FCT_TENDER_SUMMARY.WIC_CHECKS_TOTAL, FCT_TENDER_SUMMARY.TRVL_CHECKS_TOTAL, FCT_TENDER_SUMMARY.FOODSTAMPS_TOTAL, FCT_TENDER_SUMMARY.MISC_MASTERCARD_TOTAL, FCT_TENDER_SUMMARY.MISC_VISA_TOTAL, FCT_TENDER_SUMMARY.MISC_DISCOVER_TOTAL, FCT_TENDER_SUMMARY.MISC_AMEX_TOTAL, FCT_TENDER_SUMMARY.MISC_DEBIT_TOTAL, FCT_TENDER_SUMMARY.MISC_TENDER_TOTAL, FCT_TENDER_SUMMARY.MFG_ELECTRONIC_COUPONS_TOTAL, FCT_TENDER_SUMMARY.MFG_PAPER_COUPONS_TOTAL, FCT_TENDER_SUMMARY.EFT_ONLINE_MASTERCARD_TOTAL, FCT_TENDER_SUMMARY.EFT_ONLINE_VISA_TOTAL, FCT_TENDER_SUMMARY.EFT_ONLINE_DISCOVER_TOTAL, FCT_TENDER_SUMMARY.EFT_ONLINE_AMEX_TOTAL, FCT_TENDER_SUMMARY.EFT_ONLINE_DEBIT_TOTAL, FCT_TENDER_SUMMARY.EFT_ONLINE_GIFTCARD_TOTAL, FCT_TENDER_SUMMARY.EFT_ONLINE_STARBUCKS_TOTAL, FCT_TENDER_SUMMARY.EFT_ONLINE_EBT_FOODSTAMP_TOTAL, FCT_TENDER_SUMMARY.EFT_ONLINE_CASH_BENEFIT_TOTAL, FCT_TENDER_SUMMARY.EFT_OFFLINE_MASTERCARD_TOTAL, FCT_TENDER_SUMMARY.EFT_OFFLINE_VISA_TOTAL, FCT_TENDER_SUMMARY.EFT_OFFLINE_DISCOVER_TOTAL, FCT_TENDER_SUMMARY.EFT_OFFLINE_AMEX_TOTAL, FCT_TENDER_SUMMARY.EFT_OFFLINE_DEBIT_TOTAL, FCT_TENDER_SUMMARY.EFT_OFFLINE_EBT_FOODSTAMP_TOTAL, FCT_TENDER_SUMMARY.EFT_OFFLINE_CASH_BENEFIT_TOTAL, FCT_TENDER_SUMMARY.EFT_OFFLINE_CHECKS_TOTAL, FCT_TENDER_SUMMARY.EFT_OFFLINE_MGRCHECKS_TOTAL, FCT_TENDER_SUMMARY.ADV_VENDOR_TOTAL, FCT_TENDER_SUMMARY.FQ_SHOPPER_12_TOTAL, FCT_TENDER_SUMMARY.FQ_SHOPPER_98_TOTAL, FCT_TENDER_SUMMARY.SENIOR_DISCOUNT_TOTAL, FCT_TENDER_SUMMARY.BOTTLE_SLIPS_TOTAL, FCT_TENDER_SUMMARY.BAGS_TOTAL, FCT_TENDER_SUMMARY.PC_CHARGE_TOTAL, FCT_TENDER_SUMMARY.GIFT_CERTIFICATE_TOTAL, FCT_TENDER_SUMMARY.SCAN_GUAR_TOTAL, FCT_TENDER_SUMMARY.WIC_OVERAGE_TOTAL, FCT_TENDER_SUMMARY.UNKN_TENDERS_TOTAL, FCT_TENDER_SUMMARY.EXTENDED_TENDER_TOTAL, FCT_TENDER_SUMMARY.JOURNAL_FILE_NAME, FCT_TENDER_SUMMARY.CREATE_DATE, FCT_TENDER_SUMMARY.MAINT_DATE From EBIDW.POS.FCT_TENDER_SUMMARY Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER= FCT_TENDER_SUMMARY.STORE_NUMBER;
create or replace view FCT_TIME_AND_ATTENDANCE_CURRENT(
	SALES_STORE_ID,
	STORE_ID,
	DAY_KEY,
	FISCAL_DAY_ID,
	DATE_TIME,
	STORE_DAY_KEY,
	STORE_FISCAL_DAY_ID,
	STORE_DATE_TIME,
	HOURLYSALESIRECORDNUMBER,
	HOURLYSALESSIDEPT,
	RECORD_TYPE,
	OPERATING_HOURS,
	OPERATING_DOLLARS,
	BACK_PAY_HOURS,
	BACK_PAY_DOLLARS,
	TARGET_HOURS,
	TARGET_DOLLARS,
	OT_HOURS,
	OT_DOLLARS,
	OTHER_OT_HOURS,
	OTHER_OT_DOLLARS,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT
		S.SALES_STORE_ID
		, S.STORE_ID
		, S.DAY_KEY
		, S.FISCAL_DAY_ID
		, S.DATE_TIME
		, S.STORE_DAY_KEY
		, S.STORE_FISCAL_DAY_ID
		, S.STORE_DATE_TIME
		, S.HOURLYSALESIRECORDNUMBER
		, S.HOURLYSALESSIDEPT
		, S.RECORD_TYPE
		, S.OPERATING_HOURS
		, S.OPERATING_DOLLARS
		, S.BACK_PAY_HOURS
		, S.BACK_PAY_DOLLARS
		, S.TARGET_HOURS
		, S.TARGET_DOLLARS
		, S.OT_HOURS
		, S.OT_DOLLARS
		, S.OTHER_OT_HOURS
		, S.OTHER_OT_DOLLARS
		, S.ACTIVE_FLAG
		, S.EXTRACT_DATE
		, S.SOURCE_TABLE_NAME
		, S.CREATE_DATE
		, S.MAINT_DATE
		, S.CREATE_UID
		, S.MAINT_UID
		, S.DELETE_FLAG
		, S.DELETE_DATE
		, S.DELETE_UID
FROM
		EBIDW.SALES.FCT_TIME_AND_ATTENDANCE AS S
        Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.STORE_ID=S.STORE_ID;
create or replace view FCT_TP_PAYMENTS_CURRENT(
	TPMS_APPLIED_PAYMENT_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	RX_NUMBER,
	REFILL_NUMBER,
	FILL_FISCAL_DAY_ID,
	FILL_FISCAL_DATE,
	APPLIED_CASH,
	IS_REVERSAL,
	PLAN_CODE,
	PCN_NUMBER,
	BIN_NUMBER,
	TP_AUTH_NUMBER,
	PAYMENT_DATE,
	IS_TP_RECORD_PROCESSED,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as

SELECT FCT_RX_TPMS_APPLIED_PAYMENTS.TPMS_APPLIED_PAYMENT_ID
	,FCT_RX_TPMS_APPLIED_PAYMENTS.STORE_ID
	,FCT_RX_TPMS_APPLIED_PAYMENTS.SALES_STORE_ID
	,FCT_RX_TPMS_APPLIED_PAYMENTS.STORE_NUMBER
	,FCT_RX_TPMS_APPLIED_PAYMENTS.RX_NUMBER
	,FCT_RX_TPMS_APPLIED_PAYMENTS.REFILL_NUMBER
	,FCT_RX_TPMS_APPLIED_PAYMENTS.FILL_FISCAL_DAY_ID
	,FCT_RX_TPMS_APPLIED_PAYMENTS.FILL_FISCAL_DATE
	,FCT_RX_TPMS_APPLIED_PAYMENTS.APPLIED_CASH
	,FCT_RX_TPMS_APPLIED_PAYMENTS.IS_REVERSAL
	,FCT_RX_TPMS_APPLIED_PAYMENTS.PLAN_CODE
	,FCT_RX_TPMS_APPLIED_PAYMENTS.PCN_NUMBER
	,FCT_RX_TPMS_APPLIED_PAYMENTS.BIN_NUMBER
	,FCT_RX_TPMS_APPLIED_PAYMENTS.TP_AUTH_NUMBER
	,FCT_RX_TPMS_APPLIED_PAYMENTS.PAYMENT_DATE
	,FCT_RX_TPMS_APPLIED_PAYMENTS.IS_TP_RECORD_PROCESSED
	,FCT_RX_TPMS_APPLIED_PAYMENTS.EXTRACT_DATE
	,FCT_RX_TPMS_APPLIED_PAYMENTS.SOURCE_TABLE_NAME
	,FCT_RX_TPMS_APPLIED_PAYMENTS.CREATE_DATE
	,FCT_RX_TPMS_APPLIED_PAYMENTS.MAINT_DATE
	,FCT_RX_TPMS_APPLIED_PAYMENTS.CREATE_UID
	,FCT_RX_TPMS_APPLIED_PAYMENTS.MAINT_UID
	,FCT_RX_TPMS_APPLIED_PAYMENTS.DELETE_FLAG
	,FCT_RX_TPMS_APPLIED_PAYMENTS.DELETE_DATE
	,FCT_RX_TPMS_APPLIED_PAYMENTS.DELETE_UID
FROM EBIDW.RX.FCT_RX_TPMS_APPLIED_PAYMENTS FCT_RX_TPMS_APPLIED_PAYMENTS
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_RX_TPMS_APPLIED_PAYMENTS.STORE_NUMBER
WHERE ((FCT_RX_TPMS_APPLIED_PAYMENTS.DELETE_FLAG = false));
create or replace view FCT_TRANSFER_CURRENT(
	TRANSFER_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	TRANSFER_ID,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	TRANSFER_NUMBER,
	TRANSFER_TYPE,
	VOIDED_FLAG,
	TOTAL_ONLY_FLAG,
	SUPPLY_FLAG,
	USER_ID,
	FROM_DIVISION_NUMBER,
	FROM_STORE_ID,
	FROM_SALES_STORE_ID,
	FROM_STORE_NUMBER,
	FROM_SALES_DEPARTMENT_ID,
	FROM_SALES_DEPARTMENT_NUMBER,
	TO_DIVISION_NUMBER,
	TO_STORE_ID,
	TO_SALES_STORE_ID,
	TO_STORE_NUMBER,
	TO_SALES_DEPARTMENT_ID,
	TO_SALES_DEPARTMENT_NUMBER,
	NUM_LINE_ITEMS,
	TOTAL_COST,
	TOTAL_BILLING_PRICE,
	CREATED_DATE,
	CREATED_FISCAL_DAY_ID,
	FINALIZE_DATE,
	FINALIZE_FISCAL_DAY_ID,
	TRANSFER_STATUS_CODE,
	TRANSFER_EDIT_HEADER_ID,
	LOAD_TIMESTAMP,
	UPDATE_TIMESTAMP,
	LINE_NUMBER,
	EXTRACT_FILE_NAME,
	EXTRACT_FILE_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_TRANSFER.TRANSFER_HEADER_ID, FCT_TRANSFER.DIVISION_NUMBER, FCT_TRANSFER.STORE_ID, FCT_TRANSFER.SALES_STORE_ID, FCT_TRANSFER.STORE_NUMBER, FCT_TRANSFER.TRANSFER_ID, FCT_TRANSFER.BUSINESS_FISCAL_DAY_ID, FCT_TRANSFER.BUSINESS_DATE, FCT_TRANSFER.TRANSFER_NUMBER, FCT_TRANSFER.TRANSFER_TYPE, FCT_TRANSFER.VOIDED_FLAG, FCT_TRANSFER.TOTAL_ONLY_FLAG, FCT_TRANSFER.SUPPLY_FLAG, FCT_TRANSFER.USER_ID, FCT_TRANSFER.FROM_DIVISION_NUMBER, FCT_TRANSFER.FROM_STORE_ID, FCT_TRANSFER.FROM_SALES_STORE_ID, FCT_TRANSFER.FROM_STORE_NUMBER, FCT_TRANSFER.FROM_SALES_DEPARTMENT_ID, FCT_TRANSFER.FROM_SALES_DEPARTMENT_NUMBER, FCT_TRANSFER.TO_DIVISION_NUMBER, FCT_TRANSFER.TO_STORE_ID, FCT_TRANSFER.TO_SALES_STORE_ID, FCT_TRANSFER.TO_STORE_NUMBER, FCT_TRANSFER.TO_SALES_DEPARTMENT_ID, FCT_TRANSFER.TO_SALES_DEPARTMENT_NUMBER, FCT_TRANSFER.NUM_LINE_ITEMS, FCT_TRANSFER.TOTAL_COST, FCT_TRANSFER.TOTAL_BILLING_PRICE, FCT_TRANSFER.CREATED_DATE, FCT_TRANSFER.CREATED_FISCAL_DAY_ID, FCT_TRANSFER.FINALIZE_DATE, FCT_TRANSFER.FINALIZE_FISCAL_DAY_ID, FCT_TRANSFER.TRANSFER_STATUS_CODE, FCT_TRANSFER.TRANSFER_EDIT_HEADER_ID, FCT_TRANSFER.LOAD_TIMESTAMP, FCT_TRANSFER.UPDATE_TIMESTAMP, FCT_TRANSFER.LINE_NUMBER, FCT_TRANSFER.EXTRACT_FILE_NAME, FCT_TRANSFER.EXTRACT_FILE_ID, FCT_TRANSFER.EXTRACT_DATE, FCT_TRANSFER.SOURCE_TABLE_NAME, FCT_TRANSFER.CREATE_DATE, FCT_TRANSFER.MAINT_DATE, FCT_TRANSFER.CREATE_UID, FCT_TRANSFER.MAINT_UID, FCT_TRANSFER.DELETE_FLAG, FCT_TRANSFER.DELETE_DATE, FCT_TRANSFER.DELETE_UID From EBIDW.PI.FCT_TRANSFER Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_TRANSFER.STORE_NUMBER;
create or replace view FCT_TRANSFER_DETAIL_CURRENT(
	TRANSFER_DETAIL_ID,
	TRANSFER_HEADER_ID,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	TRANSFER_ID,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	SEQUENCE_NUMBER,
	PRIMARY_ITEM_ID,
	PRIMARY_MERCH_ITEM_ID,
	PRIMARY_UPC,
	ACTUAL_ITEM_ID,
	ACTUAL_MERCH_ITEM_ID,
	ACTUAL_UPC,
	UPC_TYPE,
	UPC_DESCRIPTION,
	SIZE_DESCRIPTION,
	SALES_DEPARTMENT_ID,
	SALES_DEPARTMENT_NUMBER,
	SUB_DEPARTMENT_ID,
	SUB_DEPARTMENT_NUMBER,
	PACK_QUANTITY,
	RECEIVING_SELLING_UNIT_CONVERSION,
	INVENTORY_UNITS,
	FINAL_QUANTITY,
	FINAL_QUANTITY_UNIT_OF_MEASURE,
	CASE_COST,
	BILLING_PRICE,
	BILLING_PRICE_MULTIPLIER,
	VENDOR_ID,
	AP_VENDOR_ID,
	SUPPLIER_NUMBER,
	RECLAIM_ELIGIBLE_FLAG,
	EXTENDED_QUANTITY,
	EXTENDED_SKU_QUANTITY,
	EXTENDED_UPC_QUANTITY,
	EXTENDED_COST,
	EXTENDED_INVENTORY_VALUE,
	INVENTORY_DIRECTION_MULTIPLIER,
	LOAD_TIMESTAMP,
	UPDATE_TIMESTAMP,
	PI_STATUS_CODE,
	PI_ORIGINAL_XREF,
	PI_ORIGINAL_STORE_NUMBER,
	PI_ORIGINAL_BUSINESS_DATE,
	PI_ORIGINAL_TRANSFER_ID,
	PI_ORIGINAL_SEQUENCE_NUMBER,
	PI_LAST_EDIT_ID,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	EXTRACT_FILE_NAME,
	EXTRACT_FILE_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_TRANSFER_DETAIL.TRANSFER_DETAIL_ID, FCT_TRANSFER_DETAIL.TRANSFER_HEADER_ID, FCT_TRANSFER_DETAIL.DIVISION_NUMBER, FCT_TRANSFER_DETAIL.STORE_ID, FCT_TRANSFER_DETAIL.SALES_STORE_ID, FCT_TRANSFER_DETAIL.STORE_NUMBER, FCT_TRANSFER_DETAIL.TRANSFER_ID, FCT_TRANSFER_DETAIL.BUSINESS_FISCAL_DAY_ID, FCT_TRANSFER_DETAIL.BUSINESS_DATE, FCT_TRANSFER_DETAIL.SEQUENCE_NUMBER, FCT_TRANSFER_DETAIL.PRIMARY_ITEM_ID, FCT_TRANSFER_DETAIL.PRIMARY_MERCH_ITEM_ID, FCT_TRANSFER_DETAIL.PRIMARY_UPC, FCT_TRANSFER_DETAIL.ACTUAL_ITEM_ID, FCT_TRANSFER_DETAIL.ACTUAL_MERCH_ITEM_ID, FCT_TRANSFER_DETAIL.ACTUAL_UPC, FCT_TRANSFER_DETAIL.UPC_TYPE, FCT_TRANSFER_DETAIL.UPC_DESCRIPTION, FCT_TRANSFER_DETAIL.SIZE_DESCRIPTION, FCT_TRANSFER_DETAIL.SALES_DEPARTMENT_ID, FCT_TRANSFER_DETAIL.SALES_DEPARTMENT_NUMBER, FCT_TRANSFER_DETAIL.SUB_DEPARTMENT_ID, FCT_TRANSFER_DETAIL.SUB_DEPARTMENT_NUMBER, FCT_TRANSFER_DETAIL.PACK_QUANTITY, FCT_TRANSFER_DETAIL.RECEIVING_SELLING_UNIT_CONVERSION, FCT_TRANSFER_DETAIL.INVENTORY_UNITS, FCT_TRANSFER_DETAIL.FINAL_QUANTITY, FCT_TRANSFER_DETAIL.FINAL_QUANTITY_UNIT_OF_MEASURE, FCT_TRANSFER_DETAIL.CASE_COST, FCT_TRANSFER_DETAIL.BILLING_PRICE, FCT_TRANSFER_DETAIL.BILLING_PRICE_MULTIPLIER, FCT_TRANSFER_DETAIL.VENDOR_ID, FCT_TRANSFER_DETAIL.AP_VENDOR_ID, FCT_TRANSFER_DETAIL.SUPPLIER_NUMBER, FCT_TRANSFER_DETAIL.RECLAIM_ELIGIBLE_FLAG, (FCT_TRANSFER_DETAIL.EXTENDED_QUANTITY * TO_NUMBER(FCT_TRANSFER_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_QUANTITY, (FCT_TRANSFER_DETAIL.EXTENDED_SKU_QUANTITY * TO_NUMBER(FCT_TRANSFER_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_SKU_QUANTITY, (CASE WHEN (FCT_TRANSFER_DETAIL.FINAL_QUANTITY_UNIT_OF_MEASURE = 'C'::VARCHAR) THEN (FCT_TRANSFER_DETAIL.FINAL_QUANTITY * TO_NUMBER(FCT_TRANSFER_DETAIL.PACK_QUANTITY)) ELSE FCT_TRANSFER_DETAIL.FINAL_QUANTITY END * TO_NUMBER(FCT_TRANSFER_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_UPC_QUANTITY, (FCT_TRANSFER_DETAIL.EXTENDED_COST * TO_NUMBER(FCT_TRANSFER_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_COST, (FCT_TRANSFER_DETAIL.EXTENDED_INVENTORY_VALUE * TO_NUMBER(FCT_TRANSFER_DETAIL.INVENTORY_DIRECTION_MULTIPLIER)) AS EXTENDED_INVENTORY_VALUE, FCT_TRANSFER_DETAIL.INVENTORY_DIRECTION_MULTIPLIER, FCT_TRANSFER_DETAIL.LOAD_TIMESTAMP, FCT_TRANSFER_DETAIL.UPDATE_TIMESTAMP, FCT_TRANSFER_DETAIL.PI_STATUS_CODE, FCT_TRANSFER_DETAIL.PI_ORIGINAL_XREF, CASE WHEN (CASE WHEN (FCT_TRANSFER_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_TRANSFER_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_TRANSFER_DETAIL.STORE_NUMBER ELSE TO_NUMBER("SUBSTRING"(FCT_TRANSFER_DETAIL.PI_ORIGINAL_XREF, 1, 3)) END AS PI_ORIGINAL_STORE_NUMBER, CASE WHEN (CASE WHEN (FCT_TRANSFER_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_TRANSFER_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_TRANSFER_DETAIL.BUSINESS_DATE ELSE (TO_DATE("SUBSTRING"(FCT_TRANSFER_DETAIL.PI_ORIGINAL_XREF, 5, 10), 'MM-DD-YYYY')) END AS PI_ORIGINAL_BUSINESS_DATE, CASE WHEN (CASE WHEN (FCT_TRANSFER_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_TRANSFER_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_TRANSFER_DETAIL.TRANSFER_ID ELSE TO_NUMBER("SUBSTRING"(FCT_TRANSFER_DETAIL.PI_ORIGINAL_XREF, 16, 10)) END AS PI_ORIGINAL_TRANSFER_ID, CASE WHEN (CASE WHEN (FCT_TRANSFER_DETAIL.PI_ORIGINAL_XREF IS NOT NULL) THEN FCT_TRANSFER_DETAIL.PI_ORIGINAL_XREF WHEN ('' IS NOT NULL) THEN '' ELSE NULL END = '') THEN FCT_TRANSFER_DETAIL.SEQUENCE_NUMBER ELSE TO_NUMBER("SUBSTRING"(FCT_TRANSFER_DETAIL.PI_ORIGINAL_XREF, 27, 10)) END AS PI_ORIGINAL_SEQUENCE_NUMBER, FCT_TRANSFER_DETAIL.PI_LAST_EDIT_ID, FCT_TRANSFER_DETAIL.LINE_NUMBER, FCT_TRANSFER_DETAIL.MASTER_LINE_NUMBER, FCT_TRANSFER_DETAIL.EXTRACT_FILE_NAME, FCT_TRANSFER_DETAIL.EXTRACT_FILE_ID, FCT_TRANSFER_DETAIL.EXTRACT_DATE, FCT_TRANSFER_DETAIL.SOURCE_TABLE_NAME, FCT_TRANSFER_DETAIL.CREATE_DATE, FCT_TRANSFER_DETAIL.MAINT_DATE, FCT_TRANSFER_DETAIL.CREATE_UID, FCT_TRANSFER_DETAIL.MAINT_UID, FCT_TRANSFER_DETAIL.DELETE_FLAG, FCT_TRANSFER_DETAIL.DELETE_DATE, FCT_TRANSFER_DETAIL.DELETE_UID From EBIDW.PI.FCT_TRANSFER_DETAIL Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_TRANSFER_DETAIL.STORE_NUMBER WHERE (FCT_TRANSFER_DETAIL.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_VALUE_ADJUSTMENT_CURRENT(
	VALUE_ADJUSTMENT_ID,
	STORE_ID,
	STORE_NUMBER,
	ITEM_ID,
	MERCH_ITEM_ID,
	SKU,
	EFFECTIVE_FISCAL_DAY_ID,
	EFFECTIVE_DATE,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	VALUE_ADJUSTMENT_TYPE_ID,
	VALUE_ADJUSTMENT_TYPE_CODE,
	INCEPTION_DATE,
	OLD_VALUE,
	NEW_VALUE,
	ADJUSTMENT_CRITERIA,
	POSITION_QUANTITY,
	EXPECTED_VALUE_ADJUSTMENT,
	QUANTITY_TO_ADJUST,
	NEW_QUANTITY,
	EXTENDED_OLD_VALUE,
	EXTENDED_NEW_VALUE,
	VALUE_ADJUSTMENT,
	EXTENDED_QUANTITY_TO_ADJUST,
	EXTENDED_NEW_QUANTITY,
	PI_STATUS_CODE,
	DIRECTION_MULTIPLIER,
	SUBMITTED_BY,
	SUBMITTED_DATE,
	APPROVED_BY,
	APPROVED_DATE,
	DENIED_BY,
	DENIED_DATE,
	MEMO1,
	MEMO2,
	TITLE_FIELD,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_VALUE_ADJUSTMENT.VALUE_ADJUSTMENT_ID, FCT_VALUE_ADJUSTMENT.STORE_ID, FCT_VALUE_ADJUSTMENT.STORE_NUMBER, FCT_VALUE_ADJUSTMENT.ITEM_ID, FCT_VALUE_ADJUSTMENT.MERCH_ITEM_ID, FCT_VALUE_ADJUSTMENT.SKU, FCT_VALUE_ADJUSTMENT.EFFECTIVE_FISCAL_DAY_ID, FCT_VALUE_ADJUSTMENT.EFFECTIVE_DATE, FCT_VALUE_ADJUSTMENT.EFFECTIVE_FISCAL_DAY_ID AS BUSINESS_FISCAL_DAY_ID, FCT_VALUE_ADJUSTMENT.EFFECTIVE_DATE AS BUSINESS_DATE, FCT_VALUE_ADJUSTMENT.VALUE_ADJUSTMENT_TYPE_ID, FCT_VALUE_ADJUSTMENT.VALUE_ADJUSTMENT_TYPE_CODE, FCT_VALUE_ADJUSTMENT.INCEPTION_DATE, FCT_VALUE_ADJUSTMENT.OLD_VALUE, FCT_VALUE_ADJUSTMENT.NEW_VALUE, FCT_VALUE_ADJUSTMENT.ADJUSTMENT_CRITERIA, FCT_VALUE_ADJUSTMENT.POSITION_QUANTITY, CASE WHEN (FCT_VALUE_ADJUSTMENT.VALUE_ADJUSTMENT_TYPE_ID = 7001) THEN (FCT_VALUE_ADJUSTMENT.EXPECTED_VALUE_ADJUSTMENT * TO_NUMBER(FCT_VALUE_ADJUSTMENT.DIRECTION_MULTIPLIER)) ELSE FCT_VALUE_ADJUSTMENT.EXPECTED_VALUE_ADJUSTMENT END AS EXPECTED_VALUE_ADJUSTMENT, FCT_VALUE_ADJUSTMENT.QUANTITY_TO_ADJUST, FCT_VALUE_ADJUSTMENT.NEW_QUANTITY, FCT_VALUE_ADJUSTMENT.EXTENDED_OLD_VALUE, FCT_VALUE_ADJUSTMENT.EXTENDED_NEW_VALUE, ((CASE WHEN (FCT_VALUE_ADJUSTMENT.EXTENDED_OLD_VALUE IS NOT NULL) THEN FCT_VALUE_ADJUSTMENT.EXTENDED_OLD_VALUE WHEN (0 IS NOT NULL) THEN 0 ELSE NULL END - FCT_VALUE_ADJUSTMENT.EXTENDED_NEW_VALUE) * TO_NUMBER(FCT_VALUE_ADJUSTMENT.DIRECTION_MULTIPLIER)) AS VALUE_ADJUSTMENT, FCT_VALUE_ADJUSTMENT.EXTENDED_QUANTITY_TO_ADJUST, FCT_VALUE_ADJUSTMENT.EXTENDED_NEW_QUANTITY, FCT_VALUE_ADJUSTMENT.PI_STATUS_CODE, FCT_VALUE_ADJUSTMENT.DIRECTION_MULTIPLIER, FCT_VALUE_ADJUSTMENT.SUBMITTED_BY, FCT_VALUE_ADJUSTMENT.SUBMITTED_DATE, FCT_VALUE_ADJUSTMENT.APPROVED_BY, FCT_VALUE_ADJUSTMENT.APPROVED_DATE, FCT_VALUE_ADJUSTMENT.DENIED_BY, FCT_VALUE_ADJUSTMENT.DENIED_DATE, FCT_VALUE_ADJUSTMENT.MEMO1, FCT_VALUE_ADJUSTMENT.MEMO2, FCT_VALUE_ADJUSTMENT.TITLE_FIELD, FCT_VALUE_ADJUSTMENT.ACTIVE_FLAG, FCT_VALUE_ADJUSTMENT.EXTRACT_DATE, FCT_VALUE_ADJUSTMENT.SOURCE_TABLE_NAME, FCT_VALUE_ADJUSTMENT.CREATE_DATE, FCT_VALUE_ADJUSTMENT.MAINT_DATE, FCT_VALUE_ADJUSTMENT.CREATE_UID, FCT_VALUE_ADJUSTMENT.MAINT_UID, FCT_VALUE_ADJUSTMENT.DELETE_FLAG, FCT_VALUE_ADJUSTMENT.DELETE_DATE, FCT_VALUE_ADJUSTMENT.DELETE_UID From EBIDW.PI.FCT_VALUE_ADJUSTMENT Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_VALUE_ADJUSTMENT.STORE_NUMBER;
create or replace view FCT_WAREHOUSE_SHIPMENT_CURRENT(
	WAREHOUSE_SHIPMENT_ID,
	WAREHOUSE_ID,
	WAREHOUSE_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	ITEM_ID,
	MERCH_ITEM_ID,
	UPC_NUMBER,
	ITEM_CODE,
	SHIP_QUANTITY,
	NOT_SHIP_QUANTITY,
	ERROR_CODE,
	DELIVERY_FISCAL_DAY_ID,
	DELIVERY_DATE,
	RETAIL_AMOUNT,
	COST_AMOUNT,
	INVOICE_NUMBER,
	DISTRIBUTION_CODE,
	UNIT_SHIP_CASE,
	TOTAL_CUBE,
	TOTAL_WEIGHT,
	CASE_COST,
	REQUISITION_CODE,
	PROGRAM_INDICATOR,
	STORE_PO_NUMBER,
	GENERATION_NUMBER,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID,
	EXTENDED_COST,
	EXTENDED_QUANTITY,
	RETURN_INVOICE_FLAG,
	INVENTORY_DIRECTION_MULTIPLIER
) as SELECT FCT_WAREHOUSE_SHIPMENT.WAREHOUSE_SHIPMENT_ID, FCT_WAREHOUSE_SHIPMENT.WAREHOUSE_ID, FCT_WAREHOUSE_SHIPMENT.WAREHOUSE_NUMBER, FCT_WAREHOUSE_SHIPMENT.STORE_ID, FCT_WAREHOUSE_SHIPMENT.SALES_STORE_ID, FCT_WAREHOUSE_SHIPMENT.STORE_NUMBER, FCT_WAREHOUSE_SHIPMENT.ITEM_ID, FCT_WAREHOUSE_SHIPMENT.MERCH_ITEM_ID, FCT_WAREHOUSE_SHIPMENT.UPC_NUMBER, FCT_WAREHOUSE_SHIPMENT.ITEM_CODE, FCT_WAREHOUSE_SHIPMENT.SHIP_QUANTITY, FCT_WAREHOUSE_SHIPMENT.NOT_SHIP_QUANTITY, FCT_WAREHOUSE_SHIPMENT.ERROR_CODE, FCT_WAREHOUSE_SHIPMENT.DELIVERY_FISCAL_DAY_ID, FCT_WAREHOUSE_SHIPMENT.DELIVERY_DATE, FCT_WAREHOUSE_SHIPMENT.RETAIL_AMOUNT, FCT_WAREHOUSE_SHIPMENT.COST_AMOUNT, FCT_WAREHOUSE_SHIPMENT.INVOICE_NUMBER, FCT_WAREHOUSE_SHIPMENT.DISTRIBUTION_CODE, FCT_WAREHOUSE_SHIPMENT.UNIT_SHIP_CASE, FCT_WAREHOUSE_SHIPMENT.TOTAL_CUBE, FCT_WAREHOUSE_SHIPMENT.TOTAL_WEIGHT, FCT_WAREHOUSE_SHIPMENT.CASE_COST, FCT_WAREHOUSE_SHIPMENT.REQUISITION_CODE, FCT_WAREHOUSE_SHIPMENT.PROGRAM_INDICATOR, FCT_WAREHOUSE_SHIPMENT.STORE_PO_NUMBER, FCT_WAREHOUSE_SHIPMENT.GENERATION_NUMBER, FCT_WAREHOUSE_SHIPMENT.EXTRACT_DATE, FCT_WAREHOUSE_SHIPMENT.SOURCE_TABLE_NAME, FCT_WAREHOUSE_SHIPMENT.CREATE_DATE, FCT_WAREHOUSE_SHIPMENT.MAINT_DATE, FCT_WAREHOUSE_SHIPMENT.CREATE_UID, FCT_WAREHOUSE_SHIPMENT.MAINT_UID, FCT_WAREHOUSE_SHIPMENT.DELETE_FLAG, FCT_WAREHOUSE_SHIPMENT.DELETE_DATE, FCT_WAREHOUSE_SHIPMENT.DELETE_UID, (TO_NUMBER(FCT_WAREHOUSE_SHIPMENT.SHIP_QUANTITY) * FCT_WAREHOUSE_SHIPMENT.COST_AMOUNT) AS EXTENDED_COST, (FCT_WAREHOUSE_SHIPMENT.SHIP_QUANTITY * FCT_WAREHOUSE_SHIPMENT.UNIT_SHIP_CASE) AS EXTENDED_QUANTITY, 'f'::BOOLEAN AS RETURN_INVOICE_FLAG, 1 AS INVENTORY_DIRECTION_MULTIPLIER From EBIDW.MERCH.FCT_WAREHOUSE_SHIPMENT Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER= FCT_WAREHOUSE_SHIPMENT.STORE_NUMBER;
create or replace view FCT_WEEK_16_SUMMARY_CURRENT(
	WEEK_16_SUMMARY_ID,
	INVENTORY_COUNT_SCHEDULE_ID,
	FISCAL_YEAR_ID,
	FISCAL_YEAR,
	CYCLE_NUMBER,
	SCHEDULE_LABEL,
	SCHEDULE_DESC,
	START_FISCAL_DAY_ID,
	START_DATE,
	END_FISCAL_DAY_ID,
	END_DATE,
	REGION_NUMBER,
	REGION_LABEL,
	ZONE_NUMBER,
	ZONE_LABEL,
	SALES_STORE_ID,
	STORE_ID,
	STORE_NUMBER,
	MERCH_ITEM_ID,
	ITEM_ID,
	UPC_NUMBER,
	SKU_NUMBER,
	ITEM_LABEL,
	ITEM_SIZE,
	SALES_DEPARTMENT_ID,
	SALES_DEPARTMENT_NUMBER,
	SALES_DEPARTMENT_LABEL,
	CATEGORY_ID,
	CATEGORY_NUMBER,
	CATEGORY_LABEL,
	COMMODITY_ID,
	COMMODITY_NUMBER,
	COMMODITY_LABEL,
	QUANTITY,
	EXTENDED_VALUE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	CREATE_UID,
	MAINT_DATE,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_WEEK_16_SUMMARY.WEEK_16_SUMMARY_ID, FCT_WEEK_16_SUMMARY.INVENTORY_COUNT_SCHEDULE_ID, FCT_WEEK_16_SUMMARY.FISCAL_YEAR_ID, FCT_WEEK_16_SUMMARY.FISCAL_YEAR, FCT_WEEK_16_SUMMARY.CYCLE_NUMBER, FCT_WEEK_16_SUMMARY.SCHEDULE_LABEL, FCT_WEEK_16_SUMMARY.SCHEDULE_DESC, FCT_WEEK_16_SUMMARY.START_FISCAL_DAY_ID, FCT_WEEK_16_SUMMARY.START_DATE, FCT_WEEK_16_SUMMARY.END_FISCAL_DAY_ID, FCT_WEEK_16_SUMMARY.END_DATE, FCT_WEEK_16_SUMMARY.REGION_NUMBER, FCT_WEEK_16_SUMMARY.REGION_LABEL, FCT_WEEK_16_SUMMARY.ZONE_NUMBER, FCT_WEEK_16_SUMMARY.ZONE_LABEL, FCT_WEEK_16_SUMMARY.SALES_STORE_ID, FCT_WEEK_16_SUMMARY.STORE_ID, FCT_WEEK_16_SUMMARY.STORE_NUMBER, FCT_WEEK_16_SUMMARY.MERCH_ITEM_ID, FCT_WEEK_16_SUMMARY.ITEM_ID, FCT_WEEK_16_SUMMARY.UPC_NUMBER, FCT_WEEK_16_SUMMARY.SKU_NUMBER, FCT_WEEK_16_SUMMARY.ITEM_LABEL, FCT_WEEK_16_SUMMARY.ITEM_SIZE, FCT_WEEK_16_SUMMARY.SALES_DEPARTMENT_ID, FCT_WEEK_16_SUMMARY.SALES_DEPARTMENT_NUMBER, FCT_WEEK_16_SUMMARY.SALES_DEPARTMENT_LABEL, FCT_WEEK_16_SUMMARY.CATEGORY_ID, FCT_WEEK_16_SUMMARY.CATEGORY_NUMBER, FCT_WEEK_16_SUMMARY.CATEGORY_LABEL, FCT_WEEK_16_SUMMARY.COMMODITY_ID, FCT_WEEK_16_SUMMARY.COMMODITY_NUMBER, FCT_WEEK_16_SUMMARY.COMMODITY_LABEL, FCT_WEEK_16_SUMMARY.QUANTITY, FCT_WEEK_16_SUMMARY.EXTENDED_VALUE, FCT_WEEK_16_SUMMARY.ACTIVE_FLAG, FCT_WEEK_16_SUMMARY.EXTRACT_DATE, FCT_WEEK_16_SUMMARY.SOURCE_TABLE_NAME, FCT_WEEK_16_SUMMARY.CREATE_DATE, FCT_WEEK_16_SUMMARY.CREATE_UID, FCT_WEEK_16_SUMMARY.MAINT_DATE, FCT_WEEK_16_SUMMARY.MAINT_UID, FCT_WEEK_16_SUMMARY.DELETE_FLAG, FCT_WEEK_16_SUMMARY.DELETE_DATE, FCT_WEEK_16_SUMMARY.DELETE_UID From EBIDW.PI.FCT_WEEK_16_SUMMARY Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_WEEK_16_SUMMARY.STORE_NUMBER;
create or replace view FCT_WORLDPAY_TRANSACTION_CURRENT(
	WORLDPAY_TRANSACTION_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	MERCHANT_ID,
	MERCHANT_NUMBER,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	MESSAGE_ID,
	WP_TERM_SEQ_NUMBER,
	TRANSACTION_FISCAL_DAY_ID,
	TRANSACTION_DATE,
	TRANSACTION_TIME,
	MERCHANT_SETTLE_FISCAL_DAY_ID,
	MERCHANT_SETTLE_DATE,
	PROCESS_LOCATION,
	COMM_FLAG,
	DEVICE_ID,
	MERCHANT_CATEGORY_CODE,
	CAT_INDICATOR,
	CARD_TYPE,
	TRAN_CODE,
	ACCOUNT_NUMBER,
	CAPTURE_TYPE,
	AMOUNT_AUTHORIZED,
	AMOUNT_SETTLED,
	CASH_BACK_AMOUNT,
	WORLDPAY_AUTH_CODE,
	NETWORK_AUTH_CODE,
	CREDIT_AUTH_NUMBER,
	AVS_RESPONSE,
	CVV2_RESPONSE,
	REFERENCE_NUMBER,
	VISA_VLIDATION_CODE,
	VISA_AUTH_INDICATOR,
	VISA_RESULT_CODE,
	VISA_RESPONSE_SOURCE,
	COMMERCIAL_CARD_INDICATOR,
	INVOICE_NUMBER,
	PO_NUMBER,
	INTERCHANGE_INDICATOR,
	DB_SURCHARGE_AMOUNT,
	DEBIT_REGULATED_FLAG,
	WP_TERMINAL_ID,
	BATCH_NUMBER,
	LINE_NUMBER,
	MASTER_LINE_NUMBER,
	FILE_NAME,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_WORLDPAY_TRANSACTION.WORLDPAY_TRANSACTION_ID, FCT_WORLDPAY_TRANSACTION.STORE_ID, FCT_WORLDPAY_TRANSACTION.SALES_STORE_ID, FCT_WORLDPAY_TRANSACTION.STORE_NUMBER, FCT_WORLDPAY_TRANSACTION.MERCHANT_ID, FCT_WORLDPAY_TRANSACTION.MERCHANT_NUMBER, FCT_WORLDPAY_TRANSACTION.BUSINESS_FISCAL_DAY_ID, FCT_WORLDPAY_TRANSACTION.BUSINESS_DATE, FCT_WORLDPAY_TRANSACTION.MESSAGE_ID, FCT_WORLDPAY_TRANSACTION.WP_TERM_SEQ_NUMBER, FCT_WORLDPAY_TRANSACTION.TRANSACTION_FISCAL_DAY_ID, FCT_WORLDPAY_TRANSACTION.TRANSACTION_DATE, FCT_WORLDPAY_TRANSACTION.TRANSACTION_TIME, FCT_WORLDPAY_TRANSACTION.MERCHANT_SETTLE_FISCAL_DAY_ID, FCT_WORLDPAY_TRANSACTION.MERCHANT_SETTLE_DATE, FCT_WORLDPAY_TRANSACTION.PROCESS_LOCATION, FCT_WORLDPAY_TRANSACTION.COMM_FLAG, FCT_WORLDPAY_TRANSACTION.DEVICE_ID, FCT_WORLDPAY_TRANSACTION.MERCHANT_CATEGORY_CODE, FCT_WORLDPAY_TRANSACTION.CAT_INDICATOR, FCT_WORLDPAY_TRANSACTION.CARD_TYPE, FCT_WORLDPAY_TRANSACTION.TRAN_CODE, FCT_WORLDPAY_TRANSACTION.ACCOUNT_NUMBER, FCT_WORLDPAY_TRANSACTION.CAPTURE_TYPE, FCT_WORLDPAY_TRANSACTION.AMOUNT_AUTHORIZED, FCT_WORLDPAY_TRANSACTION.AMOUNT_SETTLED, FCT_WORLDPAY_TRANSACTION.CASH_BACK_AMOUNT, FCT_WORLDPAY_TRANSACTION.WORLDPAY_AUTH_CODE, FCT_WORLDPAY_TRANSACTION.NETWORK_AUTH_CODE, FCT_WORLDPAY_TRANSACTION.CREDIT_AUTH_NUMBER, FCT_WORLDPAY_TRANSACTION.AVS_RESPONSE, FCT_WORLDPAY_TRANSACTION.CVV2_RESPONSE, FCT_WORLDPAY_TRANSACTION.REFERENCE_NUMBER, FCT_WORLDPAY_TRANSACTION.VISA_VLIDATION_CODE, FCT_WORLDPAY_TRANSACTION.VISA_AUTH_INDICATOR, FCT_WORLDPAY_TRANSACTION.VISA_RESULT_CODE, FCT_WORLDPAY_TRANSACTION.VISA_RESPONSE_SOURCE, FCT_WORLDPAY_TRANSACTION.COMMERCIAL_CARD_INDICATOR, FCT_WORLDPAY_TRANSACTION.INVOICE_NUMBER, FCT_WORLDPAY_TRANSACTION.PO_NUMBER, FCT_WORLDPAY_TRANSACTION.INTERCHANGE_INDICATOR, FCT_WORLDPAY_TRANSACTION.DB_SURCHARGE_AMOUNT, FCT_WORLDPAY_TRANSACTION.DEBIT_REGULATED_FLAG, FCT_WORLDPAY_TRANSACTION.WP_TERMINAL_ID, FCT_WORLDPAY_TRANSACTION.BATCH_NUMBER, FCT_WORLDPAY_TRANSACTION.LINE_NUMBER, FCT_WORLDPAY_TRANSACTION.MASTER_LINE_NUMBER, FCT_WORLDPAY_TRANSACTION.FILE_NAME, FCT_WORLDPAY_TRANSACTION.ACTIVE_FLAG, FCT_WORLDPAY_TRANSACTION.EXTRACT_DATE, FCT_WORLDPAY_TRANSACTION.SOURCE_TABLE_NAME, FCT_WORLDPAY_TRANSACTION.CREATE_DATE, FCT_WORLDPAY_TRANSACTION.MAINT_DATE, FCT_WORLDPAY_TRANSACTION.CREATE_UID, FCT_WORLDPAY_TRANSACTION.MAINT_UID, FCT_WORLDPAY_TRANSACTION.DELETE_FLAG, FCT_WORLDPAY_TRANSACTION.DELETE_DATE, FCT_WORLDPAY_TRANSACTION.DELETE_UID From EBIDW.TREASURY.FCT_WORLDPAY_TRANSACTION Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_WORLDPAY_TRANSACTION.STORE_NUMBER WHERE (FCT_WORLDPAY_TRANSACTION.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_ZAVER_RAW(
	COUPON_ID,
	OFFER_ID,
	FISCAL_DAY_ID,
	STORE_ID,
	STORE_NUMBER,
	SALES_STORE_ID,
	REDEMPTION_DATE,
	RETAILER_ID,
	RETAILER_NAME,
	REDEMPTION_VALUE,
	SOURCETABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT FCT_ZAVER_REDEMPTION.COUPON_ID, FCT_ZAVER_REDEMPTION.OFFER_ID, FCT_ZAVER_REDEMPTION.FISCAL_DAY_ID, FCT_ZAVER_REDEMPTION.STORE_ID, FCT_ZAVER_REDEMPTION.STORE_NUMBER, FCT_ZAVER_REDEMPTION.SALES_STORE_ID, DATEADD('h', 1, FCT_ZAVER_REDEMPTION.REDEMPTION_DATE) AS REDEMPTION_DATE, FCT_ZAVER_REDEMPTION.RETAILER_ID, FCT_ZAVER_REDEMPTION.RETAILER_NAME, FCT_ZAVER_REDEMPTION.REDEMPTION_VALUE, FCT_ZAVER_REDEMPTION.SOURCETABLE_NAME, FCT_ZAVER_REDEMPTION.CREATE_DATE, FCT_ZAVER_REDEMPTION.MAINT_DATE, FCT_ZAVER_REDEMPTION.CREATE_UID, FCT_ZAVER_REDEMPTION.MAINT_UID, FCT_ZAVER_REDEMPTION.DELETE_FLAG, FCT_ZAVER_REDEMPTION.DELETE_DATE, FCT_ZAVER_REDEMPTION.DELETE_UID From EBIDW.POS.FCT_ZAVER_REDEMPTION Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=FCT_ZAVER_REDEMPTION.STORE_NUMBER WHERE (FCT_ZAVER_REDEMPTION.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view FCT_ZAVER_REDEMPTION_CURRENT(
	BUSINESS_FISCAL_DAY_ID,
	COUPON_ID,
	OFFER_ID,
	FISCAL_DAY_ID,
	STORE_ID,
	STORE_NUMBER,
	SALES_STORE_ID,
	REDEMPTION_DATE,
	RETAILER_ID,
	RETAILER_NAME,
	REDEMPTION_VALUE,
	SOURCETABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT C.FISCAL_DAY_ID AS BUSINESS_FISCAL_DAY_ID, P.COUPON_ID, P.OFFER_ID, P.FISCAL_DAY_ID,
P.STORE_ID, P.STORE_NUMBER, P.SALES_STORE_ID, P.REDEMPTION_DATE, P.RETAILER_ID, P.RETAILER_NAME, 
P.REDEMPTION_VALUE, P.SOURCETABLE_NAME, P.CREATE_DATE, P.MAINT_DATE, P.CREATE_UID, P.MAINT_UID, 
P.DELETE_FLAG, P.DELETE_DATE, P.DELETE_UID From EBIDW.POS.FCT_ZAVER_REDEMPTION P, EBIDW.COMMON.DIM_CALENDAR_MASTER C, (SELECT FCT_ORDER_HEADER.STORE_NUMBER, FCT_ORDER_HEADER.BUSINESS_FISCAL_DAY_ID, MIN(FCT_ORDER_HEADER.TRANSACTION_TIME) AS MIN_TIME, MAX(FCT_ORDER_HEADER.TRANSACTION_TIME) AS MAX_TIME 
From EBIDW.POS.FCT_ORDER_HEADER
GROUP BY FCT_ORDER_HEADER.STORE_NUMBER, FCT_ORDER_HEADER.BUSINESS_FISCAL_DAY_ID 
ORDER BY FCT_ORDER_HEADER.BUSINESS_FISCAL_DAY_ID, FCT_ORDER_HEADER.STORE_NUMBER ) STORE_DATE 
, REPORTING.DIM_STORE_STACK_CURRENT SS
WHERE ((((STORE_DATE.STORE_NUMBER = P.STORE_NUMBER) and  SS.SALES_STORE_NUMBER=P.STORE_NUMBER AND ((DATEADD('h', 1, P.REDEMPTION_DATE) >= STORE_DATE.MIN_TIME) AND (DATEADD('h', 1, P.REDEMPTION_DATE) <= STORE_DATE.MAX_TIME))) 
AND (C.FISCAL_DAY_ID = STORE_DATE.BUSINESS_FISCAL_DAY_ID)) AND (P.DELETE_FLAG = 'f'::BOOLEAN)) ;
create or replace view LKP_BOTTLE_CASHIER_CURRENT(
	CASHIER_ID,
	CASHIER_NUMBER,
	STORE_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	LAST_NAME,
	FIRST_NAME,
	MANAGER_ACCESS_FLAG,
	CASHIER_LOGIN,
	MANAGER_LOGIN,
	ACCESS_LEVEL,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	CREATE_UID,
	MAINT_DATE,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_BOTTLE_CASHIER.CASHIER_ID, LKP_BOTTLE_CASHIER.CASHIER_NUMBER, LKP_BOTTLE_CASHIER.STORE_NUMBER, LKP_BOTTLE_CASHIER.STORE_ID, LKP_BOTTLE_CASHIER.SALES_STORE_ID, LKP_BOTTLE_CASHIER.LAST_NAME, LKP_BOTTLE_CASHIER.FIRST_NAME, LKP_BOTTLE_CASHIER.MANAGER_ACCESS_FLAG, LKP_BOTTLE_CASHIER.CASHIER_LOGIN, LKP_BOTTLE_CASHIER.MANAGER_LOGIN, LKP_BOTTLE_CASHIER.ACCESS_LEVEL, LKP_BOTTLE_CASHIER.ACTIVE_FLAG, LKP_BOTTLE_CASHIER.EXTRACT_DATE, LKP_BOTTLE_CASHIER.SOURCE_TABLE_NAME, LKP_BOTTLE_CASHIER.CREATE_DATE, LKP_BOTTLE_CASHIER.CREATE_UID, LKP_BOTTLE_CASHIER.MAINT_DATE, LKP_BOTTLE_CASHIER.MAINT_UID, LKP_BOTTLE_CASHIER.DELETE_FLAG, LKP_BOTTLE_CASHIER.DELETE_DATE, LKP_BOTTLE_CASHIER.DELETE_UID From EBIDW.BOTTLEREDEMPTION.LKP_BOTTLE_CASHIER Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_BOTTLE_CASHIER.STORE_NUMBER WHERE (LKP_BOTTLE_CASHIER.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_CGO_EXTRACT_FILE_CURRENT(
	EXTRACT_TYPE,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	EXT_FILE_NAME,
	EXTRACT_FILE_NAME,
	EXTRACT_FILE_ID,
	FILE_HASH,
	LOAD_FISCAL_DAY_ID,
	LOAD_TIMESTAMP,
	RAW_INPUT_ROWS,
	FCT_INPUT_ROWS,
	FCT_INSERT_ROWS,
	FCT_UPDATE_ROWS,
	FCT_DETAIL_INPUT_ROWS,
	FCT_DETAIL_INSERT_ROWS,
	FCT_DETAIL_UPDATE_ROWS,
	LINES_WRITTEN_BY_CGO
) as SELECT LKP_CGO_EXTRACT_FILE.EXTRACT_TYPE, LKP_CGO_EXTRACT_FILE.STORE_ID, LKP_CGO_EXTRACT_FILE.SALES_STORE_ID, LKP_CGO_EXTRACT_FILE.STORE_NUMBER, LKP_CGO_EXTRACT_FILE.EXT_FILE_NAME, LKP_CGO_EXTRACT_FILE.EXTRACT_FILE_NAME, LKP_CGO_EXTRACT_FILE.EXTRACT_FILE_ID, LKP_CGO_EXTRACT_FILE.FILE_HASH, LKP_CGO_EXTRACT_FILE.LOAD_FISCAL_DAY_ID, LKP_CGO_EXTRACT_FILE.LOAD_TIMESTAMP, LKP_CGO_EXTRACT_FILE.RAW_INPUT_ROWS, LKP_CGO_EXTRACT_FILE.FCT_INPUT_ROWS, LKP_CGO_EXTRACT_FILE.FCT_INSERT_ROWS, LKP_CGO_EXTRACT_FILE.FCT_UPDATE_ROWS, LKP_CGO_EXTRACT_FILE.FCT_DETAIL_INPUT_ROWS, LKP_CGO_EXTRACT_FILE.FCT_DETAIL_INSERT_ROWS, LKP_CGO_EXTRACT_FILE.FCT_DETAIL_UPDATE_ROWS, LKP_CGO_EXTRACT_FILE.LINES_WRITTEN_BY_CGO From EBIDW.PI.LKP_CGO_EXTRACT_FILE Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_CGO_EXTRACT_FILE.STORE_NUMBER;
create or replace view LKP_CGO_STORE_DATE_COUNTS_CURRENT(
	EXTRACT_TYPE,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	BUSINESS_DATE,
	BUSINESS_FISCAL_DAY_ID,
	TOTAL_LINES_FROM_FILES,
	TOTAL_LINES_PARSED,
	TOTAL_RAW_COUNT,
	TOTAL_FCT_COUNT,
	RAW_HEADER_COUNT,
	FCT_HEADER_COUNT,
	RAW_DETAIL_COUNT,
	FCT_DETAIL_COUNT,
	MISSING_STORE_DAY_FLAG,
	FILE_AND_PARSED_COUNTS_DIFFER_FLAG,
	RAW_AND_FCT_COUNTS_DIFFER_FLAG,
	CURRENT_ERROR_STATUS,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID
) as SELECT LKP_CGO_STORE_DATE_COUNTS.EXTRACT_TYPE, LKP_CGO_STORE_DATE_COUNTS.STORE_ID, LKP_CGO_STORE_DATE_COUNTS.SALES_STORE_ID, LKP_CGO_STORE_DATE_COUNTS.STORE_NUMBER, LKP_CGO_STORE_DATE_COUNTS.BUSINESS_DATE, LKP_CGO_STORE_DATE_COUNTS.BUSINESS_FISCAL_DAY_ID, LKP_CGO_STORE_DATE_COUNTS.TOTAL_LINES_FROM_FILES, LKP_CGO_STORE_DATE_COUNTS.TOTAL_LINES_PARSED, LKP_CGO_STORE_DATE_COUNTS.TOTAL_RAW_COUNT, LKP_CGO_STORE_DATE_COUNTS.TOTAL_FCT_COUNT, LKP_CGO_STORE_DATE_COUNTS.RAW_HEADER_COUNT, LKP_CGO_STORE_DATE_COUNTS.FCT_HEADER_COUNT, LKP_CGO_STORE_DATE_COUNTS.RAW_DETAIL_COUNT, LKP_CGO_STORE_DATE_COUNTS.FCT_DETAIL_COUNT, LKP_CGO_STORE_DATE_COUNTS.MISSING_STORE_DAY_FLAG, CASE WHEN (LKP_CGO_STORE_DATE_COUNTS.TOTAL_LINES_FROM_FILES <> LKP_CGO_STORE_DATE_COUNTS.TOTAL_LINES_PARSED) THEN 't'::BOOLEAN ELSE 'f'::BOOLEAN END AS FILE_AND_PARSED_COUNTS_DIFFER_FLAG, CASE WHEN (((LKP_CGO_STORE_DATE_COUNTS.TOTAL_RAW_COUNT <> LKP_CGO_STORE_DATE_COUNTS.TOTAL_FCT_COUNT) OR (LKP_CGO_STORE_DATE_COUNTS.RAW_HEADER_COUNT <> LKP_CGO_STORE_DATE_COUNTS.RAW_HEADER_COUNT)) OR (LKP_CGO_STORE_DATE_COUNTS.FCT_DETAIL_COUNT <> LKP_CGO_STORE_DATE_COUNTS.FCT_DETAIL_COUNT)) THEN 't'::BOOLEAN ELSE 'f'::BOOLEAN END AS RAW_AND_FCT_COUNTS_DIFFER_FLAG, CASE WHEN ((((LKP_CGO_STORE_DATE_COUNTS.MISSING_STORE_DAY_FLAG = 't'::BOOLEAN) AND ((((((LKP_CGO_STORE_DATE_COUNTS.TOTAL_RAW_COUNT IS NULL) OR (LKP_CGO_STORE_DATE_COUNTS.TOTAL_FCT_COUNT IS NULL)) OR (LKP_CGO_STORE_DATE_COUNTS.RAW_HEADER_COUNT IS NULL)) OR (LKP_CGO_STORE_DATE_COUNTS.FCT_HEADER_COUNT IS NULL)) OR (LKP_CGO_STORE_DATE_COUNTS.RAW_DETAIL_COUNT IS NULL)) OR (LKP_CGO_STORE_DATE_COUNTS.FCT_DETAIL_COUNT IS NULL))) OR (CASE WHEN (LKP_CGO_STORE_DATE_COUNTS.TOTAL_LINES_FROM_FILES <> LKP_CGO_STORE_DATE_COUNTS.TOTAL_LINES_PARSED) THEN 't'::BOOLEAN ELSE 'f'::BOOLEAN END = 't'::BOOLEAN)) OR (CASE WHEN (((LKP_CGO_STORE_DATE_COUNTS.TOTAL_RAW_COUNT <> LKP_CGO_STORE_DATE_COUNTS.TOTAL_FCT_COUNT) OR (LKP_CGO_STORE_DATE_COUNTS.RAW_HEADER_COUNT <> LKP_CGO_STORE_DATE_COUNTS.RAW_HEADER_COUNT)) OR (LKP_CGO_STORE_DATE_COUNTS.FCT_DETAIL_COUNT <> LKP_CGO_STORE_DATE_COUNTS.FCT_DETAIL_COUNT)) THEN 't'::BOOLEAN ELSE 'f'::BOOLEAN END = 't'::BOOLEAN)) THEN 't'::BOOLEAN ELSE 'f'::BOOLEAN END AS CURRENT_ERROR_STATUS, LKP_CGO_STORE_DATE_COUNTS.CREATE_DATE, LKP_CGO_STORE_DATE_COUNTS.MAINT_DATE, LKP_CGO_STORE_DATE_COUNTS.CREATE_UID, LKP_CGO_STORE_DATE_COUNTS.MAINT_UID From EBIDW.PI.LKP_CGO_STORE_DATE_COUNTS Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_CGO_STORE_DATE_COUNTS.STORE_NUMBER;
create or replace view LKP_GEOGRAPHY(
	CHAIN_ID,
	CHAIN_CODE,
	CHAIN_LABEL,
	CHAIN_DESC,
	CHAIN_ACTIVE,
	STATE_ID,
	STATE_CODE,
	STATE_LABEL,
	STATE_DESC,
	STATE_ACTIVE,
	CORPORATION_ID,
	CORPORATION_CODE,
	CORPORATION_LABEL,
	CORPORATION_DESC,
	CORPORATION_ACTIVE,
	ZONE_ID,
	STORE_ID,
	STORE_CD,
	STORE_LABEL,
	STORE_DESC,
	STORE_ORDER,
	STORE_ACTIVE,
	TERMINAL_ID,
	TERMINAL_CODE,
	TERMINAL_LABEL,
	TERMINAL_DESC,
	TERMINAL_ACTIVE,
	STORE_NAME
) as SELECT DISTINCT LKP_CHAIN.CHAIN_ID, LKP_CHAIN.CHAIN_CODE, LKP_CHAIN.CHAIN_LABEL, LKP_CHAIN.CHAIN_DESC, LKP_CHAIN.ACTIVE_FLAG AS CHAIN_ACTIVE, LKP_STATE.STATE_ID, LKP_STATE.STATE_CODE, LKP_STATE.STATE_LABEL, LKP_STATE.STATE_DESC, LKP_STATE.ACTIVE_FLAG AS STATE_ACTIVE, LKP_CORPORATION.CORPORATION_ID, LKP_CORPORATION.CORPORATION_NUMBER AS CORPORATION_CODE, LKP_CORPORATION.CORPORATION_LABEL, LKP_CORPORATION.CORPORATION_DESC, LKP_CORPORATION.ACTIVE_FLAG AS CORPORATION_ACTIVE, LKP_STORE.ZONE_ID, LKP_STORE.STORE_ID, LKP_STORE.STORE_NUMBER AS STORE_CD, LKP_STORE.STORE_LABEL, LKP_STORE.STORE_DESC, LKP_STORE.STORE_ORDER, LKP_STORE.ACTIVE_FLAG AS STORE_ACTIVE, LKP_POB_TERMINAL.TERMINAL_ID, LKP_POB_TERMINAL.TERMINAL_NUMBER AS TERMINAL_CODE, LKP_POB_TERMINAL.TERMINAL_LABEL, LKP_POB_TERMINAL.TERMINAL_DESC, LKP_POB_TERMINAL.ACTIVE_FLAG AS TERMINAL_ACTIVE, ((((LKP_STORE.STORE_ID))::VARCHAR(3) || ' ') || LKP_STORE.STORE_LABEL) AS STORE_NAME From EBIDW.COMMON.LKP_CHAIN LKP_CHAIN, EBIDW.COMMON.LKP_STATE LKP_STATE, EBIDW.COMMON.LKP_CORPORATION LKP_CORPORATION, EBIDW.POB.LKP_STORE LKP_STORE Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER= LKP_STORE.STORE_NUMBER LEFT Join EBIDW.POB.LKP_POB_TERMINAL LKP_POB_TERMINAL ON ((LKP_STORE.STORE_ID = LKP_POB_TERMINAL.STORE_ID)) WHERE ((((LKP_CHAIN.CHAIN_ID = LKP_STATE.CHAIN_ID) AND (LKP_CORPORATION.STATE_ID = LKP_STATE.STATE_ID)) AND (LKP_CORPORATION.CORPORATION_NUMBER = LKP_STORE.CORPORATION_ID)));
create or replace view LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE_CURRENT(
	STORE_ID,
	FISCAL_WEEK_ID,
	CATEGORY_NUMBER,
	CATEGORY_ID,
	SALES_DEPARTMENT_NUMBER,
	SALES_DEPARTMENT_ID,
	COMMODITY_NUMBER,
	COMMODITY_ID,
	STORES_COUNTED,
	STORES_WITH
) as SELECT LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE.STORE_ID, LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE.FISCAL_WEEK_ID, LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE.CATEGORY_NUMBER, LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE.CATEGORY_ID, LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE.SALES_DEPARTMENT_NUMBER, LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE.SALES_DEPARTMENT_ID, LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE.COMMODITY_NUMBER, LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE.COMMODITY_ID, LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE.STORES_COUNTED, LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE.STORES_WITH From EBIDW.PI.LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.STORE_ID=LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE.STORE_ID WHERE (LKP_INVENTORY_CATEGORY_COUNT_SCHEDULE.CURRENT_FLAG = 't'::BOOLEAN);
create or replace view LKP_MT_AGENT_CURRENT(
	AGENT_ID,
	AGENT_CODE,
	STORE_ID,
	AGENT_LABEL,
	AGENT_DESC,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_AGENT.AGENT_ID, LKP_AGENT.AGENT_CODE, LKP_AGENT.STORE_ID, LKP_AGENT.AGENT_LABEL, LKP_AGENT.AGENT_DESC, LKP_AGENT.ACTIVE_FLAG, LKP_AGENT.EXTRACT_DATE, LKP_AGENT.SOURCE_TABLE_NAME, LKP_AGENT.CREATE_DATE, LKP_AGENT.MAINT_DATE, LKP_AGENT.CREATE_UID, LKP_AGENT.MAINT_UID, LKP_AGENT.DELETE_FLAG, LKP_AGENT.DELETE_DATE, LKP_AGENT.DELETE_UID From EBIDW.MT.LKP_AGENT Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.STORE_ID=LKP_AGENT.STORE_ID;
create or replace view LKP_OPERATING_COMPANY_CURRENT(
	OPERATING_COMPANY_ID,
	OPERATING_COMPANY_CODE,
	OPERATING_COMPANY_LABEL,
	OPERATING_COMPANY_DESC
) as 
  select OPERATING_COMPANY_ID, 
        OPERATING_COMPANY_CODE, 
        OPERATING_COMPANY_LABEL, 
        OPERATING_COMPANY_DESC 
FROM COMMON.LKP_OPERATING_COMPANY 
where OPERATING_COMPANY_ID in 
  (select OPERATING_COMPANY_ID 
  FROM COMMON.SEC_OPERATING_COMPANY 
  where DB_USER_ID = current_user and ACTIVE_FLAG);
create or replace view LKP_POB_TERMINAL_CURRENT(
	STORE_ID,
	TERMINAL_ID,
	TERMINAL_NUMBER,
	TERMINAL_LABEL,
	TERMINAL_DESC,
	TERMINAL_ORDER,
	DATA_SOURCE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_POB_TERMINAL.STORE_ID, LKP_POB_TERMINAL.TERMINAL_ID, LKP_POB_TERMINAL.TERMINAL_NUMBER, LKP_POB_TERMINAL.TERMINAL_LABEL, LKP_POB_TERMINAL.TERMINAL_DESC, LKP_POB_TERMINAL.TERMINAL_ORDER, LKP_POB_TERMINAL.DATA_SOURCE, LKP_POB_TERMINAL.ACTIVE_FLAG, LKP_POB_TERMINAL.EXTRACT_DATE, LKP_POB_TERMINAL.SOURCE_TABLE_NAME, LKP_POB_TERMINAL.CREATE_DATE, LKP_POB_TERMINAL.MAINT_DATE, LKP_POB_TERMINAL.CREATE_UID, LKP_POB_TERMINAL.MAINT_UID, LKP_POB_TERMINAL.DELETE_FLAG, LKP_POB_TERMINAL.DELETE_DATE, LKP_POB_TERMINAL.DELETE_UID From EBIDW.POB.LKP_POB_TERMINAL Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.STORE_ID=LKP_POB_TERMINAL.STORE_ID;
create or replace view LKP_POS_COUPON_CURRENT(
	POS_COUPON_ID,
	COUPON_ID,
	COUPON_CODE,
	REGION_CODE,
	COUPON_START_DATE,
	COUPON_END_DATE,
	COUPON_START_VALUE,
	PURCHASE_AMOUNT,
	SCAN_DESCRIPTION,
	INVENTORY_DEPARTMENT_ID,
	INVENTORY_DEPARTMENT_NUMBER,
	SALES_DEPARTMENT_ID,
	SALES_DEPARTMENT_NUMBER,
	VENDOR_NAME,
	VENDOR_CONTRACT,
	COUPON_TYPE_CODE,
	SUPPLIER_G,
	SUPPLIER_M,
	EACH_OR_WEIGHT_CODE,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	COUPON_VALUE,
	GEN_NO,
	ITEM_ID,
	MERCH_ITEM_ID,
	UPC_NUMBER,
	PRODUCT_DESCRIPTION,
	HANDLING_CHARGE,
	VENDOR_ID,
	AP_VENDOR_ID,
	VENDOR_NUMBER,
	FOOD_STAMP_ELIGIBLE_CODE,
	STATE_TAX_INDICATOR,
	CA1A9_INDEX,
	ADVANTEDGE_TYPE_CODE,
	MAX_PER_ORDER,
	ELIG_CODE,
	MINIMUM_DOLLAR_THRESHOLD,
	TAX_INDICATOR,
	ONE_CENT_INDICATOR,
	ONE_HALF_INDICATOR,
	BOGO_FREE_INDICATOR,
	MINIMUM_DOLLAR_INDICATOR,
	DOLLAR_VERIFY_INDICATOR,
	UP_CONTROL,
	UP_SIZE,
	ADVANTEDGE_PRGI_FW,
	ADVANTEDGE_PRGI_CW,
	RETAIL_2_FOR,
	CLOTHING_INDICATOR,
	EXPORT_DATE,
	VARIABLE_VALUE_INDICATOR,
	MEAL_TAX_INDICATOR,
	TYPE_OF_OFFER,
	OFFER_SOURCE,
	PAPER_OR_ADVANTEDGE,
	CURRENT_FLAG,
	EFFECTIVE_START_DATE,
	EFFECTIVE_END_DATE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_POS_COUPON.POS_COUPON_ID, LKP_POS_COUPON.COUPON_ID, LKP_POS_COUPON.COUPON_CODE, LKP_POS_COUPON.REGION_CODE, LKP_POS_COUPON.COUPON_START_DATE, LKP_POS_COUPON.COUPON_END_DATE, LKP_POS_COUPON.COUPON_START_VALUE, LKP_POS_COUPON.PURCHASE_AMOUNT, LKP_POS_COUPON.SCAN_DESCRIPTION, LKP_POS_COUPON.INVENTORY_DEPARTMENT_ID, LKP_POS_COUPON.INVENTORY_DEPARTMENT_NUMBER, LKP_POS_COUPON.SALES_DEPARTMENT_ID, LKP_POS_COUPON.SALES_DEPARTMENT_NUMBER, LKP_POS_COUPON.VENDOR_NAME, LKP_POS_COUPON.VENDOR_CONTRACT, LKP_POS_COUPON.COUPON_TYPE_CODE, LKP_POS_COUPON.SUPPLIER_G, LKP_POS_COUPON.SUPPLIER_M, LKP_POS_COUPON.EACH_OR_WEIGHT_CODE, LKP_POS_COUPON.STORE_ID, LKP_POS_COUPON.SALES_STORE_ID, LKP_POS_COUPON.STORE_NUMBER, LKP_POS_COUPON.COUPON_VALUE, LKP_POS_COUPON.GEN_NO, LKP_POS_COUPON.ITEM_ID, LKP_POS_COUPON.MERCH_ITEM_ID, LKP_POS_COUPON.UPC_NUMBER, LKP_POS_COUPON.PRODUCT_DESCRIPTION, LKP_POS_COUPON.HANDLING_CHARGE, LKP_POS_COUPON.VENDOR_ID, LKP_POS_COUPON.AP_VENDOR_ID, LKP_POS_COUPON.VENDOR_NUMBER, LKP_POS_COUPON.FOOD_STAMP_ELIGIBLE_CODE, LKP_POS_COUPON.STATE_TAX_INDICATOR, LKP_POS_COUPON.CA1A9_INDEX, LKP_POS_COUPON.ADVANTEDGE_TYPE_CODE, LKP_POS_COUPON.MAX_PER_ORDER, LKP_POS_COUPON.ELIG_CODE, LKP_POS_COUPON.MINIMUM_DOLLAR_THRESHOLD, LKP_POS_COUPON.TAX_INDICATOR, LKP_POS_COUPON.ONE_CENT_INDICATOR, LKP_POS_COUPON.ONE_HALF_INDICATOR, LKP_POS_COUPON.BOGO_FREE_INDICATOR, LKP_POS_COUPON.MINIMUM_DOLLAR_INDICATOR, LKP_POS_COUPON.DOLLAR_VERIFY_INDICATOR, LKP_POS_COUPON.UP_CONTROL, LKP_POS_COUPON.UP_SIZE, LKP_POS_COUPON.ADVANTEDGE_PRGI_FW, LKP_POS_COUPON.ADVANTEDGE_PRGI_CW, LKP_POS_COUPON.RETAIL_2_FOR, LKP_POS_COUPON.CLOTHING_INDICATOR, LKP_POS_COUPON.EXPORT_DATE, LKP_POS_COUPON.VARIABLE_VALUE_INDICATOR, LKP_POS_COUPON.MEAL_TAX_INDICATOR, LKP_POS_COUPON.TYPE_OF_OFFER, LKP_POS_COUPON.OFFER_SOURCE, LKP_POS_COUPON.PAPER_OR_ADVANTEDGE, LKP_POS_COUPON.CURRENT_FLAG, LKP_POS_COUPON.EFFECTIVE_START_DATE, LKP_POS_COUPON.EFFECTIVE_END_DATE, LKP_POS_COUPON.ACTIVE_FLAG, LKP_POS_COUPON.EXTRACT_DATE, LKP_POS_COUPON.SOURCE_TABLE_NAME, LKP_POS_COUPON.CREATE_DATE, LKP_POS_COUPON.MAINT_DATE, LKP_POS_COUPON.CREATE_UID, LKP_POS_COUPON.MAINT_UID, LKP_POS_COUPON.DELETE_FLAG, LKP_POS_COUPON.DELETE_DATE, LKP_POS_COUPON.DELETE_UID From EBIDW.POS.LKP_POS_COUPON Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_POS_COUPON.STORE_NUMBER WHERE (LKP_POS_COUPON.CURRENT_FLAG = 't'::BOOLEAN);
create or replace view LKP_POS_FUEL_CURRENT(
	POS_FUEL_ID,
	FUEL_ID,
	FUEL_CODE,
	REGION_CODE,
	FUEL_START_DATE,
	FUEL_END_DATE,
	FUEL_START_VALUE,
	PURCHASE_AMOUNT,
	SCAN_DESCRIPTION,
	INVENTORY_DEPARTMENT_ID,
	INVENTORY_DEPARTMENT_NUMBER,
	SALES_DEPARTMENT_ID,
	SALES_DEPARTMENT_NUMBER,
	VENDOR_NAME,
	VENDOR_CONTRACT,
	FUEL_TYPE_CODE,
	SUPPLIER_G,
	SUPPLIER_M,
	EACH_OR_WEIGHT_CODE,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	FUEL_VALUE,
	GEN_NO,
	ITEM_ID,
	MERCH_ITEM_ID,
	UPC_NUMBER,
	PRODUCT_DESCRIPTION,
	HANDLING_CHARGE,
	VENDOR_ID,
	AP_VENDOR_ID,
	VENDOR_NUMBER,
	FOOD_STAMP_ELIGIBLE_CODE,
	STATE_TAX_INDICATOR,
	CA1A9_INDEX,
	ADVANTEDGE_TYPE_CODE,
	MAX_PER_ORDER,
	ELIG_CODE,
	MINIMUM_DOLLAR_THRESHOLD,
	TAX_INDICATOR,
	ONE_CENT_INDICATOR,
	ONE_HALF_INDICATOR,
	BOGO_FREE_INDICATOR,
	MINIMUM_DOLLAR_INDICATOR,
	DOLLAR_VERIFY_INDICATOR,
	UP_CONTROL,
	UP_SIZE,
	ADVANTEDGE_PRGI_FW,
	ADVANTEDGE_PRGI_CW,
	RETAIL_2_FOR,
	CLOTHING_INDICATOR,
	EXPORT_DATE,
	VARIABLE_VALUE_INDICATOR,
	MEAL_TAX_INDICATOR,
	TYPE_OF_OFFER,
	OFFER_SOURCE,
	PAPER_OR_ADVANTEDGE,
	CURRENT_FLAG,
	EFFECTIVE_START_DATE,
	EFFECTIVE_END_DATE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_POS_FUEL.POS_FUEL_ID, LKP_POS_FUEL.FUEL_ID, LKP_POS_FUEL.FUEL_CODE, LKP_POS_FUEL.REGION_CODE, LKP_POS_FUEL.FUEL_START_DATE, LKP_POS_FUEL.FUEL_END_DATE, LKP_POS_FUEL.FUEL_START_VALUE, LKP_POS_FUEL.PURCHASE_AMOUNT, LKP_POS_FUEL.SCAN_DESCRIPTION, LKP_POS_FUEL.INVENTORY_DEPARTMENT_ID, LKP_POS_FUEL.INVENTORY_DEPARTMENT_NUMBER, LKP_POS_FUEL.SALES_DEPARTMENT_ID, LKP_POS_FUEL.SALES_DEPARTMENT_NUMBER, LKP_POS_FUEL.VENDOR_NAME, LKP_POS_FUEL.VENDOR_CONTRACT, LKP_POS_FUEL.FUEL_TYPE_CODE, LKP_POS_FUEL.SUPPLIER_G, LKP_POS_FUEL.SUPPLIER_M, LKP_POS_FUEL.EACH_OR_WEIGHT_CODE, LKP_POS_FUEL.STORE_ID, LKP_POS_FUEL.SALES_STORE_ID, LKP_POS_FUEL.STORE_NUMBER, LKP_POS_FUEL.FUEL_VALUE, LKP_POS_FUEL.GEN_NO, LKP_POS_FUEL.ITEM_ID, LKP_POS_FUEL.MERCH_ITEM_ID, LKP_POS_FUEL.UPC_NUMBER, LKP_POS_FUEL.PRODUCT_DESCRIPTION, LKP_POS_FUEL.HANDLING_CHARGE, LKP_POS_FUEL.VENDOR_ID, LKP_POS_FUEL.AP_VENDOR_ID, LKP_POS_FUEL.VENDOR_NUMBER, LKP_POS_FUEL.FOOD_STAMP_ELIGIBLE_CODE, LKP_POS_FUEL.STATE_TAX_INDICATOR, LKP_POS_FUEL.CA1A9_INDEX, LKP_POS_FUEL.ADVANTEDGE_TYPE_CODE, LKP_POS_FUEL.MAX_PER_ORDER, LKP_POS_FUEL.ELIG_CODE, LKP_POS_FUEL.MINIMUM_DOLLAR_THRESHOLD, LKP_POS_FUEL.TAX_INDICATOR, LKP_POS_FUEL.ONE_CENT_INDICATOR, LKP_POS_FUEL.ONE_HALF_INDICATOR, LKP_POS_FUEL.BOGO_FREE_INDICATOR, LKP_POS_FUEL.MINIMUM_DOLLAR_INDICATOR, LKP_POS_FUEL.DOLLAR_VERIFY_INDICATOR, LKP_POS_FUEL.UP_CONTROL, LKP_POS_FUEL.UP_SIZE, LKP_POS_FUEL.ADVANTEDGE_PRGI_FW, LKP_POS_FUEL.ADVANTEDGE_PRGI_CW, LKP_POS_FUEL.RETAIL_2_FOR, LKP_POS_FUEL.CLOTHING_INDICATOR, LKP_POS_FUEL.EXPORT_DATE, LKP_POS_FUEL.VARIABLE_VALUE_INDICATOR, LKP_POS_FUEL.MEAL_TAX_INDICATOR, LKP_POS_FUEL.TYPE_OF_OFFER, LKP_POS_FUEL.OFFER_SOURCE, LKP_POS_FUEL.PAPER_OR_ADVANTEDGE, LKP_POS_FUEL.CURRENT_FLAG, LKP_POS_FUEL.EFFECTIVE_START_DATE, LKP_POS_FUEL.EFFECTIVE_END_DATE, LKP_POS_FUEL.ACTIVE_FLAG, LKP_POS_FUEL.EXTRACT_DATE, LKP_POS_FUEL.SOURCE_TABLE_NAME, LKP_POS_FUEL.CREATE_DATE, LKP_POS_FUEL.MAINT_DATE, LKP_POS_FUEL.CREATE_UID, LKP_POS_FUEL.MAINT_UID, LKP_POS_FUEL.DELETE_FLAG, LKP_POS_FUEL.DELETE_DATE, LKP_POS_FUEL.DELETE_UID From EBIDW.POS.LKP_POS_FUEL Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_POS_FUEL.STORE_NUMBER WHERE (LKP_POS_FUEL.CURRENT_FLAG = 't'::BOOLEAN);
create or replace view LKP_POS_FUEL_DETAIL_DEFINITION_CURRENT(
	FUEL_CODE,
	FUEL_NUMBER,
	FUEL_START_DATE,
	FUEL_END_DATE,
	STORE_ID,
	STORE_NUMBER,
	SALES_DEPARTMENT_ID,
	SALES_DEPARTMENT_NUMBER,
	VENDOR_ID,
	AP_VENDOR_ID,
	VENDOR_NUMBER,
	REGION_CODE,
	FUEL_START_VALUE,
	PURCHASE_AMOUNT,
	SCAN_DESCRIPTION,
	MAX_PER_ORDER,
	SUPPLIER_G,
	SUPPLIER_M,
	GOLUB_EXPENSE_PER_GALLON
) as

SELECT LKP_POS_FUEL.FUEL_CODE, to_number(LKP_POS_FUEL.FUEL_CODE) AS FUEL_NUMBER, LKP_POS_FUEL.FUEL_START_DATE, LKP_POS_FUEL.FUEL_END_DATE, LKP_POS_FUEL.STORE_ID, LKP_POS_FUEL.STORE_NUMBER, LKP_POS_FUEL.SALES_DEPARTMENT_ID, LKP_POS_FUEL.SALES_DEPARTMENT_NUMBER, LKP_POS_FUEL.VENDOR_ID, LKP_POS_FUEL.AP_VENDOR_ID, LKP_POS_FUEL.VENDOR_NUMBER, MAX(LKP_POS_FUEL.REGION_CODE) AS REGION_CODE, MAX(LKP_POS_FUEL.FUEL_START_VALUE) AS FUEL_START_VALUE, MAX(LKP_POS_FUEL.PURCHASE_AMOUNT) AS PURCHASE_AMOUNT, MAX(LKP_POS_FUEL.SCAN_DESCRIPTION) AS SCAN_DESCRIPTION, MAX(LKP_POS_FUEL.MAX_PER_ORDER) AS MAX_PER_ORDER, MAX(LKP_POS_FUEL.SUPPLIER_G) AS SUPPLIER_G, MAX(LKP_POS_FUEL.SUPPLIER_M) AS SUPPLIER_M, (MAX(LKP_POS_FUEL.FUEL_START_VALUE) - MAX(LKP_POS_FUEL.SUPPLIER_M)) AS GOLUB_EXPENSE_PER_GALLON
FROM EBIDW.POS.LKP_POS_FUEL
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_POS_FUEL.STORE_NUMBER
WHERE (LKP_POS_FUEL.CURRENT_FLAG = true)
GROUP BY LKP_POS_FUEL.FUEL_CODE, LKP_POS_FUEL.FUEL_START_DATE, LKP_POS_FUEL.FUEL_END_DATE, LKP_POS_FUEL.STORE_ID, LKP_POS_FUEL.STORE_NUMBER, LKP_POS_FUEL.SALES_DEPARTMENT_ID, LKP_POS_FUEL.SALES_DEPARTMENT_NUMBER, LKP_POS_FUEL.VENDOR_ID, LKP_POS_FUEL.AP_VENDOR_ID, LKP_POS_FUEL.VENDOR_NUMBER;
create or replace view LKP_POS_FUEL_DETAIL_DEFINTION_CURRENT(
	FUEL_CODE,
	FUEL_NUMBER,
	FUEL_START_DATE,
	FUEL_END_DATE,
	STORE_ID,
	STORE_NUMBER,
	SALES_DEPARTMENT_ID,
	SALES_DEPARTMENT_NUMBER,
	VENDOR_ID,
	AP_VENDOR_ID,
	VENDOR_NUMBER,
	REGION_CODE,
	FUEL_START_VALUE,
	PURCHASE_AMOUNT,
	SCAN_DESCRIPTION,
	MAX_PER_ORDER,
	SUPPLIER_G,
	SUPPLIER_M,
	GOLUB_EXPENSE_PER_GALLON
) as
(
SELECT * FROM EBIDW_SBUX.REPORTING.LKP_POS_FUEL_DETAIL_DEFINTION_CURRENT
 WHERE  STORE_ID IN 
 (
 SELECT SALES_STORE_NUMBER FROM REPORTING.DIM_STORE_STACK_CURRENT
 )
);
create or replace view LKP_PRODUCT_AUTH_CURRENT(
	PRODUCT_AUTH_ID,
	ITEM_ID,
	UPC_NUMBER,
	ITEM_CODE,
	VENDOR_ID,
	VENDOR_NUMBER,
	STORE_ID,
	STORE_NUMBER,
	PRODUCT_AUTH_DATE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_PRODUCT_AUTH.PRODUCT_AUTH_ID, LKP_PRODUCT_AUTH.ITEM_ID, LKP_PRODUCT_AUTH.UPC_NUMBER, LKP_PRODUCT_AUTH.ITEM_CODE, LKP_PRODUCT_AUTH.VENDOR_ID, LKP_PRODUCT_AUTH.VENDOR_NUMBER, LKP_PRODUCT_AUTH.STORE_ID, LKP_PRODUCT_AUTH.STORE_NUMBER, LKP_PRODUCT_AUTH.PRODUCT_AUTH_DATE, LKP_PRODUCT_AUTH.ACTIVE_FLAG, LKP_PRODUCT_AUTH.EXTRACT_DATE, LKP_PRODUCT_AUTH.SOURCE_TABLE_NAME, LKP_PRODUCT_AUTH.CREATE_DATE, LKP_PRODUCT_AUTH.MAINT_DATE, LKP_PRODUCT_AUTH.CREATE_UID, LKP_PRODUCT_AUTH.MAINT_UID, LKP_PRODUCT_AUTH.DELETE_FLAG, LKP_PRODUCT_AUTH.DELETE_DATE, LKP_PRODUCT_AUTH.DELETE_UID From EBIDW.MERCH.LKP_PRODUCT_AUTH Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_PRODUCT_AUTH.STORE_NUMBER WHERE ((LKP_PRODUCT_AUTH.DELETE_FLAG = 'f'::BOOLEAN));
create or replace view LKP_PROMOTION_ITEM_PRICE_CURRENT(
	PROMOTION_ITEM_PRICE_ID,
	PROMOTION_ID,
	PROMOTION_ITEM_ID,
	PROMOTION_NUMBER,
	ITEM_ID,
	UPC_NUMBER,
	ITEM_CODE,
	PRICE_ZONE,
	REGULAR_SPLIT,
	REGULAR_PRICE_AMOUNT,
	COST_AMOUNT,
	AUDIT_FISCAL_DAY_ID,
	AUDIT_DATE,
	PROMO_SALE_TYPE_ID,
	PROMO_SALE_TYPE_DESC,
	RETAIL_EVENT_TYPE_ID,
	RETAIL_EVENT_TYPE_NUMBER,
	PROMO_EVENT_TYPE_DESC,
	PROMO_OFFER_TYPE_ID,
	PROMO_OFFER_TYPE_DESC,
	SALE_SPLIT,
	SALE_PRICE_AMOUNT,
	QUANTITY_LIMIT,
	PURCHASE_REQUIREMENT,
	PROMO_LOGO_ID,
	STORE_ID,
	STORE_NUMBER,
	PROMO_USER_ID,
	PROMO_USER_NAME,
	CHAIN_REC_FLAG,
	MVALUE,
	OFF_INVOICE,
	BILL_BACK,
	PROMO_FAMILY_GROUP_ID,
	PROMO_FAMILY_GROUP_LABEL,
	PROMO_FAMILY_GROUP_DESC,
	ITEM_STAT,
	TOUCHED_FLAG,
	RECONCILED_FLAG,
	BUY,
	GET,
	PERCENT_OFF,
	PERCENT_OR_CENTS_OFF,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_PROMOTION_ITEM_PRICE.PROMOTION_ITEM_PRICE_ID, LKP_PROMOTION_ITEM_PRICE.PROMOTION_ID, LKP_PROMOTION_ITEM_PRICE.PROMOTION_ITEM_ID, LKP_PROMOTION_ITEM_PRICE.PROMOTION_NUMBER, LKP_PROMOTION_ITEM_PRICE.ITEM_ID, LKP_PROMOTION_ITEM_PRICE.UPC_NUMBER, LKP_PROMOTION_ITEM_PRICE.ITEM_CODE, LKP_PROMOTION_ITEM_PRICE.PRICE_ZONE, LKP_PROMOTION_ITEM_PRICE.REGULAR_SPLIT, LKP_PROMOTION_ITEM_PRICE.REGULAR_PRICE_AMOUNT, LKP_PROMOTION_ITEM_PRICE.COST_AMOUNT, LKP_PROMOTION_ITEM_PRICE.AUDIT_FISCAL_DAY_ID, LKP_PROMOTION_ITEM_PRICE.AUDIT_DATE, LKP_PROMOTION_ITEM_PRICE.PROMO_SALE_TYPE_ID, LKP_PROMOTION_ITEM_PRICE.PROMO_SALE_TYPE_DESC, LKP_PROMOTION_ITEM_PRICE.RETAIL_EVENT_TYPE_ID, LKP_PROMOTION_ITEM_PRICE.RETAIL_EVENT_TYPE_NUMBER, LKP_PROMOTION_ITEM_PRICE.PROMO_EVENT_TYPE_DESC, LKP_PROMOTION_ITEM_PRICE.PROMO_OFFER_TYPE_ID, LKP_PROMOTION_ITEM_PRICE.PROMO_OFFER_TYPE_DESC, LKP_PROMOTION_ITEM_PRICE.SALE_SPLIT, LKP_PROMOTION_ITEM_PRICE.SALE_PRICE_AMOUNT, LKP_PROMOTION_ITEM_PRICE.QUANTITY_LIMIT, LKP_PROMOTION_ITEM_PRICE.PURCHASE_REQUIREMENT, LKP_PROMOTION_ITEM_PRICE.PROMO_LOGO_ID, LKP_PROMOTION_ITEM_PRICE.STORE_ID, LKP_PROMOTION_ITEM_PRICE.STORE_NUMBER, LKP_PROMOTION_ITEM_PRICE.PROMO_USER_ID, LKP_PROMOTION_ITEM_PRICE.PROMO_USER_NAME, LKP_PROMOTION_ITEM_PRICE.CHAIN_REC_FLAG, LKP_PROMOTION_ITEM_PRICE.MVALUE, LKP_PROMOTION_ITEM_PRICE.OFF_INVOICE, LKP_PROMOTION_ITEM_PRICE.BILL_BACK, LKP_PROMOTION_ITEM_PRICE.PROMO_FAMILY_GROUP_ID, LKP_PROMOTION_ITEM_PRICE.PROMO_FAMILY_GROUP_LABEL, LKP_PROMOTION_ITEM_PRICE.PROMO_FAMILY_GROUP_DESC, LKP_PROMOTION_ITEM_PRICE.ITEM_STAT, LKP_PROMOTION_ITEM_PRICE.TOUCHED_FLAG, LKP_PROMOTION_ITEM_PRICE.RECONCILED_FLAG, LKP_PROMOTION_ITEM_PRICE.BUY, LKP_PROMOTION_ITEM_PRICE.GET, LKP_PROMOTION_ITEM_PRICE.PERCENT_OFF, LKP_PROMOTION_ITEM_PRICE.PERCENT_OR_CENTS_OFF, LKP_PROMOTION_ITEM_PRICE.EXTRACT_DATE, LKP_PROMOTION_ITEM_PRICE.SOURCE_TABLE_NAME, LKP_PROMOTION_ITEM_PRICE.CREATE_DATE, LKP_PROMOTION_ITEM_PRICE.MAINT_DATE, LKP_PROMOTION_ITEM_PRICE.CREATE_UID, LKP_PROMOTION_ITEM_PRICE.MAINT_UID, LKP_PROMOTION_ITEM_PRICE.DELETE_FLAG, LKP_PROMOTION_ITEM_PRICE.DELETE_DATE, LKP_PROMOTION_ITEM_PRICE.DELETE_UID From EBIDW.MERCH.LKP_PROMOTION_ITEM_PRICE Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_PROMOTION_ITEM_PRICE.STORE_NUMBER;
create or replace view LKP_RX_BILLING_STATUS_CURRENT(
	BILLING_STATUS_ID,
	BILLING_STATUS_KEY,
	BILLING_STATUS,
	BILLING_STATUS_DESCRIPTION,
	ERX_CLIENT_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_BILLING_STATUS.BILLING_STATUS_ID, LKP_RX_BILLING_STATUS.BILLING_STATUS_KEY, LKP_RX_BILLING_STATUS.BILLING_STATUS, LKP_RX_BILLING_STATUS.BILLING_STATUS_DESCRIPTION, LKP_RX_BILLING_STATUS.ERX_CLIENT_ID, LKP_RX_BILLING_STATUS.EXTRACT_DATE, LKP_RX_BILLING_STATUS.SOURCE_TABLE_NAME, LKP_RX_BILLING_STATUS.CREATE_DATE, LKP_RX_BILLING_STATUS.MAINT_DATE, LKP_RX_BILLING_STATUS.CREATE_UID, LKP_RX_BILLING_STATUS.MAINT_UID, LKP_RX_BILLING_STATUS.DELETE_FLAG, LKP_RX_BILLING_STATUS.DELETE_DATE, LKP_RX_BILLING_STATUS.DELETE_UID From EBIDW.RX.LKP_RX_BILLING_STATUS
WHERE (LKP_RX_BILLING_STATUS.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_RX_CANCELED_REASON_CURRENT(
	CANCELED_REASON_ID,
	CANCELED_REASON_CODE,
	CANCELED_REASON_DESCRIPTION,
	ACTIVE_FLAG,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as (
SELECT * FROM EBIDW_SBUX.REPORTING.LKP_RX_CANCELED_REASON_CURRENT
 WHERE CANCELED_REASON_ID IN 
 (
 SELECT SALES_STORE_NUMBER FROM REPORTING.DIM_STORE_STACK_CURRENT
 )  
 );
create or replace view LKP_RX_DAW_CODE_CURRENT(
	DAW_CODE_ID,
	DAW_CODE_KEY,
	DAW_CODE,
	DAW_CODE_DESCRIPTION,
	ERX_CLIENT_ID,
	H_LEVEL,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_DAW_CODE.DAW_CODE_ID, LKP_RX_DAW_CODE.DAW_CODE_KEY, LKP_RX_DAW_CODE.DAW_CODE, LKP_RX_DAW_CODE.DAW_CODE_DESCRIPTION, LKP_RX_DAW_CODE.ERX_CLIENT_ID, LKP_RX_DAW_CODE.H_LEVEL, LKP_RX_DAW_CODE.EXTRACT_DATE, LKP_RX_DAW_CODE.SOURCE_TABLE_NAME, LKP_RX_DAW_CODE.CREATE_DATE, LKP_RX_DAW_CODE.MAINT_DATE, LKP_RX_DAW_CODE.CREATE_UID, LKP_RX_DAW_CODE.MAINT_UID, LKP_RX_DAW_CODE.DELETE_FLAG, LKP_RX_DAW_CODE.DELETE_DATE, LKP_RX_DAW_CODE.DELETE_UID From EBIDW.RX.LKP_RX_DAW_CODE WHERE (LKP_RX_DAW_CODE.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_RX_DRUG_VERSIONED(
	RX_DRUG_ID,
	DRUG_ID,
	DRUG_KEY,
	DRUG_NUMBER,
	RX_ITEM_CATALOG_ID,
	NDC_NUMBER,
	DRUG_LABEL,
	DEA_CLASS,
	TRANSACTION_FEE_TYPE_ID,
	PACKAGE_DESCRIPTION,
	DRUG_STRENGTH,
	DRUG_STRENGTH_UNITS,
	INNER_PACKAGE,
	OUTER_PACKAGE,
	CASE_SIZE,
	PACKAGE_SIZE,
	PACKAGE_SIZE_UNITS,
	PACKAGE_QUANTITY,
	PACK_SIZE_EQUIV,
	IS_MAINTENANCE_DRUG,
	IS_UNIT_DOSE,
	DRUG_FORM_CODE,
	DOSAGE_FORM,
	DRUG_CLASS,
	GENERIC_INDICATOR,
	GENERIC_PRODUCT_IDENTIFIER,
	GENERIC_MANUFACTURER_INDICATOR,
	GENERIC_NAMED_DRUG_INDICATOR,
	GENERIC_PRICE_SPREAD_INDICATOR,
	GENERIC_THERAPEUTIC_DRUG_INDICATOR,
	GENERIC_NAME,
	AHFS_NUMBER,
	AHFS_DESCRIPTION,
	GCN_NUMBER,
	GCN_SEQUENCE_NUMBER,
	GC3_CODE,
	GC3_DESCRIPTION,
	GCDF_CODE,
	DRUG_LABELER,
	ORANGE_BOOK_CODE,
	LAST_PROVIDER_UPDATE,
	CURRENT_FLAG,
	EFFECTIVE_START_DATE,
	EFFECTIVE_END_DATE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_DRUG.RX_DRUG_ID, LKP_RX_DRUG.DRUG_ID, LKP_RX_DRUG.DRUG_KEY, LKP_RX_DRUG.DRUG_NUMBER, LKP_RX_DRUG.RX_ITEM_CATALOG_ID, LKP_RX_DRUG.NDC_NUMBER, LKP_RX_DRUG.DRUG_LABEL, LKP_RX_DRUG.DEA_CLASS, LKP_RX_DRUG.TRANSACTION_FEE_TYPE_ID, LKP_RX_DRUG.PACKAGE_DESCRIPTION, LKP_RX_DRUG.DRUG_STRENGTH, LKP_RX_DRUG.DRUG_STRENGTH_UNITS, LKP_RX_DRUG.INNER_PACKAGE, LKP_RX_DRUG.OUTER_PACKAGE, LKP_RX_DRUG.CASE_SIZE, LKP_RX_DRUG.PACKAGE_SIZE, LKP_RX_DRUG.PACKAGE_SIZE_UNITS, LKP_RX_DRUG.PACKAGE_QUANTITY, LKP_RX_DRUG.PACK_SIZE_EQUIV, LKP_RX_DRUG.IS_MAINTENANCE_DRUG, LKP_RX_DRUG.IS_UNIT_DOSE, LKP_RX_DRUG.DRUG_FORM_CODE, LKP_RX_DRUG.DOSAGE_FORM, LKP_RX_DRUG.DRUG_CLASS, LKP_RX_DRUG.GENERIC_INDICATOR, LKP_RX_DRUG.GENERIC_PRODUCT_IDENTIFIER, LKP_RX_DRUG.GENERIC_MANUFACTURER_INDICATOR, LKP_RX_DRUG.GENERIC_NAMED_DRUG_INDICATOR, LKP_RX_DRUG.GENERIC_PRICE_SPREAD_INDICATOR, LKP_RX_DRUG.GENERIC_THERAPEUTIC_DRUG_INDICATOR, LKP_RX_DRUG.GENERIC_NAME, LKP_RX_DRUG.AHFS_NUMBER, LKP_RX_DRUG.AHFS_DESCRIPTION, LKP_RX_DRUG.GCN_NUMBER, LKP_RX_DRUG.GCN_SEQUENCE_NUMBER, LKP_RX_DRUG.GC3_CODE, LKP_RX_DRUG.GC3_DESCRIPTION, LKP_RX_DRUG.GCDF_CODE, LKP_RX_DRUG.DRUG_LABELER, LKP_RX_DRUG.ORANGE_BOOK_CODE, LKP_RX_DRUG.LAST_PROVIDER_UPDATE, LKP_RX_DRUG.CURRENT_FLAG, LKP_RX_DRUG.EFFECTIVE_START_DATE, LKP_RX_DRUG.EFFECTIVE_END_DATE, LKP_RX_DRUG.ACTIVE_FLAG, LKP_RX_DRUG.EXTRACT_DATE, LKP_RX_DRUG.SOURCE_TABLE_NAME, LKP_RX_DRUG.CREATE_DATE, LKP_RX_DRUG.MAINT_DATE, LKP_RX_DRUG.CREATE_UID, LKP_RX_DRUG.MAINT_UID, LKP_RX_DRUG.DELETE_FLAG, LKP_RX_DRUG.DELETE_DATE, LKP_RX_DRUG.DELETE_UID From EBIDW.RX.LKP_RX_DRUG  WHERE (LKP_RX_DRUG.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_RX_FACILITY_CURRENT(
	FACILITY_ID,
	FACILITY_KEY,
	FACILITY_NUMBER,
	FACILITY_TYPE,
	SALES_STORE_ID,
	STORE_ID,
	STORE_NUMBER,
	LEGAL_NAME,
	PRIMARY_CONTACT,
	ALTERNATE_CONTACT,
	IS_ACTIVE,
	PIC_NAME,
	PIC_LICENSE,
	PIC_INITIALS,
	RP_NAME,
	RP_LICENSE,
	RP_INITIALS,
	DEA_NUMBER,
	NCPDP_PROVIDER_ID,
	REMOTE_PROC_FLAG,
	INTERVIEW_MOD_FLAG,
	ROOT_LOCATION_GROUP_NUM,
	WF_PROCESS_DEFINITION_NUM,
	ACTIVE_DATE,
	OPEN_DATE,
	CLOSE_DATE,
	STORE_LOCK_BOX_NUM,
	SNR_CTZN_EFFECTIVE_DATE,
	SNR_CTZN_AGE_LIMIT,
	TIMEZONE_ID,
	USER_DEFINED_INFO_1,
	USER_DEFINED_INFO_2,
	USER_DEFINED_INFO_3,
	USER_DEFINED_INFO_4,
	USER_DEFINED_INFO_5,
	IS_IVR_ENABLED,
	ARCHIVE_LEVEL,
	SYS_USER,
	DATESTAMP,
	NUM_UPDATES,
	IS_PPI_ENABLED,
	PARENT_KEY,
	PARENT_LEVEL,
	LEVEL1_ID,
	LEVEL1_DESC,
	LEVEL2_ID,
	LEVEL2_DESC,
	LEVEL3_ID,
	LEVEL3_DESC,
	LEVEL4_ID,
	LEVEL4_DESC,
	LEVEL5_ID,
	LEVEL5_DESC,
	LEVEL6_ID,
	LEVEL6_DESC,
	LEVEL7_ID,
	LEVEL7_DESC,
	LEVEL8_ID,
	LEVEL8_DESC,
	ADDRESS1,
	ADDRESS2,
	CITY,
	ZIP_CODE,
	STATE_CODE,
	PHONE1,
	PHONE2,
	CF_PROCESSING_TIME,
	OWNING_FACILITY_ID,
	ERX_CLIENT_ID,
	FACILITY_STATUS_NUM,
	H_LEVEL,
	FACILITY_NAME,
	COUNTRY_CODE,
	FAX_NUMBER,
	GEOGRAPHIC_CODE1,
	GEOGRAPHIC_CODE2,
	PARENT_LEGAL_NAME,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_FACILITY.FACILITY_ID, LKP_RX_FACILITY.FACILITY_KEY, LKP_RX_FACILITY.FACILITY_NUMBER, LKP_RX_FACILITY.FACILITY_TYPE, LKP_RX_FACILITY.SALES_STORE_ID, LKP_RX_FACILITY.STORE_ID, LKP_RX_FACILITY.STORE_NUMBER, LKP_RX_FACILITY.LEGAL_NAME, LKP_RX_FACILITY.PRIMARY_CONTACT, LKP_RX_FACILITY.ALTERNATE_CONTACT, LKP_RX_FACILITY.IS_ACTIVE, LKP_RX_FACILITY.PIC_NAME, LKP_RX_FACILITY.PIC_LICENSE, LKP_RX_FACILITY.PIC_INITIALS, LKP_RX_FACILITY.RP_NAME, LKP_RX_FACILITY.RP_LICENSE, LKP_RX_FACILITY.RP_INITIALS, LKP_RX_FACILITY.DEA_NUMBER, LKP_RX_FACILITY.NCPDP_PROVIDER_ID, LKP_RX_FACILITY.REMOTE_PROC_FLAG, LKP_RX_FACILITY.INTERVIEW_MOD_FLAG, LKP_RX_FACILITY.ROOT_LOCATION_GROUP_NUM, LKP_RX_FACILITY.WF_PROCESS_DEFINITION_NUM, LKP_RX_FACILITY.ACTIVE_DATE, LKP_RX_FACILITY.OPEN_DATE, LKP_RX_FACILITY.CLOSE_DATE, LKP_RX_FACILITY.STORE_LOCK_BOX_NUM, LKP_RX_FACILITY.SNR_CTZN_EFFECTIVE_DATE, LKP_RX_FACILITY.SNR_CTZN_AGE_LIMIT, LKP_RX_FACILITY.TIMEZONE_ID, LKP_RX_FACILITY.USER_DEFINED_INFO_1, LKP_RX_FACILITY.USER_DEFINED_INFO_2, LKP_RX_FACILITY.USER_DEFINED_INFO_3, LKP_RX_FACILITY.USER_DEFINED_INFO_4, LKP_RX_FACILITY.USER_DEFINED_INFO_5, LKP_RX_FACILITY.IS_IVR_ENABLED, LKP_RX_FACILITY.ARCHIVE_LEVEL, LKP_RX_FACILITY.SYS_USER, LKP_RX_FACILITY.DATESTAMP, LKP_RX_FACILITY.NUM_UPDATES, LKP_RX_FACILITY.IS_PPI_ENABLED, LKP_RX_FACILITY.PARENT_KEY, LKP_RX_FACILITY.PARENT_LEVEL, LKP_RX_FACILITY.LEVEL1_ID, LKP_RX_FACILITY.LEVEL1_DESC, LKP_RX_FACILITY.LEVEL2_ID, LKP_RX_FACILITY.LEVEL2_DESC, LKP_RX_FACILITY.LEVEL3_ID, LKP_RX_FACILITY.LEVEL3_DESC, LKP_RX_FACILITY.LEVEL4_ID, LKP_RX_FACILITY.LEVEL4_DESC, LKP_RX_FACILITY.LEVEL5_ID, LKP_RX_FACILITY.LEVEL5_DESC, LKP_RX_FACILITY.LEVEL6_ID, LKP_RX_FACILITY.LEVEL6_DESC, LKP_RX_FACILITY.LEVEL7_ID, LKP_RX_FACILITY.LEVEL7_DESC, LKP_RX_FACILITY.LEVEL8_ID, LKP_RX_FACILITY.LEVEL8_DESC, LKP_RX_FACILITY.ADDRESS1, LKP_RX_FACILITY.ADDRESS2, LKP_RX_FACILITY.CITY, LKP_RX_FACILITY.ZIP_CODE, LKP_RX_FACILITY.STATE_CODE, LKP_RX_FACILITY.PHONE1, LKP_RX_FACILITY.PHONE2, LKP_RX_FACILITY.CF_PROCESSING_TIME, LKP_RX_FACILITY.OWNING_FACILITY_ID, LKP_RX_FACILITY.ERX_CLIENT_ID, LKP_RX_FACILITY.FACILITY_STATUS_NUM, LKP_RX_FACILITY.H_LEVEL, LKP_RX_FACILITY.FACILITY_NAME, LKP_RX_FACILITY.COUNTRY_CODE, LKP_RX_FACILITY.FAX_NUMBER, LKP_RX_FACILITY.GEOGRAPHIC_CODE1, LKP_RX_FACILITY.GEOGRAPHIC_CODE2, LKP_RX_FACILITY.PARENT_LEGAL_NAME, LKP_RX_FACILITY.EXTRACT_DATE, LKP_RX_FACILITY.SOURCE_TABLE_NAME, LKP_RX_FACILITY.CREATE_DATE, LKP_RX_FACILITY.MAINT_DATE, LKP_RX_FACILITY.CREATE_UID, LKP_RX_FACILITY.MAINT_UID, LKP_RX_FACILITY.DELETE_FLAG, LKP_RX_FACILITY.DELETE_DATE, LKP_RX_FACILITY.DELETE_UID From EBIDW.RX.LKP_RX_FACILITY Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_RX_FACILITY.STORE_NUMBER WHERE (LKP_RX_FACILITY.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_RX_FILL_CATEGORY_CURRENT(
	FILL_CATEGORY_ID,
	FILL_CATEGORY_KEY,
	FILL_CATEGORY_NAME,
	ERX_CLIENT_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_FILL_CATEGORY.FILL_CATEGORY_ID, LKP_RX_FILL_CATEGORY.FILL_CATEGORY_KEY, LKP_RX_FILL_CATEGORY.FILL_CATEGORY_NAME, LKP_RX_FILL_CATEGORY.ERX_CLIENT_ID, LKP_RX_FILL_CATEGORY.EXTRACT_DATE, LKP_RX_FILL_CATEGORY.SOURCE_TABLE_NAME, LKP_RX_FILL_CATEGORY.CREATE_DATE, LKP_RX_FILL_CATEGORY.MAINT_DATE, LKP_RX_FILL_CATEGORY.CREATE_UID, LKP_RX_FILL_CATEGORY.MAINT_UID, LKP_RX_FILL_CATEGORY.DELETE_FLAG, LKP_RX_FILL_CATEGORY.DELETE_DATE, LKP_RX_FILL_CATEGORY.DELETE_UID From EBIDW.RX.LKP_RX_FILL_CATEGORY WHERE (LKP_RX_FILL_CATEGORY.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_RX_FILL_INDICATOR_CURRENT(
	FILL_INDICATOR_ID,
	FILL_INDICATOR_KEY,
	ALLOW_SUBSTITUTION,
	PARTIAL_FILL_INDICATOR,
	IS_THERAPEUTIC_SUBSTITUTION,
	FILL_SUB_INDICATOR,
	IS_REFILL,
	IS_REFILL_ALLOWED,
	CASH_TP_INDICATOR,
	IS_LETTER_ON_FILE,
	IS_OUT_OF_STOCK,
	AUTO_RETRY_RELEASED,
	COUNSELING_PERFORMED,
	AUTO_REFILL,
	ERX_CLIENT_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_FILL_INDICATOR.FILL_INDICATOR_ID, LKP_RX_FILL_INDICATOR.FILL_INDICATOR_KEY, LKP_RX_FILL_INDICATOR.ALLOW_SUBSTITUTION, LKP_RX_FILL_INDICATOR.PARTIAL_FILL_INDICATOR, LKP_RX_FILL_INDICATOR.IS_THERAPEUTIC_SUBSTITUTION, LKP_RX_FILL_INDICATOR.FILL_SUB_INDICATOR, LKP_RX_FILL_INDICATOR.IS_REFILL, LKP_RX_FILL_INDICATOR.IS_REFILL_ALLOWED, LKP_RX_FILL_INDICATOR.CASH_TP_INDICATOR, LKP_RX_FILL_INDICATOR.IS_LETTER_ON_FILE, LKP_RX_FILL_INDICATOR.IS_OUT_OF_STOCK, LKP_RX_FILL_INDICATOR.AUTO_RETRY_RELEASED, LKP_RX_FILL_INDICATOR.COUNSELING_PERFORMED, LKP_RX_FILL_INDICATOR.AUTO_REFILL, LKP_RX_FILL_INDICATOR.ERX_CLIENT_ID, LKP_RX_FILL_INDICATOR.EXTRACT_DATE, LKP_RX_FILL_INDICATOR.SOURCE_TABLE_NAME, LKP_RX_FILL_INDICATOR.CREATE_DATE, LKP_RX_FILL_INDICATOR.MAINT_DATE, LKP_RX_FILL_INDICATOR.CREATE_UID, LKP_RX_FILL_INDICATOR.MAINT_UID, LKP_RX_FILL_INDICATOR.DELETE_FLAG, LKP_RX_FILL_INDICATOR.DELETE_DATE, LKP_RX_FILL_INDICATOR.DELETE_UID From EBIDW.RX.LKP_RX_FILL_INDICATOR WHERE (LKP_RX_FILL_INDICATOR.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_RX_FILL_STATUS_CURRENT(
	FILL_STATUS_ID,
	FILL_STATUS_KEY,
	FILL_STATUS_NUMBER,
	FILL_STATUS_DESCRIPTION,
	ERX_CLIENT_ID,
	H_LEVEL,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_FILL_STATUS.FILL_STATUS_ID, LKP_RX_FILL_STATUS.FILL_STATUS_KEY, LKP_RX_FILL_STATUS.FILL_STATUS_NUMBER, LKP_RX_FILL_STATUS.FILL_STATUS_DESCRIPTION, LKP_RX_FILL_STATUS.ERX_CLIENT_ID, LKP_RX_FILL_STATUS.H_LEVEL, LKP_RX_FILL_STATUS.EXTRACT_DATE, LKP_RX_FILL_STATUS.SOURCE_TABLE_NAME, LKP_RX_FILL_STATUS.CREATE_DATE, LKP_RX_FILL_STATUS.MAINT_DATE, LKP_RX_FILL_STATUS.CREATE_UID, LKP_RX_FILL_STATUS.MAINT_UID, LKP_RX_FILL_STATUS.DELETE_FLAG, LKP_RX_FILL_STATUS.DELETE_DATE, LKP_RX_FILL_STATUS.DELETE_UID From EBIDW.RX.LKP_RX_FILL_STATUS WHERE (LKP_RX_FILL_STATUS.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_RX_GENERIC_CARVE_IN_CURRENT(
	CARVE_IN_ID,
	DRUG_LABEL,
	NDC_NUMBER,
	CARVE_IN_DATE,
	CUTOFF_DATE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_GENERIC_CARVE_IN.CARVE_IN_ID, LKP_RX_GENERIC_CARVE_IN.DRUG_LABEL, LKP_RX_GENERIC_CARVE_IN.NDC_NUMBER, LKP_RX_GENERIC_CARVE_IN.CARVE_IN_DATE, LKP_RX_GENERIC_CARVE_IN.CUTOFF_DATE, LKP_RX_GENERIC_CARVE_IN.ACTIVE_FLAG, LKP_RX_GENERIC_CARVE_IN.EXTRACT_DATE, LKP_RX_GENERIC_CARVE_IN.SOURCE_TABLE_NAME, LKP_RX_GENERIC_CARVE_IN.CREATE_DATE, LKP_RX_GENERIC_CARVE_IN.MAINT_DATE, LKP_RX_GENERIC_CARVE_IN.CREATE_UID, LKP_RX_GENERIC_CARVE_IN.MAINT_UID, LKP_RX_GENERIC_CARVE_IN.DELETE_FLAG, LKP_RX_GENERIC_CARVE_IN.DELETE_DATE, LKP_RX_GENERIC_CARVE_IN.DELETE_UID From EBIDW.RX.LKP_RX_GENERIC_CARVE_IN;
create or replace view LKP_RX_ITEM_CARVE_OUT_CURRENT(
	RX_ITEM_CARVE_OUT_ID,
	RX_CATALOG_ID,
	RX_ITEM_CATALOG_ID,
	NDC_NUMBER,
	CARVE_OUT_DATE,
	CUTOFF_DATE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_ITEM_CARVE_OUT.RX_ITEM_CARVE_OUT_ID, LKP_RX_ITEM_CARVE_OUT.RX_CATALOG_ID, LKP_RX_ITEM_CARVE_OUT.RX_ITEM_CATALOG_ID, LKP_RX_ITEM_CARVE_OUT.NDC_NUMBER, LKP_RX_ITEM_CARVE_OUT.CARVE_OUT_DATE, LKP_RX_ITEM_CARVE_OUT.CUTOFF_DATE, LKP_RX_ITEM_CARVE_OUT.ACTIVE_FLAG, LKP_RX_ITEM_CARVE_OUT.EXTRACT_DATE, LKP_RX_ITEM_CARVE_OUT.SOURCE_TABLE_NAME, LKP_RX_ITEM_CARVE_OUT.CREATE_DATE, LKP_RX_ITEM_CARVE_OUT.MAINT_DATE, LKP_RX_ITEM_CARVE_OUT.CREATE_UID, LKP_RX_ITEM_CARVE_OUT.MAINT_UID, LKP_RX_ITEM_CARVE_OUT.DELETE_FLAG, LKP_RX_ITEM_CARVE_OUT.DELETE_DATE, LKP_RX_ITEM_CARVE_OUT.DELETE_UID From EBIDW.RX.LKP_RX_ITEM_CARVE_OUT;
create or replace view LKP_RX_ITEM_CATALOG_CURRENT(
	RX_ITEM_CATALOG_ID,
	RX_CATALOG_ID,
	ORDER_CODE,
	NDC_NUMBER,
	BRAND_NAME,
	PRODUCT_DESCRIPTION,
	GENERIC_INDICATOR_CODE,
	GENERIC_INDICATOR_DESCRIPTION,
	SIZE_TEXT,
	PACK_SIZE,
	PACK_QUANTITY,
	UNIT_OF_MEASURE,
	UNIT_H_CODE,
	STRENGTH,
	FORM,
	PC_COST,
	HHHN_COST,
	DEA_SCHEDULE,
	RX_FLAG,
	IS_340B_ELIGIBLE,
	MANUFACTURER,
	DR_SC,
	CONTRACT,
	CURRENT_FLAG,
	EFFECTIVE_START_DATE,
	EFFECTIVE_END_DATE,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_ITEM_CATALOG.RX_ITEM_CATALOG_ID, LKP_RX_ITEM_CATALOG.RX_CATALOG_ID, LKP_RX_ITEM_CATALOG.ORDER_CODE, LKP_RX_ITEM_CATALOG.NDC_NUMBER, LKP_RX_ITEM_CATALOG.BRAND_NAME, LKP_RX_ITEM_CATALOG.PRODUCT_DESCRIPTION, LKP_RX_ITEM_CATALOG.GENERIC_INDICATOR_CODE, LKP_RX_ITEM_CATALOG.GENERIC_INDICATOR_DESCRIPTION, LKP_RX_ITEM_CATALOG.SIZE_TEXT, LKP_RX_ITEM_CATALOG.PACK_SIZE, LKP_RX_ITEM_CATALOG.PACK_QUANTITY, LKP_RX_ITEM_CATALOG.UNIT_OF_MEASURE, LKP_RX_ITEM_CATALOG.UNIT_H_CODE, LKP_RX_ITEM_CATALOG.STRENGTH, LKP_RX_ITEM_CATALOG.FORM, LKP_RX_ITEM_CATALOG.PC_COST, LKP_RX_ITEM_CATALOG.HHHN_COST, LKP_RX_ITEM_CATALOG.DEA_SCHEDULE, LKP_RX_ITEM_CATALOG.RX_FLAG, LKP_RX_ITEM_CATALOG.IS_340B_ELIGIBLE, LKP_RX_ITEM_CATALOG.MANUFACTURER, LKP_RX_ITEM_CATALOG.DR_SC, LKP_RX_ITEM_CATALOG.CONTRACT, LKP_RX_ITEM_CATALOG.CURRENT_FLAG, LKP_RX_ITEM_CATALOG.EFFECTIVE_START_DATE, LKP_RX_ITEM_CATALOG.EFFECTIVE_END_DATE, LKP_RX_ITEM_CATALOG.EXTRACT_DATE, LKP_RX_ITEM_CATALOG.SOURCE_TABLE_NAME, LKP_RX_ITEM_CATALOG.CREATE_DATE, LKP_RX_ITEM_CATALOG.MAINT_DATE, LKP_RX_ITEM_CATALOG.CREATE_UID, LKP_RX_ITEM_CATALOG.MAINT_UID, LKP_RX_ITEM_CATALOG.DELETE_FLAG, LKP_RX_ITEM_CATALOG.DELETE_DATE, LKP_RX_ITEM_CATALOG.DELETE_UID From EBIDW.RX.LKP_RX_ITEM_CATALOG WHERE (LKP_RX_ITEM_CATALOG.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_RX_ITEM_CATALOG_VERSIONED(
	RX_ITEM_CATALOG_ID,
	RX_CATALOG_ID,
	ORDER_CODE,
	NDC_NUMBER,
	BRAND_NAME,
	PRODUCT_DESCRIPTION,
	GENERIC_INDICATOR_CODE,
	GENERIC_INDICATOR_DESCRIPTION,
	SIZE_TEXT,
	PACK_SIZE,
	PACK_QUANTITY,
	UNIT_OF_MEASURE,
	UNIT_H_CODE,
	STRENGTH,
	FORM,
	PC_COST,
	HHHN_COST,
	DEA_SCHEDULE,
	RX_FLAG,
	IS_340B_ELIGIBLE,
	MANUFACTURER,
	DR_SC,
	CONTRACT,
	CURRENT_FLAG,
	EFFECTIVE_START_DATE,
	EFFECTIVE_END_DATE,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_ITEM_CATALOG.RX_ITEM_CATALOG_ID, LKP_RX_ITEM_CATALOG.RX_CATALOG_ID, LKP_RX_ITEM_CATALOG.ORDER_CODE, LKP_RX_ITEM_CATALOG.NDC_NUMBER, LKP_RX_ITEM_CATALOG.BRAND_NAME, LKP_RX_ITEM_CATALOG.PRODUCT_DESCRIPTION, LKP_RX_ITEM_CATALOG.GENERIC_INDICATOR_CODE, LKP_RX_ITEM_CATALOG.GENERIC_INDICATOR_DESCRIPTION, LKP_RX_ITEM_CATALOG.SIZE_TEXT, LKP_RX_ITEM_CATALOG.PACK_SIZE, LKP_RX_ITEM_CATALOG.PACK_QUANTITY, LKP_RX_ITEM_CATALOG.UNIT_OF_MEASURE, LKP_RX_ITEM_CATALOG.UNIT_H_CODE, LKP_RX_ITEM_CATALOG.STRENGTH, LKP_RX_ITEM_CATALOG.FORM, LKP_RX_ITEM_CATALOG.PC_COST, LKP_RX_ITEM_CATALOG.HHHN_COST, LKP_RX_ITEM_CATALOG.DEA_SCHEDULE, LKP_RX_ITEM_CATALOG.RX_FLAG, LKP_RX_ITEM_CATALOG.IS_340B_ELIGIBLE, LKP_RX_ITEM_CATALOG.MANUFACTURER, LKP_RX_ITEM_CATALOG.DR_SC, LKP_RX_ITEM_CATALOG.CONTRACT, LKP_RX_ITEM_CATALOG.CURRENT_FLAG, LKP_RX_ITEM_CATALOG.EFFECTIVE_START_DATE, LKP_RX_ITEM_CATALOG.EFFECTIVE_END_DATE, LKP_RX_ITEM_CATALOG.EXTRACT_DATE, LKP_RX_ITEM_CATALOG.SOURCE_TABLE_NAME, LKP_RX_ITEM_CATALOG.CREATE_DATE, LKP_RX_ITEM_CATALOG.MAINT_DATE, LKP_RX_ITEM_CATALOG.CREATE_UID, LKP_RX_ITEM_CATALOG.MAINT_UID, LKP_RX_ITEM_CATALOG.DELETE_FLAG, LKP_RX_ITEM_CATALOG.DELETE_DATE, LKP_RX_ITEM_CATALOG.DELETE_UID From EBIDW.RX.LKP_RX_ITEM_CATALOG;
create or replace view LKP_RX_PO_APPROVAL_USER_CURRENT(
	RX_PO_APPROVAL_USER_ID,
	RX_PO_APPROVAL_USER_NUMBER,
	USER_NAME,
	USER_ACTIVE,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_PO_APPROVAL_USER.RX_PO_APPROVAL_USER_ID, LKP_RX_PO_APPROVAL_USER.RX_PO_APPROVAL_USER_NUMBER, LKP_RX_PO_APPROVAL_USER.USER_NAME, LKP_RX_PO_APPROVAL_USER.USER_ACTIVE, LKP_RX_PO_APPROVAL_USER.EXTRACT_DATE, LKP_RX_PO_APPROVAL_USER.SOURCE_TABLE_NAME, LKP_RX_PO_APPROVAL_USER.CREATE_DATE, LKP_RX_PO_APPROVAL_USER.MAINT_DATE, LKP_RX_PO_APPROVAL_USER.CREATE_UID, LKP_RX_PO_APPROVAL_USER.MAINT_UID, LKP_RX_PO_APPROVAL_USER.DELETE_FLAG, LKP_RX_PO_APPROVAL_USER.DELETE_DATE, LKP_RX_PO_APPROVAL_USER.DELETE_UID From EBIDW.RX.LKP_RX_PO_APPROVAL_USER;
create or replace view LKP_RX_PRESCRIBER_CURRENT(
	RX_PRESCRIBER_ID,
	PRESCRIBER_ID,
	PADR_KEY,
	PRS_PRESCRIBER_KEY,
	FIRST_NAME,
	LAST_NAME,
	STREET_ADDRESS,
	CITY,
	STATE_CODE,
	ZIP_CODE,
	NPI_NUMBER,
	DEA_NUMBER,
	PPI_NUMBER,
	IS_340B,
	CURRENT_FLAG,
	EFFECTIVE_START_DATE,
	EFFECTIVE_END_DATE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_PRESCRIBER.RX_PRESCRIBER_ID, LKP_RX_PRESCRIBER.PRESCRIBER_ID, LKP_RX_PRESCRIBER.PADR_KEY, LKP_RX_PRESCRIBER.PRS_PRESCRIBER_KEY, LKP_RX_PRESCRIBER.FIRST_NAME, LKP_RX_PRESCRIBER.LAST_NAME, LKP_RX_PRESCRIBER.STREET_ADDRESS, LKP_RX_PRESCRIBER.CITY, LKP_RX_PRESCRIBER.STATE_CODE, LKP_RX_PRESCRIBER.ZIP_CODE, LKP_RX_PRESCRIBER.NPI_NUMBER, LKP_RX_PRESCRIBER.DEA_NUMBER, LKP_RX_PRESCRIBER.PPI_NUMBER, LKP_RX_PRESCRIBER.IS_340B, LKP_RX_PRESCRIBER.CURRENT_FLAG, LKP_RX_PRESCRIBER.EFFECTIVE_START_DATE, LKP_RX_PRESCRIBER.EFFECTIVE_END_DATE, LKP_RX_PRESCRIBER.ACTIVE_FLAG, LKP_RX_PRESCRIBER.EXTRACT_DATE, LKP_RX_PRESCRIBER.SOURCE_TABLE_NAME, LKP_RX_PRESCRIBER.CREATE_DATE, LKP_RX_PRESCRIBER.MAINT_DATE, LKP_RX_PRESCRIBER.CREATE_UID, LKP_RX_PRESCRIBER.MAINT_UID, LKP_RX_PRESCRIBER.DELETE_FLAG, LKP_RX_PRESCRIBER.DELETE_DATE, LKP_RX_PRESCRIBER.DELETE_UID From EBIDW.RX.LKP_RX_PRESCRIBER;
create or replace view LKP_RX_PRESCRIBER_FORMULARY_CURRENT(
	RX_PRESCRIBER_FORMULARY_ID,
	PRESCRIBER_LAST_NAME,
	PRESCRIBER_FIRST_NAME,
	PRESCRIBER_CREDENTIAL,
	NPI_NUMBER,
	PRESCRIBER_BEGIN_DATE,
	PRESCRIBER_TERM_DATE,
	PRESCRIBER_GROUP,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_PRESCRIBER_FORMULARY.RX_PRESCRIBER_FORMULARY_ID, LKP_RX_PRESCRIBER_FORMULARY.PRESCRIBER_LAST_NAME, LKP_RX_PRESCRIBER_FORMULARY.PRESCRIBER_FIRST_NAME, LKP_RX_PRESCRIBER_FORMULARY.PRESCRIBER_CREDENTIAL, LKP_RX_PRESCRIBER_FORMULARY.NPI_NUMBER, LKP_RX_PRESCRIBER_FORMULARY.PRESCRIBER_BEGIN_DATE, LKP_RX_PRESCRIBER_FORMULARY.PRESCRIBER_TERM_DATE, LKP_RX_PRESCRIBER_FORMULARY.PRESCRIBER_GROUP, LKP_RX_PRESCRIBER_FORMULARY.ACTIVE_FLAG, LKP_RX_PRESCRIBER_FORMULARY.EXTRACT_DATE, LKP_RX_PRESCRIBER_FORMULARY.SOURCE_TABLE_NAME, LKP_RX_PRESCRIBER_FORMULARY.CREATE_DATE, LKP_RX_PRESCRIBER_FORMULARY.MAINT_DATE, LKP_RX_PRESCRIBER_FORMULARY.CREATE_UID, LKP_RX_PRESCRIBER_FORMULARY.MAINT_UID, LKP_RX_PRESCRIBER_FORMULARY.DELETE_FLAG, LKP_RX_PRESCRIBER_FORMULARY.DELETE_DATE, LKP_RX_PRESCRIBER_FORMULARY.DELETE_UID From EBIDW.RX.LKP_RX_PRESCRIBER_FORMULARY;
create or replace view LKP_RX_PRODUCT_VERSIONED(
	RX_PRODUCT_ID,
	PRODUCT_ID,
	PRODUCT_KEY,
	PRODUCT_NUMBER,
	PRODUCT_SCHEDULE,
	IS_COMPOUND,
	PRODUCT_NAME,
	ALTERNATIVE_LABEL_NAME,
	IS_GENERIC,
	SOURCE_INDICATOR,
	IS_340B,
	IS_340B_OVERIDE,
	CURRENT_FLAG,
	EFFECTIVE_START_DATE,
	EFFECTIVE_END_DATE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_PRODUCT.RX_PRODUCT_ID, LKP_RX_PRODUCT.PRODUCT_ID, LKP_RX_PRODUCT.PRODUCT_KEY, LKP_RX_PRODUCT.PRODUCT_NUMBER, LKP_RX_PRODUCT.PRODUCT_SCHEDULE, LKP_RX_PRODUCT.IS_COMPOUND, LKP_RX_PRODUCT.PRODUCT_NAME, LKP_RX_PRODUCT.ALTERNATIVE_LABEL_NAME, LKP_RX_PRODUCT.IS_GENERIC, LKP_RX_PRODUCT.SOURCE_INDICATOR, LKP_RX_PRODUCT.IS_340B, LKP_RX_PRODUCT.IS_340B_OVERIDE, LKP_RX_PRODUCT.CURRENT_FLAG, LKP_RX_PRODUCT.EFFECTIVE_START_DATE, LKP_RX_PRODUCT.EFFECTIVE_END_DATE, LKP_RX_PRODUCT.ACTIVE_FLAG, LKP_RX_PRODUCT.EXTRACT_DATE, LKP_RX_PRODUCT.SOURCE_TABLE_NAME, LKP_RX_PRODUCT.CREATE_DATE, LKP_RX_PRODUCT.MAINT_DATE, LKP_RX_PRODUCT.CREATE_UID, LKP_RX_PRODUCT.MAINT_UID, LKP_RX_PRODUCT.DELETE_FLAG, LKP_RX_PRODUCT.DELETE_DATE, LKP_RX_PRODUCT.DELETE_UID From EBIDW.RX.LKP_RX_PRODUCT WHERE (LKP_RX_PRODUCT.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_RX_RESPONSIBLE_PARTY_CURRENT(
	RESPONSIBLE_PARTY_ID,
	RESPONSIBLE_PARTY_KEY,
	RESPONSIBLE_PARTY_NAME,
	ERX_CLIENT_ID,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_RESPONSIBLE_PARTY.RESPONSIBLE_PARTY_ID, LKP_RX_RESPONSIBLE_PARTY.RESPONSIBLE_PARTY_KEY, LKP_RX_RESPONSIBLE_PARTY.RESPONSIBLE_PARTY_NAME, LKP_RX_RESPONSIBLE_PARTY.ERX_CLIENT_ID, LKP_RX_RESPONSIBLE_PARTY.EXTRACT_DATE, LKP_RX_RESPONSIBLE_PARTY.SOURCE_TABLE_NAME, LKP_RX_RESPONSIBLE_PARTY.CREATE_DATE, LKP_RX_RESPONSIBLE_PARTY.MAINT_DATE, LKP_RX_RESPONSIBLE_PARTY.CREATE_UID, LKP_RX_RESPONSIBLE_PARTY.MAINT_UID, LKP_RX_RESPONSIBLE_PARTY.DELETE_FLAG, LKP_RX_RESPONSIBLE_PARTY.DELETE_DATE, LKP_RX_RESPONSIBLE_PARTY.DELETE_UID From EBIDW.RX.LKP_RX_RESPONSIBLE_PARTY WHERE (LKP_RX_RESPONSIBLE_PARTY.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_RX_TP_PLAN_CURRENT(
	PLAN_ID,
	PLAN_KEY,
	PLAN_CODE,
	PLAN_NAME,
	COMMENT_TEXT,
	IS_TEST_PLAN,
	IS_MEDICAID_PLAN,
	IS_MEDICARE_PLAN,
	IS_WORKERS_COMP_PLAN,
	PRIMARY_INSURANCE_TYPE_CD,
	IS_ALL_STORE_PLAN,
	EFFECTIVE_DATE,
	TERMINATION_DATE,
	PLAN_NUM,
	AGENCY_TYPE_NUM,
	RUN_MEDICAID_EDITS,
	IS_MAIL_ORDER_PLAN,
	ERX_CLIENT_ID,
	H_LEVEL,
	IS_340B,
	PROCESSOR_NAME,
	PARTIAL_FILL_BILLING,
	BILLING_TYPE,
	ALLOW_LOWER_COPAY_OVERRIDE,
	ALLOW_HIGHER_COPAY_OVERRIDE,
	RECALCULATE_COPAY_OVERRIDE,
	CLAIM_TP_BILLING_FORMAT,
	REV_TP_BILLING_FORMAT,
	ELIG_TP_BILLING_FORMAT,
	BENEFIT_GROUP_ID,
	BENEFIT_GROUP_NAME,
	FACILITY_PLAN_NUMBER,
	IS_MEDICARE_FACILITATOR,
	CONTACT_NAME,
	PLAN_ADDRESS1,
	PLAN_ADDRESS2,
	PLAN_CITY,
	PLAN_STATE_CODE,
	PLAN_ZIP_CODE,
	PLAN_PHONE_NUMBER,
	PLAN_FAX_NUMBER,
	PLAN_HELPDESK_PHONE_NUMBER,
	BIN,
	PCN,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_TP_PLAN.PLAN_ID, LKP_RX_TP_PLAN.PLAN_KEY, LKP_RX_TP_PLAN.PLAN_CODE, LKP_RX_TP_PLAN.PLAN_NAME, LKP_RX_TP_PLAN.COMMENT_TEXT, LKP_RX_TP_PLAN.IS_TEST_PLAN, LKP_RX_TP_PLAN.IS_MEDICAID_PLAN, LKP_RX_TP_PLAN.IS_MEDICARE_PLAN, LKP_RX_TP_PLAN.IS_WORKERS_COMP_PLAN, LKP_RX_TP_PLAN.PRIMARY_INSURANCE_TYPE_CD, LKP_RX_TP_PLAN.IS_ALL_STORE_PLAN, LKP_RX_TP_PLAN.EFFECTIVE_DATE, LKP_RX_TP_PLAN.TERMINATION_DATE, LKP_RX_TP_PLAN.PLAN_NUM, LKP_RX_TP_PLAN.AGENCY_TYPE_NUM, LKP_RX_TP_PLAN.RUN_MEDICAID_EDITS, LKP_RX_TP_PLAN.IS_MAIL_ORDER_PLAN, LKP_RX_TP_PLAN.ERX_CLIENT_ID, LKP_RX_TP_PLAN.H_LEVEL, LKP_RX_TP_PLAN.IS_340B, LKP_RX_TP_PLAN.PROCESSOR_NAME, LKP_RX_TP_PLAN.PARTIAL_FILL_BILLING, LKP_RX_TP_PLAN.BILLING_TYPE, LKP_RX_TP_PLAN.ALLOW_LOWER_COPAY_OVERRIDE, LKP_RX_TP_PLAN.ALLOW_HIGHER_COPAY_OVERRIDE, LKP_RX_TP_PLAN.RECALCULATE_COPAY_OVERRIDE, LKP_RX_TP_PLAN.CLAIM_TP_BILLING_FORMAT, LKP_RX_TP_PLAN.REV_TP_BILLING_FORMAT, LKP_RX_TP_PLAN.ELIG_TP_BILLING_FORMAT, LKP_RX_TP_PLAN.BENEFIT_GROUP_ID, LKP_RX_TP_PLAN.BENEFIT_GROUP_NAME, LKP_RX_TP_PLAN.FACILITY_PLAN_NUMBER, LKP_RX_TP_PLAN.IS_MEDICARE_FACILITATOR, LKP_RX_TP_PLAN.CONTACT_NAME, LKP_RX_TP_PLAN.PLAN_ADDRESS1, LKP_RX_TP_PLAN.PLAN_ADDRESS2, LKP_RX_TP_PLAN.PLAN_CITY, LKP_RX_TP_PLAN.PLAN_STATE_CODE, LKP_RX_TP_PLAN.PLAN_ZIP_CODE, LKP_RX_TP_PLAN.PLAN_PHONE_NUMBER, LKP_RX_TP_PLAN.PLAN_FAX_NUMBER, LKP_RX_TP_PLAN.PLAN_HELPDESK_PHONE_NUMBER, LKP_RX_TP_PLAN.BIN, LKP_RX_TP_PLAN.PCN, LKP_RX_TP_PLAN.EXTRACT_DATE, LKP_RX_TP_PLAN.SOURCE_TABLE_NAME, LKP_RX_TP_PLAN.CREATE_DATE, LKP_RX_TP_PLAN.MAINT_DATE, LKP_RX_TP_PLAN.CREATE_UID, LKP_RX_TP_PLAN.MAINT_UID, LKP_RX_TP_PLAN.DELETE_FLAG, LKP_RX_TP_PLAN.DELETE_DATE, LKP_RX_TP_PLAN.DELETE_UID From EBIDW.RX.LKP_RX_TP_PLAN WHERE (LKP_RX_TP_PLAN.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_RX_TP_PROCESSOR_CURRENT(
	PROCESSOR_ID,
	PROCESSOR_KEY,
	PROCESSOR_NUMBER,
	PROCESSOR_GROUP_NUMBER,
	PROCESSOR_NAME,
	CONTACT_NAME,
	EFFECTIVE_DATE,
	TERMINATION_DATE,
	ARCHIVE_LEVEL,
	SYS_USER,
	DATESTAMP,
	NUM_UPDATES,
	ERX_CLIENT_ID,
	H_LEVEL,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_TP_PROCESSOR.PROCESSOR_ID, LKP_RX_TP_PROCESSOR.PROCESSOR_KEY, LKP_RX_TP_PROCESSOR.PROCESSOR_NUMBER, LKP_RX_TP_PROCESSOR.PROCESSOR_GROUP_NUMBER, LKP_RX_TP_PROCESSOR.PROCESSOR_NAME, LKP_RX_TP_PROCESSOR.CONTACT_NAME, LKP_RX_TP_PROCESSOR.EFFECTIVE_DATE, LKP_RX_TP_PROCESSOR.TERMINATION_DATE, LKP_RX_TP_PROCESSOR.ARCHIVE_LEVEL, LKP_RX_TP_PROCESSOR.SYS_USER, LKP_RX_TP_PROCESSOR.DATESTAMP, LKP_RX_TP_PROCESSOR.NUM_UPDATES, LKP_RX_TP_PROCESSOR.ERX_CLIENT_ID, LKP_RX_TP_PROCESSOR.H_LEVEL, LKP_RX_TP_PROCESSOR.EXTRACT_DATE, LKP_RX_TP_PROCESSOR.SOURCE_TABLE_NAME, LKP_RX_TP_PROCESSOR.CREATE_DATE, LKP_RX_TP_PROCESSOR.MAINT_DATE, LKP_RX_TP_PROCESSOR.CREATE_UID, LKP_RX_TP_PROCESSOR.MAINT_UID, LKP_RX_TP_PROCESSOR.DELETE_FLAG, LKP_RX_TP_PROCESSOR.DELETE_DATE, LKP_RX_TP_PROCESSOR.DELETE_UID From EBIDW.RX.LKP_RX_TP_PROCESSOR WHERE (LKP_RX_TP_PROCESSOR.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_RX_VENDOR_CURRENT(
	RX_VENDOR_ID,
	RX_VENDOR_NUMBER,
	RX_VENDOR_NAME,
	EFFECTIVE_START_DATE,
	EFFECTIVE_END_DATE,
	CURRENT_FLAG,
	EXTRACT_DATE,
	ACTIVE_FLAG,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_RX_VENDOR.RX_VENDOR_ID, LKP_RX_VENDOR.RX_VENDOR_NUMBER, LKP_RX_VENDOR.RX_VENDOR_NAME, LKP_RX_VENDOR.EFFECTIVE_START_DATE, LKP_RX_VENDOR.EFFECTIVE_END_DATE, LKP_RX_VENDOR.CURRENT_FLAG, LKP_RX_VENDOR.EXTRACT_DATE, LKP_RX_VENDOR.ACTIVE_FLAG, LKP_RX_VENDOR.CREATE_DATE, LKP_RX_VENDOR.MAINT_DATE, LKP_RX_VENDOR.CREATE_UID, LKP_RX_VENDOR.MAINT_UID, LKP_RX_VENDOR.DELETE_FLAG, LKP_RX_VENDOR.DELETE_DATE, LKP_RX_VENDOR.DELETE_UID From EBIDW.RX.LKP_RX_VENDOR;
create or replace view LKP_SALES_STORE_ATTRIBUTE_CURRENT(
	STORE_ATTRIBUTE_ID,
	STORE_ID,
	STORE_NUMBER,
	STORE_REPORTING_STATUS,
	STORE_OPERATION_TYPE,
	MANAGER_LAST_NAME,
	MANAGER_FIRST_NAME,
	CHAIN_ID,
	CHAIN_CODE,
	CHAIN_LABEL,
	TAX_REGION_ID,
	TAX_REGION_NUMBER,
	TAX_REGION_LABEL,
	SPECIALIST_REGION_ID,
	SPECIALIST_REGION_CODE,
	PROCESSOR_340B,
	STORELINE_FLAG,
	PROMOTION_FILE_ENV,
	LAST_YEAR_COMP_STORE_ID,
	LAST_YEAR_COMP_STORE_NUM,
	CURRENT_FLAG,
	EFFECTIVE_START_DATE,
	EFFECTIVE_START_FISCAL_DAY_ID,
	EFFECTIVE_END_DATE,
	EFFECTIVE_END_FISCAL_DAY_ID,
	LY_COMP_START_DATE,
	LY_COMP_START_FISCAL_DAY_ID,
	LY_COMP_END_DATE,
	LY_COMP_END_FISCAL_DAY_ID,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID,
	LATITUDE,
	LONGITUDE,
	IS_SMART_SCAN
) as SELECT LKP_SALES_STORE_ATTRIBUTE.STORE_ATTRIBUTE_ID, LKP_SALES_STORE_ATTRIBUTE.STORE_ID, LKP_SALES_STORE_ATTRIBUTE.STORE_NUMBER, LKP_SALES_STORE_ATTRIBUTE.STORE_REPORTING_STATUS, LKP_SALES_STORE_ATTRIBUTE.STORE_OPERATION_TYPE, LKP_SALES_STORE_ATTRIBUTE.MANAGER_LAST_NAME, LKP_SALES_STORE_ATTRIBUTE.MANAGER_FIRST_NAME, LKP_SALES_STORE_ATTRIBUTE.CHAIN_ID, LKP_SALES_STORE_ATTRIBUTE.CHAIN_CODE, LKP_SALES_STORE_ATTRIBUTE.CHAIN_LABEL, LKP_SALES_STORE_ATTRIBUTE.TAX_REGION_ID, LKP_SALES_STORE_ATTRIBUTE.TAX_REGION_NUMBER, LKP_SALES_STORE_ATTRIBUTE.TAX_REGION_LABEL, LKP_SALES_STORE_ATTRIBUTE.SPECIALIST_REGION_ID, LKP_SALES_STORE_ATTRIBUTE.SPECIALIST_REGION_CODE, LKP_SALES_STORE_ATTRIBUTE.PROCESSOR_340B, LKP_SALES_STORE_ATTRIBUTE.STORELINE_FLAG, LKP_SALES_STORE_ATTRIBUTE.PROMOTION_FILE_ENV, LKP_SALES_STORE_ATTRIBUTE.LAST_YEAR_COMP_STORE_ID, LKP_SALES_STORE_ATTRIBUTE.LAST_YEAR_COMP_STORE_NUM, LKP_SALES_STORE_ATTRIBUTE.CURRENT_FLAG, LKP_SALES_STORE_ATTRIBUTE.EFFECTIVE_START_DATE, LKP_SALES_STORE_ATTRIBUTE.EFFECTIVE_START_FISCAL_DAY_ID, LKP_SALES_STORE_ATTRIBUTE.EFFECTIVE_END_DATE, LKP_SALES_STORE_ATTRIBUTE.EFFECTIVE_END_FISCAL_DAY_ID, LKP_SALES_STORE_ATTRIBUTE.LY_COMP_START_DATE, LKP_SALES_STORE_ATTRIBUTE.LY_COMP_START_FISCAL_DAY_ID, LKP_SALES_STORE_ATTRIBUTE.LY_COMP_END_DATE, LKP_SALES_STORE_ATTRIBUTE.LY_COMP_END_FISCAL_DAY_ID, LKP_SALES_STORE_ATTRIBUTE.CREATE_DATE, LKP_SALES_STORE_ATTRIBUTE.MAINT_DATE, LKP_SALES_STORE_ATTRIBUTE.CREATE_UID, LKP_SALES_STORE_ATTRIBUTE.MAINT_UID, LKP_SALES_STORE_ATTRIBUTE.DELETE_FLAG, LKP_SALES_STORE_ATTRIBUTE.DELETE_DATE, LKP_SALES_STORE_ATTRIBUTE.DELETE_UID, LKP_SALES_STORE_ATTRIBUTE.LATITUDE, LKP_SALES_STORE_ATTRIBUTE.LONGITUDE, LKP_SALES_STORE_ATTRIBUTE.IS_SMART_SCAN From EBIDW.SALES.LKP_SALES_STORE_ATTRIBUTE Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_SALES_STORE_ATTRIBUTE.STORE_NUMBER
WHERE ((LKP_SALES_STORE_ATTRIBUTE.DELETE_FLAG = 'f'::BOOLEAN) AND (LKP_SALES_STORE_ATTRIBUTE.CURRENT_FLAG = 't'::BOOLEAN));
create or replace view LKP_SALES_STORE_CURRENT(
	STORE_ID,
	SALES_STORE_NUMBER,
	SALES_STORE_NAME,
	SALES_STORE_LABEL,
	SALES_STORE_DESC,
	SALES_STORE_ID,
	ADDRESS1,
	CITY,
	STATE_ID,
	ZIP,
	COUNTY,
	AREA_ID,
	ZONE_ID,
	GEO_AREA_ID,
	REGION_ID,
	FMM_FLAG,
	HOURLY_SALES_FLAG,
	CASH_SALES_FLAG,
	CAODSD_FLAG,
	RX_FLAG,
	NAVISTOR_FLAG,
	NCC_FLAG,
	REQUISITIONS_FLAG,
	HOUSE_CALLS_ONLY_FLAG,
	ACTIVE_FLAG,
	DELETE_FLAG,
	FUEL_ADVANTEDGE_FLAG,
	FUEL_START_DAY_KEY,
	FUEL_END_DAY_KEY,
	STORE_REPORTING_AREA_ID
) as SELECT ls.STORE_ID, ls.SALES_STORE_NUMBER, ls.SALES_STORE_NAME, CASE WHEN (ls.DELETE_FLAG = 'f'::BOOLEAN) THEN ls.SALES_STORE_LABEL ELSE ('~(D) ' || ls.SALES_STORE_LABEL) END AS SALES_STORE_LABEL, CASE WHEN (ls.DELETE_FLAG = 'f'::BOOLEAN) THEN ls.SALES_STORE_DESC ELSE ('~(DELETED) ' || ls.SALES_STORE_DESC) END AS SALES_STORE_DESC, ls.SALES_STORE_ID, ls.ADDRESS1, ls.CITY, ls.STATE_ID, ls.ZIP, ls.COUNTY, ls.AREA_ID, ls.ZONE_ID, ls.GEO_AREA_ID, ls.REGION_ID, ls.FMM_FLAG, ls.HOURLY_SALES_FLAG, ls.CASH_SALES_FLAG, ls.CAODSD_FLAG, ls.RX_FLAG, ls.NAVISTOR_FLAG, ls.NCC_FLAG, ls.REQUISITIONS_FLAG, ls.HOUSE_CALLS_ONLY_FLAG, ls.ACTIVE_FLAG, ls.DELETE_FLAG, ls.FUEL_ADVANTEDGE_FLAG, ls.FUEL_START_DAY_KEY, ls.FUEL_END_DAY_KEY, ls.STORE_REPORTING_AREA_ID From EBIDW.SALES.LKP_SALES_STORE as ls  join REPORTING.DIM_STORE_STACK_CURRENT ss on ls.SALES_STORE_NUMBER=ss.SALES_STORE_NUMBER
WHERE (ls.CURRENT_FLAG = 't'::BOOLEAN) and ss.SALES_STORE_NUMBER<>88;
create or replace view LKP_STANDARD_COST_CURRENT(
	STANDARD_COST_ID,
	STORE_ID,
	STORE_NUMBER,
	ITEM_ID,
	UPC_NUMBER,
	STORE_DSD_COST,
	CHAIN_DSD_COST,
	WAREHOUSE_COST,
	BASE_WAREHOUSE_COST,
	OFF_INVOICE_ALLOWANCE,
	BILLBACK_ALLOWANCE,
	FREIGHT_CHARGE,
	OTHER_ALLOWANCE,
	OTHER_CHARGE,
	CURRENT_FLAG,
	EFFECTIVE_START_FISCAL_DAY_ID,
	EFFECTIVE_START_DATE,
	EFFECTIVE_END_FISCAL_DAY_ID,
	EFFECTIVE_END_DATE,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_STANDARD_COST.STANDARD_COST_ID, LKP_STANDARD_COST.STORE_ID, LKP_STANDARD_COST.STORE_NUMBER, LKP_STANDARD_COST.ITEM_ID, LKP_STANDARD_COST.UPC_NUMBER, LKP_STANDARD_COST.STORE_DSD_COST, LKP_STANDARD_COST.CHAIN_DSD_COST, LKP_STANDARD_COST.WAREHOUSE_COST, LKP_STANDARD_COST.BASE_WAREHOUSE_COST, LKP_STANDARD_COST.OFF_INVOICE_ALLOWANCE, LKP_STANDARD_COST.BILLBACK_ALLOWANCE, LKP_STANDARD_COST.FREIGHT_CHARGE, LKP_STANDARD_COST.OTHER_ALLOWANCE, LKP_STANDARD_COST.OTHER_CHARGE, LKP_STANDARD_COST.CURRENT_FLAG, LKP_STANDARD_COST.EFFECTIVE_START_FISCAL_DAY_ID, LKP_STANDARD_COST.EFFECTIVE_START_DATE, LKP_STANDARD_COST.EFFECTIVE_END_FISCAL_DAY_ID, LKP_STANDARD_COST.EFFECTIVE_END_DATE, LKP_STANDARD_COST.EXTRACT_DATE, LKP_STANDARD_COST.SOURCE_TABLE_NAME, LKP_STANDARD_COST.CREATE_DATE, LKP_STANDARD_COST.MAINT_DATE, LKP_STANDARD_COST.CREATE_UID, LKP_STANDARD_COST.MAINT_UID, LKP_STANDARD_COST.DELETE_FLAG, LKP_STANDARD_COST.DELETE_DATE, LKP_STANDARD_COST.DELETE_UID From EBIDW.PI.LKP_STANDARD_COST Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_STANDARD_COST.STORE_NUMBER WHERE (LKP_STANDARD_COST.CURRENT_FLAG = 't'::BOOLEAN);
create or replace view LKP_STANDARD_COST_VERSIONED(
	STANDARD_COST_ID,
	STORE_ID,
	STORE_NUMBER,
	ITEM_ID,
	UPC_NUMBER,
	STORE_DSD_COST,
	CHAIN_DSD_COST,
	WAREHOUSE_COST,
	BASE_WAREHOUSE_COST,
	OFF_INVOICE_ALLOWANCE,
	BILLBACK_ALLOWANCE,
	FREIGHT_CHARGE,
	OTHER_ALLOWANCE,
	OTHER_CHARGE,
	CURRENT_FLAG,
	EFFECTIVE_START_FISCAL_DAY_ID,
	EFFECTIVE_START_DATE,
	EFFECTIVE_END_FISCAL_DAY_ID,
	EFFECTIVE_END_DATE,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_STANDARD_COST.STANDARD_COST_ID, LKP_STANDARD_COST.STORE_ID, LKP_STANDARD_COST.STORE_NUMBER, LKP_STANDARD_COST.ITEM_ID, LKP_STANDARD_COST.UPC_NUMBER, LKP_STANDARD_COST.STORE_DSD_COST, LKP_STANDARD_COST.CHAIN_DSD_COST, LKP_STANDARD_COST.WAREHOUSE_COST, LKP_STANDARD_COST.BASE_WAREHOUSE_COST, LKP_STANDARD_COST.OFF_INVOICE_ALLOWANCE, LKP_STANDARD_COST.BILLBACK_ALLOWANCE, LKP_STANDARD_COST.FREIGHT_CHARGE, LKP_STANDARD_COST.OTHER_ALLOWANCE, LKP_STANDARD_COST.OTHER_CHARGE, LKP_STANDARD_COST.CURRENT_FLAG, LKP_STANDARD_COST.EFFECTIVE_START_FISCAL_DAY_ID, LKP_STANDARD_COST.EFFECTIVE_START_DATE, LKP_STANDARD_COST.EFFECTIVE_END_FISCAL_DAY_ID, LKP_STANDARD_COST.EFFECTIVE_END_DATE, LKP_STANDARD_COST.EXTRACT_DATE, LKP_STANDARD_COST.SOURCE_TABLE_NAME, LKP_STANDARD_COST.CREATE_DATE, LKP_STANDARD_COST.MAINT_DATE, LKP_STANDARD_COST.CREATE_UID, LKP_STANDARD_COST.MAINT_UID, LKP_STANDARD_COST.DELETE_FLAG, LKP_STANDARD_COST.DELETE_DATE, LKP_STANDARD_COST.DELETE_UID From EBIDW.PI.LKP_STANDARD_COST Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_STANDARD_COST.STORE_NUMBER;
create or replace view LKP_STORE_CGO_CAPACITY_CURRENT(
	STORE_CGO_CAPACITY_ID,
	STORE_NUMBER,
	STORE_ID,
	ITEM_ID,
	PRIMARY_UPC_NUMBER,
	SEQUENCE_NUMBER,
	TEMPORARY_FLAG,
	DISPLAY_TYPE_ID,
	CGO_SHELF_CAPACITY,
	PRESENTATION_QUANTITY,
	SHELF_CAPACITY,
	CURRENT_FLAG,
	EFFECTIVE_START_DATE,
	EFFECTIVE_END_DATE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	CREATE_DATE,
	SOURCE_TABLE_NAME,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_STORE_CGO_CAPACITY.STORE_CGO_CAPACITY_ID, LKP_STORE_CGO_CAPACITY.STORE_NUMBER, LKP_STORE_CGO_CAPACITY.STORE_ID, LKP_STORE_CGO_CAPACITY.ITEM_ID, LKP_STORE_CGO_CAPACITY.PRIMARY_UPC_NUMBER, LKP_STORE_CGO_CAPACITY.SEQUENCE_NUMBER, LKP_STORE_CGO_CAPACITY.TEMPORARY_FLAG, LKP_STORE_CGO_CAPACITY.DISPLAY_TYPE_ID, LKP_STORE_CGO_CAPACITY.CGO_SHELF_CAPACITY, LKP_STORE_CGO_CAPACITY.PRESENTATION_QUANTITY, CASE WHEN ((LKP_STORE_CGO_CAPACITY.PRESENTATION_QUANTITY <> 0) AND (LKP_STORE_CGO_CAPACITY.CGO_SHELF_CAPACITY <> 0)) THEN LKP_STORE_CGO_CAPACITY.CGO_SHELF_CAPACITY ELSE (LKP_STORE_CGO_CAPACITY.PRESENTATION_QUANTITY + LKP_STORE_CGO_CAPACITY.CGO_SHELF_CAPACITY) END AS SHELF_CAPACITY, LKP_STORE_CGO_CAPACITY.CURRENT_FLAG, LKP_STORE_CGO_CAPACITY.EFFECTIVE_START_DATE, LKP_STORE_CGO_CAPACITY.EFFECTIVE_END_DATE, LKP_STORE_CGO_CAPACITY.ACTIVE_FLAG, LKP_STORE_CGO_CAPACITY.EXTRACT_DATE, LKP_STORE_CGO_CAPACITY.CREATE_DATE, LKP_STORE_CGO_CAPACITY.SOURCE_TABLE_NAME, LKP_STORE_CGO_CAPACITY.MAINT_DATE, LKP_STORE_CGO_CAPACITY.CREATE_UID, LKP_STORE_CGO_CAPACITY.MAINT_UID, LKP_STORE_CGO_CAPACITY.DELETE_FLAG, LKP_STORE_CGO_CAPACITY.DELETE_DATE, LKP_STORE_CGO_CAPACITY.DELETE_UID From EBIDW.SUPPLYCHAIN.LKP_STORE_CGO_CAPACITY Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_STORE_CGO_CAPACITY.STORE_NUMBER WHERE (LKP_STORE_CGO_CAPACITY.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view LKP_STORE_CURRENT(
	CORPORATION_ID,
	ZONE_ID,
	STORE_ID,
	STORE_NUMBER,
	STORE_LABEL,
	STORE_DESC,
	STORE_ORDER,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_STORE.CORPORATION_ID, LKP_STORE.ZONE_ID, LKP_STORE.STORE_ID, LKP_STORE.STORE_NUMBER, LKP_STORE.STORE_LABEL, LKP_STORE.STORE_DESC, LKP_STORE.STORE_ORDER, LKP_STORE.ACTIVE_FLAG, LKP_STORE.EXTRACT_DATE, LKP_STORE.SOURCE_TABLE_NAME, LKP_STORE.CREATE_DATE, LKP_STORE.MAINT_DATE, LKP_STORE.CREATE_UID, LKP_STORE.MAINT_UID, LKP_STORE.DELETE_FLAG, LKP_STORE.DELETE_DATE, LKP_STORE.DELETE_UID From EBIDW.POB.LKP_STORE Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_STORE.STORE_NUMBER;
create or replace view LKP_TERMINAL_CURRENT(
	STORE_ID,
	STORE_NUMBER,
	TERMINAL_ID,
	TERMINAL_CODE,
	TERMINAL_TYPE_CODE,
	TERMINAL_NUMBER,
	TERMINAL_LABEL,
	TERMINAL_DESCRIPTION,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_TERMINAL.STORE_ID, LKP_TERMINAL.STORE_NUMBER, LKP_TERMINAL.TERMINAL_ID, LKP_TERMINAL.TERMINAL_CODE, LKP_TERMINAL.TERMINAL_TYPE_CODE, LKP_TERMINAL.TERMINAL_NUMBER, LKP_TERMINAL.TERMINAL_LABEL, LKP_TERMINAL.TERMINAL_DESCRIPTION, LKP_TERMINAL.ACTIVE_FLAG, LKP_TERMINAL.EXTRACT_DATE, LKP_TERMINAL.SOURCE_TABLE_NAME, LKP_TERMINAL.CREATE_DATE, LKP_TERMINAL.MAINT_DATE, LKP_TERMINAL.CREATE_UID, LKP_TERMINAL.MAINT_UID, LKP_TERMINAL.DELETE_FLAG, LKP_TERMINAL.DELETE_DATE, LKP_TERMINAL.DELETE_UID From EBIDW.TREASURY.LKP_TERMINAL Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_TERMINAL.STORE_NUMBER;
create or replace view LKP_WORLDPAY_MERCHANT_CURRENT(
	WORLDPAY_MERCHANT_ID,
	WORLDPAY_MERCHANT_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT LKP_WORLDPAY_MERCHANT.WORLDPAY_MERCHANT_ID, LKP_WORLDPAY_MERCHANT.WORLDPAY_MERCHANT_NUMBER, LKP_WORLDPAY_MERCHANT.STORE_ID, LKP_WORLDPAY_MERCHANT.SALES_STORE_ID, LKP_WORLDPAY_MERCHANT.STORE_NUMBER, LKP_WORLDPAY_MERCHANT.ACTIVE_FLAG, LKP_WORLDPAY_MERCHANT.EXTRACT_DATE, LKP_WORLDPAY_MERCHANT.SOURCE_TABLE_NAME, LKP_WORLDPAY_MERCHANT.CREATE_DATE, LKP_WORLDPAY_MERCHANT.MAINT_DATE, LKP_WORLDPAY_MERCHANT.CREATE_UID, LKP_WORLDPAY_MERCHANT.MAINT_UID, LKP_WORLDPAY_MERCHANT.DELETE_FLAG, LKP_WORLDPAY_MERCHANT.DELETE_DATE, LKP_WORLDPAY_MERCHANT.DELETE_UID From EBIDW.TREASURY.LKP_WORLDPAY_MERCHANT Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=LKP_WORLDPAY_MERCHANT.STORE_NUMBER WHERE (LKP_WORLDPAY_MERCHANT.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view RAW_INVOICE_EDIT_CURRENT(
	EDIT_HEADER_ID,
	VENDOR_ID,
	AP_VENDOR_ID,
	VENDOR_NUMBER,
	START_DATE,
	END_DATE,
	SKU_LIST,
	ORIGINAL_COST,
	FINAL_COST,
	DIVISION_NUMBER,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	INVOICE_ID,
	SEQUENCE_NUMBER,
	ITEM_DESCRIPTION,
	DEPARTMENT_NAME,
	CATEGORY_MANAGER,
	FINAL_PACK_QUANTITY,
	ORIGINAL_BILL_AMOUNT,
	INVOICE_DATE,
	INVOICE_FISCAL_DAY_ID,
	PRIMARY_ITEM_ID,
	PRIMARY_MERCH_ITEM_ID,
	PRIMARY_UPC,
	ACTUAL_ITEM_ID,
	ACTUAL_MERCH_ITEM_ID,
	ACTUAL_UPC,
	EFFECTIVE_DATE,
	EFFECTIVE_FISCAL_DAY_ID,
	LOAD_TIMESTAMP,
	UPDATE_TIMESTAMP,
	SOURCE_TABLE_NAME,
	EXTRACT_DATE,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT RAW_INVOICE_EDIT.EDIT_HEADER_ID, RAW_INVOICE_EDIT.VENDOR_ID, RAW_INVOICE_EDIT.AP_VENDOR_ID, RAW_INVOICE_EDIT.VENDOR_NUMBER, RAW_INVOICE_EDIT.START_DATE, RAW_INVOICE_EDIT.END_DATE, RAW_INVOICE_EDIT.SKU_LIST, RAW_INVOICE_EDIT.ORIGINAL_COST, RAW_INVOICE_EDIT.FINAL_COST, RAW_INVOICE_EDIT.DIVISION_NUMBER, RAW_INVOICE_EDIT.STORE_ID, RAW_INVOICE_EDIT.SALES_STORE_ID, RAW_INVOICE_EDIT.STORE_NUMBER, RAW_INVOICE_EDIT.INVOICE_ID, RAW_INVOICE_EDIT.SEQUENCE_NUMBER, RAW_INVOICE_EDIT.ITEM_DESCRIPTION, RAW_INVOICE_EDIT.DEPARTMENT_NAME, RAW_INVOICE_EDIT.CATEGORY_MANAGER, RAW_INVOICE_EDIT.FINAL_PACK_QUANTITY, RAW_INVOICE_EDIT.ORIGINAL_BILL_AMOUNT, RAW_INVOICE_EDIT.INVOICE_DATE, RAW_INVOICE_EDIT.INVOICE_FISCAL_DAY_ID, RAW_INVOICE_EDIT.PRIMARY_ITEM_ID, RAW_INVOICE_EDIT.PRIMARY_MERCH_ITEM_ID, RAW_INVOICE_EDIT.PRIMARY_UPC, RAW_INVOICE_EDIT.ACTUAL_ITEM_ID, RAW_INVOICE_EDIT.ACTUAL_MERCH_ITEM_ID, RAW_INVOICE_EDIT.ACTUAL_UPC, RAW_INVOICE_EDIT.EFFECTIVE_DATE, RAW_INVOICE_EDIT.EFFECTIVE_FISCAL_DAY_ID, RAW_INVOICE_EDIT.LOAD_TIMESTAMP, RAW_INVOICE_EDIT.UPDATE_TIMESTAMP, RAW_INVOICE_EDIT.SOURCE_TABLE_NAME, RAW_INVOICE_EDIT.EXTRACT_DATE, RAW_INVOICE_EDIT.CREATE_DATE, RAW_INVOICE_EDIT.MAINT_DATE, RAW_INVOICE_EDIT.CREATE_UID, RAW_INVOICE_EDIT.MAINT_UID, RAW_INVOICE_EDIT.DELETE_FLAG, RAW_INVOICE_EDIT.DELETE_DATE, RAW_INVOICE_EDIT.DELETE_UID From EBIDW.PI.RAW_INVOICE_EDIT Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=RAW_INVOICE_EDIT.STORE_NUMBER WHERE (RAW_INVOICE_EDIT.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view RAW_STACK_ERROR_OUTPUT_CURRENT(
	STACK_OUTPUT_ID,
	EVENT,
	CLASS,
	CLASS_RANK,
	BATCH_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	ITEM_ID,
	MERCH_ITEM_ID,
	PRIMARY_UPC,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	TRANSACTION_FISCAL_DAY_ID,
	TRANSACTION_TIME,
	IS_DECIMAL_QUANTITY,
	REVERSE_MARGIN_PERCENT,
	QUANTITY,
	UNIT_VALUE,
	REFERENCE_QUANTITY1,
	REFERENCE_QUANTITY2,
	REFERENCE_VALUE1,
	REFERENCE_VALUE2,
	REFERENCE_DATE1,
	REFERENCE_DATE2,
	REFERENCE,
	SOURCE_NAME,
	SOURCE_ID,
	OUTPUT_QUANTITY,
	OUTPUT_AVG_UNIT_VALUE,
	OUTPUT_EXTENDED_VALUE,
	OUTPUT_REFERENCE,
	OUTPUT_ERROR_MESSAGE,
	RECORD_COUNT,
	NEW_RECORD_FLAG,
	SOURCE_TABLE_NAME,
	EXTRACT_DATE,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT RAW_STACK_ERROR_OUTPUT.STACK_OUTPUT_ID, RAW_STACK_ERROR_OUTPUT.EVENT, RAW_STACK_ERROR_OUTPUT."CLASS", RAW_STACK_ERROR_OUTPUT.CLASS_RANK, RAW_STACK_ERROR_OUTPUT.BATCH_ID, RAW_STACK_ERROR_OUTPUT.STORE_ID, RAW_STACK_ERROR_OUTPUT.SALES_STORE_ID, RAW_STACK_ERROR_OUTPUT.STORE_NUMBER, RAW_STACK_ERROR_OUTPUT.ITEM_ID, RAW_STACK_ERROR_OUTPUT.MERCH_ITEM_ID, RAW_STACK_ERROR_OUTPUT.PRIMARY_UPC, RAW_STACK_ERROR_OUTPUT.BUSINESS_FISCAL_DAY_ID, RAW_STACK_ERROR_OUTPUT.BUSINESS_DATE, RAW_STACK_ERROR_OUTPUT.TRANSACTION_FISCAL_DAY_ID, RAW_STACK_ERROR_OUTPUT.TRANSACTION_TIME, RAW_STACK_ERROR_OUTPUT.IS_DECIMAL_QUANTITY, RAW_STACK_ERROR_OUTPUT.REVERSE_MARGIN_PERCENT, RAW_STACK_ERROR_OUTPUT.QUANTITY, RAW_STACK_ERROR_OUTPUT.UNIT_VALUE, RAW_STACK_ERROR_OUTPUT.REFERENCE_QUANTITY1, RAW_STACK_ERROR_OUTPUT.REFERENCE_QUANTITY2, RAW_STACK_ERROR_OUTPUT.REFERENCE_VALUE1, RAW_STACK_ERROR_OUTPUT.REFERENCE_VALUE2, RAW_STACK_ERROR_OUTPUT.REFERENCE_DATE1, RAW_STACK_ERROR_OUTPUT.REFERENCE_DATE2, RAW_STACK_ERROR_OUTPUT.REFERENCE, RAW_STACK_ERROR_OUTPUT.SOURCE_NAME, RAW_STACK_ERROR_OUTPUT.SOURCE_ID, RAW_STACK_ERROR_OUTPUT.OUTPUT_QUANTITY, RAW_STACK_ERROR_OUTPUT.OUTPUT_AVG_UNIT_VALUE, RAW_STACK_ERROR_OUTPUT.OUTPUT_EXTENDED_VALUE, RAW_STACK_ERROR_OUTPUT.OUTPUT_REFERENCE, RAW_STACK_ERROR_OUTPUT.OUTPUT_ERROR_MESSAGE, RAW_STACK_ERROR_OUTPUT.RECORD_COUNT, RAW_STACK_ERROR_OUTPUT.NEW_RECORD_FLAG, RAW_STACK_ERROR_OUTPUT.SOURCE_TABLE_NAME, RAW_STACK_ERROR_OUTPUT.EXTRACT_DATE, RAW_STACK_ERROR_OUTPUT.CREATE_DATE, RAW_STACK_ERROR_OUTPUT.MAINT_DATE, RAW_STACK_ERROR_OUTPUT.CREATE_UID, RAW_STACK_ERROR_OUTPUT.MAINT_UID, RAW_STACK_ERROR_OUTPUT.DELETE_FLAG, RAW_STACK_ERROR_OUTPUT.DELETE_DATE, RAW_STACK_ERROR_OUTPUT.DELETE_UID From EBIDW.PI.RAW_STACK_ERROR_OUTPUT Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=RAW_STACK_ERROR_OUTPUT.STORE_NUMBER;
create or replace view RAW_STACK_OUTPUT_CURRENT(
	STACK_OUTPUT_ID,
	EVENT,
	CLASS,
	CLASS_RANK,
	BATCH_ID,
	STORE_ID,
	SALES_STORE_ID,
	STORE_NUMBER,
	ITEM_ID,
	MERCH_ITEM_ID,
	PRIMARY_UPC,
	BUSINESS_FISCAL_DAY_ID,
	BUSINESS_DATE,
	TRANSACTION_FISCAL_DAY_ID,
	TRANSACTION_TIME,
	IS_DECIMAL_QUANTITY,
	REVERSE_MARGIN_PERCENT,
	QUANTITY,
	UNIT_VALUE,
	REFERENCE_QUANTITY1,
	REFERENCE_QUANTITY2,
	REFERENCE_VALUE1,
	REFERENCE_VALUE2,
	REFERENCE_DATE1,
	REFERENCE_DATE2,
	REFERENCE,
	SOURCE_NAME,
	SOURCE_ID,
	OUTPUT_QUANTITY,
	OUTPUT_AVG_UNIT_VALUE,
	OUTPUT_EXTENDED_VALUE,
	OUTPUT_REFERENCE,
	OUTPUT_ERROR_MESSAGE,
	RECORD_COUNT,
	NEW_RECORD_FLAG,
	SOURCE_TABLE_NAME,
	EXTRACT_DATE,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT RAW_STACK_OUTPUT.STACK_OUTPUT_ID, RAW_STACK_OUTPUT.EVENT, RAW_STACK_OUTPUT."CLASS", RAW_STACK_OUTPUT.CLASS_RANK, RAW_STACK_OUTPUT.BATCH_ID, RAW_STACK_OUTPUT.STORE_ID, RAW_STACK_OUTPUT.SALES_STORE_ID, RAW_STACK_OUTPUT.STORE_NUMBER, RAW_STACK_OUTPUT.ITEM_ID, RAW_STACK_OUTPUT.MERCH_ITEM_ID, RAW_STACK_OUTPUT.PRIMARY_UPC, RAW_STACK_OUTPUT.BUSINESS_FISCAL_DAY_ID, RAW_STACK_OUTPUT.BUSINESS_DATE, RAW_STACK_OUTPUT.TRANSACTION_FISCAL_DAY_ID, RAW_STACK_OUTPUT.TRANSACTION_TIME, RAW_STACK_OUTPUT.IS_DECIMAL_QUANTITY, RAW_STACK_OUTPUT.REVERSE_MARGIN_PERCENT, RAW_STACK_OUTPUT.QUANTITY, RAW_STACK_OUTPUT.UNIT_VALUE, RAW_STACK_OUTPUT.REFERENCE_QUANTITY1, RAW_STACK_OUTPUT.REFERENCE_QUANTITY2, RAW_STACK_OUTPUT.REFERENCE_VALUE1, RAW_STACK_OUTPUT.REFERENCE_VALUE2, RAW_STACK_OUTPUT.REFERENCE_DATE1, RAW_STACK_OUTPUT.REFERENCE_DATE2, RAW_STACK_OUTPUT.REFERENCE, RAW_STACK_OUTPUT.SOURCE_NAME, RAW_STACK_OUTPUT.SOURCE_ID, RAW_STACK_OUTPUT.OUTPUT_QUANTITY, RAW_STACK_OUTPUT.OUTPUT_AVG_UNIT_VALUE, RAW_STACK_OUTPUT.OUTPUT_EXTENDED_VALUE, RAW_STACK_OUTPUT.OUTPUT_REFERENCE, RAW_STACK_OUTPUT.OUTPUT_ERROR_MESSAGE, RAW_STACK_OUTPUT.RECORD_COUNT, RAW_STACK_OUTPUT.NEW_RECORD_FLAG, RAW_STACK_OUTPUT.SOURCE_TABLE_NAME, RAW_STACK_OUTPUT.EXTRACT_DATE, RAW_STACK_OUTPUT.CREATE_DATE, RAW_STACK_OUTPUT.MAINT_DATE, RAW_STACK_OUTPUT.CREATE_UID, RAW_STACK_OUTPUT.MAINT_UID, RAW_STACK_OUTPUT.DELETE_FLAG, RAW_STACK_OUTPUT.DELETE_DATE, RAW_STACK_OUTPUT.DELETE_UID From EBIDW.PI.RAW_STACK_OUTPUT Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=  RAW_STACK_OUTPUT.STORE_NUMBER WHERE (RAW_STACK_OUTPUT.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view RPT_RECONCILIATION_CURRENT(
	FISCAL_DAY_ID,
	STORE_ID,
	TERMINAL_OR_TILL_ID,
	MATCH_LEVEL,
	SOURCE,
	RECONCILIATION_TYPE_CODE,
	CHECKS_IN_VALUE,
	CASH_IN_VALUE,
	CASH_BACK_VALUE,
	DEPOSIT_VALUE,
	DEPOSIT_CHECKS_VALUE,
	DEPOSIT_CASH_VALUE,
	PAYMENT_VALUE,
	PAYMENT_CHECKS_VALUE,
	PAYMENT_CASH_VALUE,
	WITHDRAWL_VALUE,
	CHECKS_CASHED_VALUE,
	PAYMENT_FEES_VALUE,
	CHECK_CHARGES_VALUE,
	RETURN_CHECK_PAID_VALUE,
	EBT_VOUCHERS_VALUE,
	DEPOSIT_ADJUSTMENT_VALUE,
	PAYMENT_ADJUSTMENT_VALUE,
	WITHDRAWL_ADJUSTMENT_VALUE,
	PC_PAY_CHECKS_VALUE,
	POB_CHECKS_VALUE,
	CHECK_TOTAL_VALUE,
	WESTERN_UNION_SEND_CASH_COUNT,
	WESTERN_UNION_SEND_CASH_VALUE,
	WESTERN_UNION_SEND_CASH_FEE_COUNT,
	WESTERN_UNION_SEND_CASH_FEE_VALUE,
	WESTERN_UNION_SEND_DEBIT_COUNT,
	WESTERN_UNION_SEND_DEBIT_VALUE,
	WESTERN_UNION_SEND_DEBIT_FEE_COUNT,
	WESTERN_UNION_SEND_DEBIT_FEE_VALUE,
	WESTERN_UNION_RECEIVE_COUNT,
	WESTERN_UNION_RECEIVE_VALUE
) as SELECT RPT_RECONCILIATION.FISCAL_DAY_ID, RPT_RECONCILIATION.STORE_ID, RPT_RECONCILIATION.TERMINAL_OR_TILL_ID, RPT_RECONCILIATION.MATCH_LEVEL, RPT_RECONCILIATION.SOURCE, RPT_RECONCILIATION.RECONCILIATION_TYPE_CODE, RPT_RECONCILIATION.CHECKS_IN_VALUE, RPT_RECONCILIATION.CASH_IN_VALUE, RPT_RECONCILIATION.CASH_BACK_VALUE, RPT_RECONCILIATION.DEPOSIT_VALUE, RPT_RECONCILIATION.DEPOSIT_CHECKS_VALUE, RPT_RECONCILIATION.DEPOSIT_CASH_VALUE, RPT_RECONCILIATION.PAYMENT_VALUE, RPT_RECONCILIATION.PAYMENT_CHECKS_VALUE, RPT_RECONCILIATION.PAYMENT_CASH_VALUE, RPT_RECONCILIATION.WITHDRAWL_VALUE, RPT_RECONCILIATION.CHECKS_CASHED_VALUE, RPT_RECONCILIATION.PAYMENT_FEES_VALUE, RPT_RECONCILIATION.CHECK_CHARGES_VALUE, RPT_RECONCILIATION.RETURN_CHECK_PAID_VALUE, RPT_RECONCILIATION.EBT_VOUCHERS_VALUE, RPT_RECONCILIATION.DEPOSIT_ADJUSTMENT_VALUE, RPT_RECONCILIATION.PAYMENT_ADJUSTMENT_VALUE, RPT_RECONCILIATION.WITHDRAWL_ADJUSTMENT_VALUE, RPT_RECONCILIATION.PC_PAY_CHECKS_VALUE, RPT_RECONCILIATION.POB_CHECKS_VALUE, RPT_RECONCILIATION.CHECK_TOTAL_VALUE, RPT_RECONCILIATION.WESTERN_UNION_SEND_CASH_COUNT, RPT_RECONCILIATION.WESTERN_UNION_SEND_CASH_VALUE, RPT_RECONCILIATION.WESTERN_UNION_SEND_CASH_FEE_COUNT, RPT_RECONCILIATION.WESTERN_UNION_SEND_CASH_FEE_VALUE, RPT_RECONCILIATION.WESTERN_UNION_SEND_DEBIT_COUNT, RPT_RECONCILIATION.WESTERN_UNION_SEND_DEBIT_VALUE, RPT_RECONCILIATION.WESTERN_UNION_SEND_DEBIT_FEE_COUNT, RPT_RECONCILIATION.WESTERN_UNION_SEND_DEBIT_FEE_VALUE, RPT_RECONCILIATION.WESTERN_UNION_RECEIVE_COUNT, RPT_RECONCILIATION.WESTERN_UNION_RECEIVE_VALUE From EBIDW.POB.RPT_RECONCILIATION Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.STORE_ID=RPT_RECONCILIATION.STORE_ID;
create or replace view RPT_RECONCILIATION_POB_NCS_CURRENT(
	FISCAL_DAY_ID,
	STORE_ID,
	TERMINAL_OR_TILL_ID,
	MATCH_LEVEL,
	SOURCE,
	CHECKS_IN_VALUE,
	CASH_IN_VALUE,
	CASH_BACK_VALUE,
	DEPOSIT_VALUE,
	PAYMENT_VALUE,
	WITHDRAWAL_VALUE,
	CHECKS_CASHED_VALUE,
	PAYMENT_FEES_VALUE,
	CHECK_CHARGES_VALUE,
	RETURN_CHECK_PAID_VALUE,
	DEPOSIT_ADJUSTMENT_VALUE,
	PAYMENT_ADJUSTMENT_VALUE,
	WITHDRAWAL_ADJUSTMENT_VALUE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT RPT_RECONCILIATION_POB_NCS.FISCAL_DAY_ID, RPT_RECONCILIATION_POB_NCS.STORE_ID, RPT_RECONCILIATION_POB_NCS.TERMINAL_OR_TILL_ID, RPT_RECONCILIATION_POB_NCS.MATCH_LEVEL, RPT_RECONCILIATION_POB_NCS.SOURCE, RPT_RECONCILIATION_POB_NCS.CHECKS_IN_VALUE, RPT_RECONCILIATION_POB_NCS.CASH_IN_VALUE, RPT_RECONCILIATION_POB_NCS.CASH_BACK_VALUE, RPT_RECONCILIATION_POB_NCS.DEPOSIT_VALUE, RPT_RECONCILIATION_POB_NCS.PAYMENT_VALUE, RPT_RECONCILIATION_POB_NCS.WITHDRAWAL_VALUE, RPT_RECONCILIATION_POB_NCS.CHECKS_CASHED_VALUE, RPT_RECONCILIATION_POB_NCS.PAYMENT_FEES_VALUE, RPT_RECONCILIATION_POB_NCS.CHECK_CHARGES_VALUE, RPT_RECONCILIATION_POB_NCS.RETURN_CHECK_PAID_VALUE, RPT_RECONCILIATION_POB_NCS.DEPOSIT_ADJUSTMENT_VALUE, RPT_RECONCILIATION_POB_NCS.PAYMENT_ADJUSTMENT_VALUE, RPT_RECONCILIATION_POB_NCS.WITHDRAWAL_ADJUSTMENT_VALUE, RPT_RECONCILIATION_POB_NCS.ACTIVE_FLAG, RPT_RECONCILIATION_POB_NCS.EXTRACT_DATE, RPT_RECONCILIATION_POB_NCS.SOURCE_TABLE_NAME, RPT_RECONCILIATION_POB_NCS.CREATE_DATE, RPT_RECONCILIATION_POB_NCS.MAINT_DATE, RPT_RECONCILIATION_POB_NCS.CREATE_UID, RPT_RECONCILIATION_POB_NCS.MAINT_UID, RPT_RECONCILIATION_POB_NCS.DELETE_FLAG, RPT_RECONCILIATION_POB_NCS.DELETE_DATE, RPT_RECONCILIATION_POB_NCS.DELETE_UID From EBIDW.POB.RPT_RECONCILIATION_POB_NCS Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.STORE_ID=RPT_RECONCILIATION_POB_NCS.STORE_ID;
create or replace view SUM_STORE_PERIOD_METRICS_CURRENT(
	FISCAL_YEAR,
	FISCAL_PERIOD,
	STORE_ID,
	STORE_NUMBER,
	FISCAL_PERIOD_ID,
	PERIOD_START_STORE_STATUS,
	MANAGER_LAST_NAME,
	MANAGER_FIRST_NAME,
	ZONE_NUMBER,
	ZONE_MANAGER_LAST_NAME,
	ZONE_MANAGER_FIRST_NAME,
	REGION_NUMBER,
	REGION_MANAGER_LAST_NAME,
	REGION_MANAGER_FIRST_NAME,
	SALES_PERIOD_ACTUAL,
	SALES_PERIOD_BUDGET,
	SALES_PERIOD_VARIANCE,
	SALES_PERIOD_VARIANCE_PERCENT,
	SALES_YTD_ACTUAL,
	SALES_YTD_BUDGET,
	SALES_YTD_VARIANCE,
	SALES_YTD_VARIANCE_PERCENT,
	SALES_YTD_TARGET,
	SALES_YTD_TARGET_VARIANCE,
	NET_PROFIT_PERIOD_ACTUAL,
	NET_PROFIT_PERIOD_BUDGET,
	NET_PROFIT_PERIOD_VARIANCE,
	NET_PROFIT_PERIOD_VARIANCE_PERCENT,
	NET_PROFIT_YTD_ACTUAL,
	NET_PROFIT_YTD_BUDGET,
	NET_PROFIT_YTD_VARIANCE,
	NET_PROFIT_YTD_VARIANCE_PERCENT,
	NET_PROFIT_YTD_TARGET,
	NET_PROFIT_YTD_TARGET_VARIANCE,
	PAYROLL_PERIOD_ACTUAL,
	PAYROLL_PERIOD_BUDGET,
	PAYROLL_PERIOD_VARIANCE,
	PAYROLL_PERIOD_VARIANCE_PERCENT,
	PAYROLL_YTD_ACTUAL,
	PAYROLL_YTD_BUDGET,
	PAYROLL_YTD_VARIANCE,
	PAYROLL_YTD_VARIANCE_PERCENT,
	PAYROLL_YTD_TARGET,
	PAYROLL_YTD_TARGET_VARIANCE,
	WRAPPINGS_PERIOD_ACTUAL,
	WRAPPINGS_PERIOD_BUDGET,
	WRAPPINGS_PERIOD_VARIANCE,
	WRAPPINGS_PERIOD_VARIANCE_PERCENT,
	WRAPPINGS_YTD_ACTUAL,
	WRAPPINGS_YTD_BUDGET,
	WRAPPINGS_YTD_VARIANCE,
	WRAPPINGS_YTD_VARIANCE_PERCENT,
	WRAPPINGS_YTD_TARGET,
	WRAPPINGS_YTD_TARGET_VARIANCE,
	SUPPLIES_PERIOD_ACTUAL,
	SUPPLIES_PERIOD_BUDGET,
	SUPPLIES_PERIOD_VARIANCE,
	SUPPLIES_PERIOD_VARIANCE_PERCENT,
	SUPPLIES_YTD_ACTUAL,
	SUPPLIES_YTD_BUDGET,
	SUPPLIES_YTD_VARIANCE,
	SUPPLIES_YTD_VARIANCE_PERCENT,
	SUPPLIES_YTD_TARGET,
	SUPPLIES_YTD_TARGET_VARIANCE,
	CENTER_SHRINK_PERIOD_ACTUAL,
	CENTER_SHRINK_PERIOD_BUDGET,
	CENTER_SHRINK_PERIOD_VARIANCE,
	CENTER_SHRINK_PERIOD_VARIANCE_PERCENT,
	CENTER_SHRINK_PERIOD_PERCENT,
	CENTER_SHRINK_YTD_ACTUAL,
	CENTER_SHRINK_YTD_BUDGET,
	CENTER_SHRINK_YTD_VARIANCE,
	CENTER_SHRINK_YTD_VARIANCE_PERCENT,
	CENTER_SHRINK_YTD_TARGET,
	CENTER_SHRINK_YTD_TARGET_VARIANCE,
	CENTER_SHRINK_YTD_PERCENT,
	FRESH_SHRINK_PERIOD_ACTUAL,
	FRESH_SHRINK_PERIOD_BUDGET,
	FRESH_SHRINK_PERIOD_VARIANCE,
	FRESH_SHRINK_PERIOD_VARIANCE_PERCENT,
	FRESH_SHRINK_PERIOD_PERCENT,
	FRESH_SHRINK_YTD_ACTUAL,
	FRESH_SHRINK_YTD_BUDGET,
	FRESH_SHRINK_YTD_ACTUAL_SALES,
	FRESH_SHRINK_YTD_BUDGET_SALES,
	FRESH_SHRINK_YTD_VARIANCE,
	FRESH_SHRINK_YTD_VARIANCE_PERCENT,
	FRESH_SHRINK_YTD_TARGET,
	FRESH_SHRINK_YTD_TARGET_VARIANCE,
	FRESH_SHRINK_YTD_PERCENT,
	CTO_PERIOD_ACTUAL,
	CTO_PERIOD_BUDGET,
	CTO_PERIOD_VARIANCE,
	CTO_PERIOD_VARIANCE_PERCENT,
	CTO_PERIOD_PERCENT,
	CTO_YTD_ACTUAL,
	CTO_YTD_BUDGET,
	CTO_YTD_VARIANCE,
	CTO_YTD_VARIANCE_PERCENT,
	CTO_YTD_TARGET,
	CTO_YTD_TARGET_VARIANCE,
	CTO_YTD_PERCENT,
	CUSTOMER_COUNT,
	CUSTOMER_COUNT_YTD,
	AVERAGE_ORDER_SIZE,
	AVERAGE_ORDER_SIZE_YTD,
	LY_AVERAGE_ORDER_SIZE,
	LY_AVERAGE_ORDER_SIZE_YTD,
	AVERAGE_ORDER_SIZE_PERCENT,
	AVERAGE_ORDER_SIZE_PERCENT_YTD,
	SPEND_SAVE_DOLLARS,
	SPEND_SAVE_DOLLARS_YTD,
	EARNED_HOURS,
	USED_HOURS,
	HOURS_EFFECTIVENESS,
	EARNED_HOURS_YTD,
	USED_HOURS_YTD,
	HOURS_EFFECTIVENESS_YTD,
	PAYROLL_EFFECTIVENESS,
	PAYROLL_EFFECTIVENESS_YTD,
	OPERATING_RATIO,
	OPERATING_RATIO_YTD,
	OPERATING_HITS,
	ZONE_OPERATING_HITS,
	REGION_OPERATING_HITS,
	CHAIN_OPERATING_HITS,
	OPERATING_RATIO_HITS,
	ZONE_OPERATING_RATIO_HITS,
	REGION_OPERATING_RATIO_HITS,
	CHAIN_OPERATING_RATIO_HITS,
	OPERATING_HITS_YTD,
	ZONE_OPERATING_HITS_YTD,
	REGION_OPERATING_HITS_YTD,
	CHAIN_OPERATING_HITS_YTD,
	OPERATING_RATIO_HITS_YTD,
	ZONE_OPERATING_RATIO_HITS_YTD,
	REGION_OPERATING_RATIO_HITS_YTD,
	CHAIN_OPERATING_RATIO_HITS_YTD,
	OVERTIME_DOLLARS,
	OVERTIME_HOURS,
	OVERTIME_PERCENT,
	OVERTIME_DOLLARS_YTD,
	OVERTIME_HOURS_YTD,
	OVERTIME_PERCENT_YTD,
	OVERTIME_MANAGEMENT_ABOVE_40,
	OVERTIME_MANAGEMENT_ABOVE_40_YTD,
	MYSTERY_SHOPS,
	MYSTERY_SHOPS_YTD,
	RETAIL_FEEDBACK_GROUP_COUNT,
	RETAIL_FEEDBACK_GROUP_COUNT_YTD,
	RETAIL_FEEDBACK_GROUP_COUNT_WEIGHTED_YTD,
	RETAIL_FEEDBACK_GROUP,
	RETAIL_FEEDBACK_GROUP_YTD,
	SAFETY_INCIDENTS_REPORTED,
	SAFETY_CALCULATED_HOURS,
	ALL_IN_RATE,
	SAFETY_INCIDENTS_REPORTED_YTD,
	SAFETY_CALCULATED_HOURS_YTD,
	ALL_IN_RATE_YTD,
	PROCHECK_SCORE,
	PROCHECK_SCORE_YTD,
	RECALL_EVENTS,
	RECALL_HITS,
	RECALL_SUCCESS_RATE,
	RECALL_EVENTS_YTD,
	RECALL_HITS_YTD,
	RECALL_SUCCESS_RATE_YTD,
	GENERAL_LIABILITY_INCIDENTS,
	GENERAL_LIABILITY_INCIDENTS_YTD,
	GENERAL_LIABILITY_RATE,
	GENERAL_LIABILITY_RATE_YTD,
	OUT_OF_STOCK_NUMBER,
	OUT_OF_STOCK_NUMBER_YTD,
	OUT_OF_STOCK_VARIANCE,
	OUT_OF_STOCK_YTD_VARIANCE,
	STAFFING_FULL_TIME,
	STAFFING_PART_TIME,
	STAFFING_FULL_TIME_YTD,
	STAFFING_PART_TIME_YTD,
	STAFFING_PT_FT_RATIO,
	STAFFING_PT_FT_RATIO_YTD,
	SELLING_INITIATIVES,
	SELLING_INITIATIVES_YTD,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT SUM_STORE_PERIOD_METRICS.FISCAL_YEAR, SUM_STORE_PERIOD_METRICS.FISCAL_PERIOD, SUM_STORE_PERIOD_METRICS.STORE_ID, SUM_STORE_PERIOD_METRICS.STORE_NUMBER, SUM_STORE_PERIOD_METRICS.FISCAL_PERIOD_ID, SUM_STORE_PERIOD_METRICS.PERIOD_START_STORE_STATUS, SUM_STORE_PERIOD_METRICS.MANAGER_LAST_NAME, SUM_STORE_PERIOD_METRICS.MANAGER_FIRST_NAME, SUM_STORE_PERIOD_METRICS.ZONE_NUMBER, SUM_STORE_PERIOD_METRICS.ZONE_MANAGER_LAST_NAME, SUM_STORE_PERIOD_METRICS.ZONE_MANAGER_FIRST_NAME, SUM_STORE_PERIOD_METRICS.REGION_NUMBER, SUM_STORE_PERIOD_METRICS.REGION_MANAGER_LAST_NAME, SUM_STORE_PERIOD_METRICS.REGION_MANAGER_FIRST_NAME, SUM_STORE_PERIOD_METRICS.SALES_PERIOD_ACTUAL, SUM_STORE_PERIOD_METRICS.SALES_PERIOD_BUDGET, SUM_STORE_PERIOD_METRICS.SALES_PERIOD_VARIANCE, SUM_STORE_PERIOD_METRICS.SALES_PERIOD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.SALES_YTD_ACTUAL, SUM_STORE_PERIOD_METRICS.SALES_YTD_BUDGET, SUM_STORE_PERIOD_METRICS.SALES_YTD_VARIANCE, SUM_STORE_PERIOD_METRICS.SALES_YTD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.SALES_YTD_TARGET, SUM_STORE_PERIOD_METRICS.SALES_YTD_TARGET_VARIANCE, SUM_STORE_PERIOD_METRICS.NET_PROFIT_PERIOD_ACTUAL, SUM_STORE_PERIOD_METRICS.NET_PROFIT_PERIOD_BUDGET, SUM_STORE_PERIOD_METRICS.NET_PROFIT_PERIOD_VARIANCE, SUM_STORE_PERIOD_METRICS.NET_PROFIT_PERIOD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.NET_PROFIT_YTD_ACTUAL, SUM_STORE_PERIOD_METRICS.NET_PROFIT_YTD_BUDGET, SUM_STORE_PERIOD_METRICS.NET_PROFIT_YTD_VARIANCE, SUM_STORE_PERIOD_METRICS.NET_PROFIT_YTD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.NET_PROFIT_YTD_TARGET, SUM_STORE_PERIOD_METRICS.NET_PROFIT_YTD_TARGET_VARIANCE, SUM_STORE_PERIOD_METRICS.PAYROLL_PERIOD_ACTUAL, SUM_STORE_PERIOD_METRICS.PAYROLL_PERIOD_BUDGET, SUM_STORE_PERIOD_METRICS.PAYROLL_PERIOD_VARIANCE, SUM_STORE_PERIOD_METRICS.PAYROLL_PERIOD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.PAYROLL_YTD_ACTUAL, SUM_STORE_PERIOD_METRICS.PAYROLL_YTD_BUDGET, SUM_STORE_PERIOD_METRICS.PAYROLL_YTD_VARIANCE, SUM_STORE_PERIOD_METRICS.PAYROLL_YTD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.PAYROLL_YTD_TARGET, SUM_STORE_PERIOD_METRICS.PAYROLL_YTD_TARGET_VARIANCE, SUM_STORE_PERIOD_METRICS.WRAPPINGS_PERIOD_ACTUAL, SUM_STORE_PERIOD_METRICS.WRAPPINGS_PERIOD_BUDGET, SUM_STORE_PERIOD_METRICS.WRAPPINGS_PERIOD_VARIANCE, SUM_STORE_PERIOD_METRICS.WRAPPINGS_PERIOD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.WRAPPINGS_YTD_ACTUAL, SUM_STORE_PERIOD_METRICS.WRAPPINGS_YTD_BUDGET, SUM_STORE_PERIOD_METRICS.WRAPPINGS_YTD_VARIANCE, SUM_STORE_PERIOD_METRICS.WRAPPINGS_YTD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.WRAPPINGS_YTD_TARGET, SUM_STORE_PERIOD_METRICS.WRAPPINGS_YTD_TARGET_VARIANCE, SUM_STORE_PERIOD_METRICS.SUPPLIES_PERIOD_ACTUAL, SUM_STORE_PERIOD_METRICS.SUPPLIES_PERIOD_BUDGET, SUM_STORE_PERIOD_METRICS.SUPPLIES_PERIOD_VARIANCE, SUM_STORE_PERIOD_METRICS.SUPPLIES_PERIOD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.SUPPLIES_YTD_ACTUAL, SUM_STORE_PERIOD_METRICS.SUPPLIES_YTD_BUDGET, SUM_STORE_PERIOD_METRICS.SUPPLIES_YTD_VARIANCE, SUM_STORE_PERIOD_METRICS.SUPPLIES_YTD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.SUPPLIES_YTD_TARGET, SUM_STORE_PERIOD_METRICS.SUPPLIES_YTD_TARGET_VARIANCE, SUM_STORE_PERIOD_METRICS.CENTER_SHRINK_PERIOD_ACTUAL, SUM_STORE_PERIOD_METRICS.CENTER_SHRINK_PERIOD_BUDGET, SUM_STORE_PERIOD_METRICS.CENTER_SHRINK_PERIOD_VARIANCE, SUM_STORE_PERIOD_METRICS.CENTER_SHRINK_PERIOD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.CENTER_SHRINK_PERIOD_PERCENT, SUM_STORE_PERIOD_METRICS.CENTER_SHRINK_YTD_ACTUAL, SUM_STORE_PERIOD_METRICS.CENTER_SHRINK_YTD_BUDGET, SUM_STORE_PERIOD_METRICS.CENTER_SHRINK_YTD_VARIANCE, SUM_STORE_PERIOD_METRICS.CENTER_SHRINK_YTD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.CENTER_SHRINK_YTD_TARGET, SUM_STORE_PERIOD_METRICS.CENTER_SHRINK_YTD_TARGET_VARIANCE, SUM_STORE_PERIOD_METRICS.CENTER_SHRINK_YTD_PERCENT, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_PERIOD_ACTUAL, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_PERIOD_BUDGET, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_PERIOD_VARIANCE, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_PERIOD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_PERIOD_PERCENT, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_YTD_ACTUAL, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_YTD_BUDGET, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_YTD_ACTUAL_SALES, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_YTD_BUDGET_SALES, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_YTD_VARIANCE, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_YTD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_YTD_TARGET, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_YTD_TARGET_VARIANCE, SUM_STORE_PERIOD_METRICS.FRESH_SHRINK_YTD_PERCENT, SUM_STORE_PERIOD_METRICS.CTO_PERIOD_ACTUAL, SUM_STORE_PERIOD_METRICS.CTO_PERIOD_BUDGET, SUM_STORE_PERIOD_METRICS.CTO_PERIOD_VARIANCE, SUM_STORE_PERIOD_METRICS.CTO_PERIOD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.CTO_PERIOD_PERCENT, SUM_STORE_PERIOD_METRICS.CTO_YTD_ACTUAL, SUM_STORE_PERIOD_METRICS.CTO_YTD_BUDGET, SUM_STORE_PERIOD_METRICS.CTO_YTD_VARIANCE, SUM_STORE_PERIOD_METRICS.CTO_YTD_VARIANCE_PERCENT, SUM_STORE_PERIOD_METRICS.CTO_YTD_TARGET, SUM_STORE_PERIOD_METRICS.CTO_YTD_TARGET_VARIANCE, SUM_STORE_PERIOD_METRICS.CTO_YTD_PERCENT, SUM_STORE_PERIOD_METRICS.CUSTOMER_COUNT, SUM_STORE_PERIOD_METRICS.CUSTOMER_COUNT_YTD, SUM_STORE_PERIOD_METRICS.AVERAGE_ORDER_SIZE, SUM_STORE_PERIOD_METRICS.AVERAGE_ORDER_SIZE_YTD, SUM_STORE_PERIOD_METRICS.LY_AVERAGE_ORDER_SIZE, SUM_STORE_PERIOD_METRICS.LY_AVERAGE_ORDER_SIZE_YTD, SUM_STORE_PERIOD_METRICS.AVERAGE_ORDER_SIZE_PERCENT, SUM_STORE_PERIOD_METRICS.AVERAGE_ORDER_SIZE_PERCENT_YTD, SUM_STORE_PERIOD_METRICS.SPEND_SAVE_DOLLARS, SUM_STORE_PERIOD_METRICS.SPEND_SAVE_DOLLARS_YTD, SUM_STORE_PERIOD_METRICS.EARNED_HOURS, SUM_STORE_PERIOD_METRICS.USED_HOURS, SUM_STORE_PERIOD_METRICS.HOURS_EFFECTIVENESS, SUM_STORE_PERIOD_METRICS.EARNED_HOURS_YTD, SUM_STORE_PERIOD_METRICS.USED_HOURS_YTD, SUM_STORE_PERIOD_METRICS.HOURS_EFFECTIVENESS_YTD, SUM_STORE_PERIOD_METRICS.PAYROLL_EFFECTIVENESS, SUM_STORE_PERIOD_METRICS.PAYROLL_EFFECTIVENESS_YTD, SUM_STORE_PERIOD_METRICS.OPERATING_RATIO, SUM_STORE_PERIOD_METRICS.OPERATING_RATIO_YTD, SUM_STORE_PERIOD_METRICS.OPERATING_HITS, SUM_STORE_PERIOD_METRICS.ZONE_OPERATING_HITS, SUM_STORE_PERIOD_METRICS.REGION_OPERATING_HITS, SUM_STORE_PERIOD_METRICS.CHAIN_OPERATING_HITS, SUM_STORE_PERIOD_METRICS.OPERATING_RATIO_HITS, SUM_STORE_PERIOD_METRICS.ZONE_OPERATING_RATIO_HITS, SUM_STORE_PERIOD_METRICS.REGION_OPERATING_RATIO_HITS, SUM_STORE_PERIOD_METRICS.CHAIN_OPERATING_RATIO_HITS, SUM_STORE_PERIOD_METRICS.OPERATING_HITS_YTD, SUM_STORE_PERIOD_METRICS.ZONE_OPERATING_HITS_YTD, SUM_STORE_PERIOD_METRICS.REGION_OPERATING_HITS_YTD, SUM_STORE_PERIOD_METRICS.CHAIN_OPERATING_HITS_YTD, SUM_STORE_PERIOD_METRICS.OPERATING_RATIO_HITS_YTD, SUM_STORE_PERIOD_METRICS.ZONE_OPERATING_RATIO_HITS_YTD, SUM_STORE_PERIOD_METRICS.REGION_OPERATING_RATIO_HITS_YTD, SUM_STORE_PERIOD_METRICS.CHAIN_OPERATING_RATIO_HITS_YTD, SUM_STORE_PERIOD_METRICS.OVERTIME_DOLLARS, SUM_STORE_PERIOD_METRICS.OVERTIME_HOURS, SUM_STORE_PERIOD_METRICS.OVERTIME_PERCENT, SUM_STORE_PERIOD_METRICS.OVERTIME_DOLLARS_YTD, SUM_STORE_PERIOD_METRICS.OVERTIME_HOURS_YTD, SUM_STORE_PERIOD_METRICS.OVERTIME_PERCENT_YTD, SUM_STORE_PERIOD_METRICS.OVERTIME_MANAGEMENT_ABOVE_40, SUM_STORE_PERIOD_METRICS.OVERTIME_MANAGEMENT_ABOVE_40_YTD, SUM_STORE_PERIOD_METRICS.MYSTERY_SHOPS, SUM_STORE_PERIOD_METRICS.MYSTERY_SHOPS_YTD, SUM_STORE_PERIOD_METRICS.RETAIL_FEEDBACK_GROUP_COUNT, SUM_STORE_PERIOD_METRICS.RETAIL_FEEDBACK_GROUP_COUNT_YTD, SUM_STORE_PERIOD_METRICS.RETAIL_FEEDBACK_GROUP_COUNT_WEIGHTED_YTD, SUM_STORE_PERIOD_METRICS.RETAIL_FEEDBACK_GROUP, SUM_STORE_PERIOD_METRICS.RETAIL_FEEDBACK_GROUP_YTD, SUM_STORE_PERIOD_METRICS.SAFETY_INCIDENTS_REPORTED, SUM_STORE_PERIOD_METRICS.SAFETY_CALCULATED_HOURS, SUM_STORE_PERIOD_METRICS.ALL_IN_RATE, SUM_STORE_PERIOD_METRICS.SAFETY_INCIDENTS_REPORTED_YTD, SUM_STORE_PERIOD_METRICS.SAFETY_CALCULATED_HOURS_YTD, SUM_STORE_PERIOD_METRICS.ALL_IN_RATE_YTD, SUM_STORE_PERIOD_METRICS.PROCHECK_SCORE, SUM_STORE_PERIOD_METRICS.PROCHECK_SCORE_YTD, SUM_STORE_PERIOD_METRICS.RECALL_EVENTS, SUM_STORE_PERIOD_METRICS.RECALL_HITS, SUM_STORE_PERIOD_METRICS.RECALL_SUCCESS_RATE, SUM_STORE_PERIOD_METRICS.RECALL_EVENTS_YTD, SUM_STORE_PERIOD_METRICS.RECALL_HITS_YTD, SUM_STORE_PERIOD_METRICS.RECALL_SUCCESS_RATE_YTD, SUM_STORE_PERIOD_METRICS.GENERAL_LIABILITY_INCIDENTS, SUM_STORE_PERIOD_METRICS.GENERAL_LIABILITY_INCIDENTS_YTD, SUM_STORE_PERIOD_METRICS.GENERAL_LIABILITY_RATE, SUM_STORE_PERIOD_METRICS.GENERAL_LIABILITY_RATE_YTD, SUM_STORE_PERIOD_METRICS.OUT_OF_STOCK_NUMBER, SUM_STORE_PERIOD_METRICS.OUT_OF_STOCK_NUMBER_YTD, SUM_STORE_PERIOD_METRICS.OUT_OF_STOCK_VARIANCE, SUM_STORE_PERIOD_METRICS.OUT_OF_STOCK_YTD_VARIANCE, SUM_STORE_PERIOD_METRICS.STAFFING_FULL_TIME, SUM_STORE_PERIOD_METRICS.STAFFING_PART_TIME, SUM_STORE_PERIOD_METRICS.STAFFING_FULL_TIME_YTD, SUM_STORE_PERIOD_METRICS.STAFFING_PART_TIME_YTD, SUM_STORE_PERIOD_METRICS.STAFFING_PT_FT_RATIO, SUM_STORE_PERIOD_METRICS.STAFFING_PT_FT_RATIO_YTD, SUM_STORE_PERIOD_METRICS.SELLING_INITIATIVES, SUM_STORE_PERIOD_METRICS.SELLING_INITIATIVES_YTD, SUM_STORE_PERIOD_METRICS.SOURCE_TABLE_NAME, SUM_STORE_PERIOD_METRICS.CREATE_DATE, SUM_STORE_PERIOD_METRICS.MAINT_DATE, SUM_STORE_PERIOD_METRICS.CREATE_UID, SUM_STORE_PERIOD_METRICS.MAINT_UID, SUM_STORE_PERIOD_METRICS.DELETE_FLAG, SUM_STORE_PERIOD_METRICS.DELETE_DATE, SUM_STORE_PERIOD_METRICS.DELETE_UID From EBIDW.ADMIN.SUM_STORE_PERIOD_METRICS Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=SUM_STORE_PERIOD_METRICS.STORE_NUMBER;
create or replace view SUM_STORE_SCORECARD_CURRENT(
	FISCAL_YEAR,
	FISCAL_PERIOD,
	STORE_ID,
	STORE_NUMBER,
	FISCAL_PERIOD_ID,
	OVERALL_OPS_SCORE,
	OPERATING_RATIO_SCORE,
	OPERATING_RATIO_HITS_SCORE,
	SPEND_SAVE_SCORE,
	OVERTIME_PERCENT_SCORE,
	OVERTIME_MANAGEMENT_ABOVE_40_SCORE,
	MYSTERY_SHOPS_SCORE,
	RETAIL_FEEDBACK_GROUP_SCORE,
	CENTER_SHRINK_SCORE,
	FRESH_SHRINK_SCORE,
	CTO_SCORE,
	ALL_IN_RATE_SCORE,
	PROCHECK_SCORE,
	RECALL_SUCCESS_RATE_SCORE,
	GENERAL_LIABILITY_RATE_SCORE,
	WRAP_SCORE,
	SUPPLIES_SCORE,
	OUT_OF_STOCK_SCORE,
	STAFFING_PT_FT_RATIO_SCORE,
	SELLING_INITIATIVES_SCORE,
	BACKROOM_SCORE,
	BAGS_SCORE,
	SMALL_EQUIPMENT_SCORE,
	OPERATING_RATIO_WEIGHT,
	OPERATING_RATIO_HITS_WEIGHT,
	SPEND_SAVE_WEIGHT,
	OVERTIME_PERCENT_WEIGHT,
	OVERTIME_MANAGEMENT_ABOVE_40_WEIGHT,
	MYSTERY_SHOPS_WEIGHT,
	RETAIL_FEEDBACK_GROUP_WEIGHT,
	CENTER_SHRINK_WEIGHT,
	FRESH_SHRINK_WEIGHT,
	CTO_WEIGHT,
	ALL_IN_RATE_WEIGHT,
	PROCHECK_WEIGHT,
	RECALL_SUCCESS_RATE_WEIGHT,
	GENERAL_LIABILITY_RATE_WEIGHT,
	WRAP_WEIGHT,
	SUPPLIES_WEIGHT,
	OUT_OF_STOCK_WEIGHT,
	STAFFING_PT_FT_RATIO_WEIGHT,
	SELLING_INITIATIVES_WEIGHT,
	BACKROOM_WEIGHT,
	BAGS_WEIGHT,
	SMALL_EQUIPMENT_WEIGHT,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT SUM_STORE_SCORECARD.FISCAL_YEAR, SUM_STORE_SCORECARD.FISCAL_PERIOD, SUM_STORE_SCORECARD.STORE_ID, SUM_STORE_SCORECARD.STORE_NUMBER, SUM_STORE_SCORECARD.FISCAL_PERIOD_ID, SUM_STORE_SCORECARD.OVERALL_OPS_SCORE, SUM_STORE_SCORECARD.OPERATING_RATIO_SCORE, SUM_STORE_SCORECARD.OPERATING_RATIO_HITS_SCORE, SUM_STORE_SCORECARD.SPEND_SAVE_SCORE, SUM_STORE_SCORECARD.OVERTIME_PERCENT_SCORE, SUM_STORE_SCORECARD.OVERTIME_MANAGEMENT_ABOVE_40_SCORE, SUM_STORE_SCORECARD.MYSTERY_SHOPS_SCORE, SUM_STORE_SCORECARD.RETAIL_FEEDBACK_GROUP_SCORE, SUM_STORE_SCORECARD.CENTER_SHRINK_SCORE, SUM_STORE_SCORECARD.FRESH_SHRINK_SCORE, SUM_STORE_SCORECARD.CTO_SCORE, SUM_STORE_SCORECARD.ALL_IN_RATE_SCORE, SUM_STORE_SCORECARD.PROCHECK_SCORE, SUM_STORE_SCORECARD.RECALL_SUCCESS_RATE_SCORE, SUM_STORE_SCORECARD.GENERAL_LIABILITY_RATE_SCORE, SUM_STORE_SCORECARD.WRAP_SCORE, SUM_STORE_SCORECARD.SUPPLIES_SCORE, SUM_STORE_SCORECARD.OUT_OF_STOCK_SCORE, SUM_STORE_SCORECARD.STAFFING_PT_FT_RATIO_SCORE, SUM_STORE_SCORECARD.SELLING_INITIATIVES_SCORE, SUM_STORE_SCORECARD.BACKROOM_SCORE, SUM_STORE_SCORECARD.BAGS_SCORE, SUM_STORE_SCORECARD.SMALL_EQUIPMENT_SCORE, SUM_STORE_SCORECARD.OPERATING_RATIO_WEIGHT, SUM_STORE_SCORECARD.OPERATING_RATIO_HITS_WEIGHT, SUM_STORE_SCORECARD.SPEND_SAVE_WEIGHT, SUM_STORE_SCORECARD.OVERTIME_PERCENT_WEIGHT, SUM_STORE_SCORECARD.OVERTIME_MANAGEMENT_ABOVE_40_WEIGHT, SUM_STORE_SCORECARD.MYSTERY_SHOPS_WEIGHT, SUM_STORE_SCORECARD.RETAIL_FEEDBACK_GROUP_WEIGHT, SUM_STORE_SCORECARD.CENTER_SHRINK_WEIGHT, SUM_STORE_SCORECARD.FRESH_SHRINK_WEIGHT, SUM_STORE_SCORECARD.CTO_WEIGHT, SUM_STORE_SCORECARD.ALL_IN_RATE_WEIGHT, SUM_STORE_SCORECARD.PROCHECK_WEIGHT, SUM_STORE_SCORECARD.RECALL_SUCCESS_RATE_WEIGHT, SUM_STORE_SCORECARD.GENERAL_LIABILITY_RATE_WEIGHT, SUM_STORE_SCORECARD.WRAP_WEIGHT, SUM_STORE_SCORECARD.SUPPLIES_WEIGHT, SUM_STORE_SCORECARD.OUT_OF_STOCK_WEIGHT, SUM_STORE_SCORECARD.STAFFING_PT_FT_RATIO_WEIGHT, SUM_STORE_SCORECARD.SELLING_INITIATIVES_WEIGHT, SUM_STORE_SCORECARD.BACKROOM_WEIGHT, SUM_STORE_SCORECARD.BAGS_WEIGHT, SUM_STORE_SCORECARD.SMALL_EQUIPMENT_WEIGHT, SUM_STORE_SCORECARD.SOURCE_TABLE_NAME, SUM_STORE_SCORECARD.CREATE_DATE, SUM_STORE_SCORECARD.MAINT_DATE, SUM_STORE_SCORECARD.CREATE_UID, SUM_STORE_SCORECARD.MAINT_UID, SUM_STORE_SCORECARD.DELETE_FLAG, SUM_STORE_SCORECARD.DELETE_DATE, SUM_STORE_SCORECARD.DELETE_UID From EBIDW.FIN.SUM_STORE_SCORECARD 
Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER=SUM_STORE_SCORECARD.STORE_NUMBER;
create or replace view XREF_340B_POS_CURRENT(
	RX_340B_HEADER_ID,
	ORDER_DETAIL_ID,
	ORDER_HEADER_ID,
	STORE_NUMBER,
	RX_NUMBER,
	REFILL_NUMBER,
	ORDER_NUMBER,
	ORDER_LINE_NUMBER,
	ORDER_TRANSACTION_TIME,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT XREF_340B_POS.RX_340B_HEADER_ID, XREF_340B_POS.ORDER_DETAIL_ID, XREF_340B_POS.ORDER_HEADER_ID, XREF_340B_POS.STORE_NUMBER, XREF_340B_POS.RX_NUMBER, XREF_340B_POS.REFILL_NUMBER, XREF_340B_POS.ORDER_NUMBER, XREF_340B_POS.ORDER_LINE_NUMBER, XREF_340B_POS.ORDER_TRANSACTION_TIME, XREF_340B_POS.ACTIVE_FLAG, XREF_340B_POS.EXTRACT_DATE, XREF_340B_POS.SOURCE_TABLE_NAME, XREF_340B_POS.CREATE_DATE, XREF_340B_POS.MAINT_DATE, XREF_340B_POS.CREATE_UID, XREF_340B_POS.MAINT_UID, XREF_340B_POS.DELETE_FLAG, XREF_340B_POS.DELETE_DATE, XREF_340B_POS.DELETE_UID From EBIDW.RX.XREF_340B_POS Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER= XREF_340B_POS.STORE_NUMBER
WHERE (XREF_340B_POS.DELETE_FLAG = 'f'::BOOLEAN);
create or replace view XREF_340B_TP_CURRENT(
	RX_340B_HEADER_ID,
	TPMS_APPLIED_PAYMENT_ID,
	STORE_NUMBER,
	RX_NUMBER,
	REFILL_NUMBER,
	PLAN_CODE,
	FILL_DATE,
	ACTIVE_FLAG,
	EXTRACT_DATE,
	SOURCE_TABLE_NAME,
	CREATE_DATE,
	MAINT_DATE,
	CREATE_UID,
	MAINT_UID,
	DELETE_FLAG,
	DELETE_DATE,
	DELETE_UID
) as SELECT XREF_340B_TP.RX_340B_HEADER_ID, XREF_340B_TP.TPMS_APPLIED_PAYMENT_ID, XREF_340B_TP.STORE_NUMBER, XREF_340B_TP.RX_NUMBER, XREF_340B_TP.REFILL_NUMBER, XREF_340B_TP.PLAN_CODE, XREF_340B_TP.FILL_DATE, XREF_340B_TP.ACTIVE_FLAG, XREF_340B_TP.EXTRACT_DATE, XREF_340B_TP.SOURCE_TABLE_NAME, XREF_340B_TP.CREATE_DATE, XREF_340B_TP.MAINT_DATE, XREF_340B_TP.CREATE_UID, XREF_340B_TP.MAINT_UID, XREF_340B_TP.DELETE_FLAG, XREF_340B_TP.DELETE_DATE, XREF_340B_TP.DELETE_UID From EBIDW.RX.XREF_340B_TP Join REPORTING.DIM_STORE_STACK_CURRENT SS
on SS.SALES_STORE_NUMBER= XREF_340B_TP.STORE_NUMBER WHERE (XREF_340B_TP.DELETE_FLAG = 'f'::BOOLEAN);